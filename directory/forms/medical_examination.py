# D:\YandexDisk\OT_online\directory\forms\medical_examination.py
"""
ü©∫ –§–æ—Ä–º—ã –º–æ–¥—É–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤

‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ UniquePositionMedicalNormForm ‚Äî –≤—ã–±–æ—Ä –Ω–æ—Ä–º—ã –ø–æ –æ–±—â–µ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
  –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏) –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
"""

from django import forms
from django.core.validators import FileExtensionValidator
from django.utils import timezone

from directory.models.medical_examination import (
    MedicalExaminationType,
    HarmfulFactor,
    MedicalSettings,
)
from directory.models.medical_norm import (
    MedicalExaminationNorm,
    PositionMedicalFactor,
    EmployeeMedicalExamination,
)
from directory.models.position import Position
from directory.models.employee import Employee

__all__ = [
    # –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã
    "MedicalExaminationTypeForm",
    "HarmfulFactorForm",
    "MedicalExaminationNormForm",
    "PositionMedicalFactorForm",
    "EmployeeMedicalExaminationForm",
    "MedicalSettingsForm",
    # –ø–æ–∏—Å–∫–æ–≤—ã–µ / —Å–µ—Ä–≤–∏—Å–Ω—ã–µ
    "MedicalNormSearchForm",
    "EmployeeMedicalExaminationSearchForm",
    "MedicalNormImportForm",
    "MedicalNormExportForm",
    # üÜï –Ω–æ–≤–∞—è
    "UniquePositionMedicalNormForm",
]

# ---------------------------------------------------------------------------
# üìã –í–ò–î–´ –ú–ï–î–û–°–ú–û–¢–†–û–í
# ---------------------------------------------------------------------------

class MedicalExaminationTypeForm(forms.ModelForm):
    class Meta:
        model = MedicalExaminationType
        fields = ["name"]
        widgets = {"name": forms.TextInput(attrs={"class": "form-control"})}

# ---------------------------------------------------------------------------
# ‚ò¢Ô∏è –í–†–ï–î–ù–´–ï –§–ê–ö–¢–û–†–´
# ---------------------------------------------------------------------------

class HarmfulFactorForm(forms.ModelForm):
    class Meta:
        model = HarmfulFactor
        fields = ["examination_type", "short_name", "full_name", "periodicity"]
        widgets = {
            "examination_type": forms.Select(attrs={"class": "form-control"}),
            "short_name":       forms.TextInput(attrs={"class": "form-control"}),
            "full_name":        forms.TextInput(attrs={"class": "form-control"}),
            "periodicity":      forms.NumberInput(attrs={"class": "form-control"}),
        }

# ---------------------------------------------------------------------------
# üìë –≠–¢–ê–õ–û–ù–ù–´–ï –ù–û–†–ú–´
# ---------------------------------------------------------------------------

class MedicalExaminationNormForm(forms.ModelForm):
    class Meta:
        model = MedicalExaminationNorm
        fields = ["position_name", "harmful_factor", "periodicity_override", "notes"]
        widgets = {
            "position_name":       forms.TextInput(attrs={"class": "form-control"}),
            "harmful_factor":      forms.Select(attrs={"class": "form-control"}),
            "periodicity_override":forms.NumberInput(attrs={"class": "form-control"}),
            "notes":               forms.Textarea(attrs={"class": "form-control", "rows": 3}),
        }

# ---------------------------------------------------------------------------
# üîÑ –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –î–û–õ–ñ–ù–û–°–¢–ï–ô
# ---------------------------------------------------------------------------

class PositionMedicalFactorForm(forms.ModelForm):
    class Meta:
        model = PositionMedicalFactor
        fields = ["position", "harmful_factor", "periodicity_override", "is_disabled", "notes"]
        widgets = {
            "position":            forms.Select(attrs={"class": "form-control"}),
            "harmful_factor":      forms.Select(attrs={"class": "form-control"}),
            "periodicity_override":forms.NumberInput(attrs={"class": "form-control"}),
            "is_disabled":         forms.CheckboxInput(attrs={"class": "form-check-input"}),
            "notes":               forms.Textarea(attrs={"class": "form-control", "rows": 3}),
        }

# ---------------------------------------------------------------------------
# üë®‚Äç‚öïÔ∏è –ñ–£–†–ù–ê–õ –ú–ï–î–û–°–ú–û–¢–†–û–í –°–û–¢–†–£–î–ù–ò–ö–û–í
# ---------------------------------------------------------------------------

class EmployeeMedicalExaminationForm(forms.ModelForm):
    class Meta:
        model = EmployeeMedicalExamination
        fields = [
            "employee", "examination_type", "harmful_factor",
            "date_completed", "next_date", "medical_certificate",
            "status", "notes",
        ]
        widgets = {
            "employee":            forms.Select(attrs={"class": "form-control"}),
            "examination_type":    forms.Select(attrs={"class": "form-control"}),
            "harmful_factor":      forms.Select(attrs={"class": "form-control"}),
            "date_completed":      forms.DateInput(attrs={"class": "form-control", "type": "date"}),
            "next_date":           forms.DateInput(attrs={"class": "form-control", "type": "date"}),
            "medical_certificate": forms.ClearableFileInput(attrs={"class": "form-control"}),
            "status":              forms.Select(attrs={"class": "form-control"}),
            "notes":               forms.Textarea(attrs={"class": "form-control", "rows": 3}),
        }

    def clean(self):
        cd = super().clean()
        d1, d2 = cd.get("date_completed"), cd.get("next_date")
        if d1 and d2 and d2 <= d1:
            self.add_error("next_date", "–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
        if d1 and d1 > timezone.now().date():
            self.add_error("date_completed", "–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        return cd

# ---------------------------------------------------------------------------
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
# ---------------------------------------------------------------------------

class MedicalSettingsForm(forms.ModelForm):
    class Meta:
        model = MedicalSettings
        fields = ["days_before_issue", "days_before_email"]
        widgets = {
            "days_before_issue": forms.NumberInput(attrs={"class": "form-control"}),
            "days_before_email": forms.NumberInput(attrs={"class": "form-control"}),
        }

# ---------------------------------------------------------------------------
# üîç –ü–û–ò–°–ö–û–í–´–ï / –°–ï–†–í–ò–°–ù–´–ï –§–û–†–ú–´
# ---------------------------------------------------------------------------

class MedicalNormSearchForm(forms.Form):
    position_name = forms.CharField(required=False, label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                                    widget=forms.TextInput(attrs={"class": "form-control"}))
    examination_type = forms.ModelChoiceField(required=False, label="–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞",
                                              queryset=MedicalExaminationType.objects.all(),
                                              widget=forms.Select(attrs={"class": "form-control"}))
    harmful_factor = forms.CharField(required=False, label="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä",
                                     widget=forms.TextInput(attrs={"class": "form-control"}))


class EmployeeMedicalExaminationSearchForm(forms.Form):
    employee = forms.CharField(required=False, label="–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
                               widget=forms.TextInput(attrs={"class": "form-control"}))
    examination_type = forms.ModelChoiceField(required=False, label="–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞",
                                              queryset=MedicalExaminationType.objects.all(),
                                              widget=forms.Select(attrs={"class": "form-control"}))
    status = forms.ChoiceField(required=False, label="–°—Ç–∞—Ç—É—Å",
                               choices=[("", "---")] + list(EmployeeMedicalExamination.STATUS_CHOICES),
                               widget=forms.Select(attrs={"class": "form-control"}))
    date_from = forms.DateField(required=False, label="–î–∞—Ç–∞ —Å",
                                widget=forms.DateInput(attrs={"class": "form-control", "type": "date"}))
    date_to = forms.DateField(required=False, label="–î–∞—Ç–∞ –ø–æ",
                              widget=forms.DateInput(attrs={"class": "form-control", "type": "date"}))

# –∏–º–ø–æ—Ä—Ç / —ç–∫—Å–ø–æ—Ä—Ç

class MedicalNormImportForm(forms.Form):
    file = forms.FileField(label="–§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
                           validators=[FileExtensionValidator(allowed_extensions=["xls", "xlsx", "csv"])],
                           widget=forms.FileInput(attrs={"class": "form-control"}))
    skip_first_row = forms.BooleanField(required=False, initial=True,
                                        label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É",
                                        widget=forms.CheckboxInput(attrs={"class": "form-check-input"}))
    update_existing = forms.BooleanField(required=False, initial=True,
                                         label="–û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ",
                                         widget=forms.CheckboxInput(attrs={"class": "form-check-input"}))


class MedicalNormExportForm(forms.Form):
    FORMAT_CHOICES = [("xlsx", "Excel (.xlsx)"), ("csv", "CSV (.csv)"), ("json", "JSON (.json)")]
    format = forms.ChoiceField(label="–§–æ—Ä–º–∞—Ç", choices=FORMAT_CHOICES, initial="xlsx",
                               widget=forms.Select(attrs={"class": "form-control"}))
    include_headers = forms.BooleanField(required=False, initial=True,
                                         label="–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏",
                                         widget=forms.CheckboxInput(attrs={"class": "form-check-input"}))

# ---------------------------------------------------------------------------
# üÜï –§–û–†–ú–ê –í–´–ë–û–†–ê –û–ë–©–ï–ô –î–û–õ–ñ–ù–û–°–¢–ò
# ---------------------------------------------------------------------------

class UniquePositionMedicalNormForm(forms.ModelForm):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ MedicalExaminationNormAdmin: –≤—ã–±–æ—Ä ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è (–¥–æ–ª–∂–Ω–æ—Å—Ç—å)¬ª
    –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Position.position_name.  –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç `position_name`.
    """
    unique_position_name = forms.ChoiceField(
        label="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è (–¥–æ–ª–∂–Ω–æ—Å—Ç—å)",
        required=True,
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
    )

    class Meta:
        model = MedicalExaminationNorm
        fields = ("harmful_factor", "periodicity_override", "notes")
        widgets = {
            "harmful_factor":      forms.Select(attrs={"class": "form-control"}),
            "periodicity_override":forms.NumberInput(attrs={"class": "form-control"}),
            "notes":               forms.Textarea(attrs={"class": "form-control", "rows": 3}),
        }

    # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ choices + –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞
    def __init__(self, *args, **kwargs):
        position_id = kwargs.pop("position_id", None)
        super().__init__(*args, **kwargs)

        names = Position.objects.values_list("position_name", flat=True).distinct().order_by("position_name")
        self.fields["unique_position_name"].choices = [("", "---")] + [(n, n) for n in names]

        if self.instance.pk:
            self.fields["unique_position_name"].initial = self.instance.position_name
        elif position_id:
            try:
                pos = Position.objects.get(pk=position_id)
                self.fields["unique_position_name"].initial = pos.position_name
            except Position.DoesNotExist:
                pass

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (position_name + factor)
    def clean(self):
        cleaned = super().clean()
        name = cleaned.get("unique_position_name")
        factor = cleaned.get("harmful_factor")
        if not name:
            self.add_error("unique_position_name", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
            return cleaned

        qs = MedicalExaminationNorm.objects.filter(position_name=name, harmful_factor=factor)
        if self.instance.pk:
            qs = qs.exclude(pk=self.instance.pk)
        if qs.exists():
            self.add_error("unique_position_name", f"–ù–æ—Ä–º–∞ –¥–ª—è ¬´{name}¬ª –∏ —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return cleaned

    def save(self, commit=True):
        self.instance.position_name = self.cleaned_data["unique_position_name"]
        return super().save(commit)
