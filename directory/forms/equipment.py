# directory/forms/equipment.py
from django import forms
from django.utils import timezone
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit, Layout, Fieldset, Div, HTML
from dal import autocomplete
from directory.models import Equipment
from directory.forms.mixins import OrganizationRestrictionFormMixin


class EquipmentForm(OrganizationRestrictionFormMixin, forms.ModelForm):
    """
    ‚öôÔ∏è –§–æ—Ä–º–∞ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ç–¥–µ–ª–∞,
    –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
    """

    class Meta:
        model = Equipment
        fields = [
            'equipment_name', 'inventory_number',
            'organization', 'subdivision', 'department',
            'maintenance_period_days', 'last_maintenance_date',
            'next_maintenance_date', 'maintenance_status'
        ]
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...'}
            ),
            'last_maintenance_date': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            ),
            'next_maintenance_date': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            ),
        }

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.layout = Layout(
            Fieldset(
                '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'equipment_name',
                'inventory_number',
                'organization',
                'subdivision',
                'department',
            ),
            Fieldset(
                '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                'maintenance_period_days',
                'last_maintenance_date',
                'next_maintenance_date',
                'maintenance_status',
            ),
            HTML('<hr>'),
            Div(
                Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', css_class='btn-primary'),
                HTML('<a href="{% url "directory:equipment:equipment_list" %}" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>'),
                css_class='d-flex justify-content-between mt-3'
            )
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîí
        if self.user and hasattr(self.user, 'profile'):
            user_orgs = self.user.profile.organizations.all()
            self.fields['organization'].queryset = user_orgs
            if user_orgs.count() == 1:
                org = user_orgs.first()
                self.initial['organization'] = org.id
                self.fields['subdivision'].queryset = org.subdivisions.all()
            else:
                self.fields['subdivision'].queryset = Equipment.objects.none()

            self.fields['department'].queryset = Equipment.objects.none()

    def clean(self):
        cleaned_data = super().clean()

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ -
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        last_maintenance = cleaned_data.get('last_maintenance_date')
        next_maintenance = cleaned_data.get('next_maintenance_date')
        maintenance_period = cleaned_data.get('maintenance_period_days')

        if last_maintenance and not next_maintenance and maintenance_period:
            from datetime import timedelta
            cleaned_data['next_maintenance_date'] = last_maintenance + timedelta(days=maintenance_period)

        return cleaned_data