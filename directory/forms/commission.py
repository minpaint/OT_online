from django import forms
from django.core.exceptions import ValidationError
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, ButtonHolder, Submit, Div, HTML, Field, Row, Column
from dal import autocomplete
from directory.models import Commission, CommissionMember, Employee, Organization, StructuralSubdivision as Subdivision, \
    Department
from .mixins import OrganizationRestrictionFormMixin


class CommissionForm(OrganizationRestrictionFormMixin, forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""

    class Meta:
        model = Commission
        fields = ['name', 'commission_type', 'organization', 'subdivision', 'department', 'is_active']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'commission_type': forms.Select(attrs={'class': 'form-control'}),
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...'}
            ),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ñ–æ—Ä–º—ã
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Fieldset(
                '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'name',
                'commission_type',
                'is_active',
            ),
            Fieldset(
                '–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                HTML(
                    '<p class="text-info">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤—è–∑–∫–∏: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª</p>'),
                'organization',
                'subdivision',
                'department',
            ),
            ButtonHolder(
                Submit('submit', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', css_class='btn btn-primary'),
                HTML(
                    '<a href="{% url "directory:commissions:commission_list" %}" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>'),
            )
        )

        # –î–µ–ª–∞–µ–º –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ–æ—Ä–º—ã
        self.fields['organization'].required = False
        self.fields['subdivision'].required = False
        self.fields['department'].required = False

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
        if self.user and hasattr(self.user, 'profile'):
            user_orgs = self.user.profile.organizations.all()
            self.fields['organization'].queryset = user_orgs

            if user_orgs.count() == 1:
                org = user_orgs.first()
                self.initial['organization'] = org.id
                self.fields['subdivision'].queryset = Subdivision.objects.filter(organization=org)
            else:
                self.fields['subdivision'].queryset = Subdivision.objects.none()

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–¥–µ–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        self.fields['department'].queryset = Department.objects.none()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if self.instance and self.instance.pk:
            if self.instance.organization:
                self.fields['subdivision'].queryset = Subdivision.objects.filter(
                    organization=self.instance.organization)
            if self.instance.subdivision:
                self.fields['department'].queryset = Department.objects.filter(subdivision=self.instance.subdivision)

    def clean(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        cleaned_data = super().clean()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤—è–∑–∫–∏
        organization = cleaned_data.get('organization')
        subdivision = cleaned_data.get('subdivision')
        department = cleaned_data.get('department')

        bindings = sum(1 for field in [organization, subdivision, department] if field is not None)

        if bindings == 0:
            raise ValidationError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª.')
        elif bindings > 1:
            raise ValidationError(
                '–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É —É—Ä–æ–≤–Ω—é: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, '
                '—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª.'
            )

        return cleaned_data


class CommissionMemberForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏"""

    class Meta:
        model = CommissionMember
        fields = ['commission', 'employee', 'role', 'is_active']
        widgets = {
            'commission': forms.HiddenInput(),
            'employee': autocomplete.ModelSelect2(
                url='directory:employee-autocomplete',
                forward=['commission'],
                attrs={'data-placeholder': 'üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...'}
            ),
            'role': forms.Select(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

    def __init__(self, *args, **kwargs):
        commission = kwargs.pop('commission', None)
        super().__init__(*args, **kwargs)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ñ–æ—Ä–º—ã
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            'commission',
            Row(
                Column('employee', css_class='form-group col-md-6'),
                Column('role', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            'is_active',
            ButtonHolder(
                Submit('submit', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', css_class='btn btn-primary'),
                HTML(
                    '<a href="{% url "directory:commissions:commission_detail" commission.id %}" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>'),
            )
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
        if commission:
            self.fields['commission'].initial = commission.id

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
        existing_roles = []
        if commission:
            existing_roles = list(commission.members.filter(
                is_active=True
            ).exclude(
                id=self.instance.id if self.instance and self.instance.id else None
            ).values_list('role', flat=True))

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç—ã
        self.role_choices = []
        for value, label in self.fields['role'].choices:
            disabled = False
            tooltip = ""
            if value in ['chairman', 'secretary'] and value in existing_roles:
                disabled = True
                tooltip = f"–†–æ–ª—å {label} —É–∂–µ –∑–∞–Ω—è—Ç–∞"

            self.role_choices.append((value, label, disabled, tooltip))

    def clean(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        cleaned_data = super().clean()

        commission = cleaned_data.get('commission')
        role = cleaned_data.get('role')
        is_active = cleaned_data.get('is_active')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–æ–ª–µ–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
        if is_active and role in ['chairman', 'secretary']:
            existing = CommissionMember.objects.filter(
                commission=commission,
                role=role,
                is_active=True
            )

            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if self.instance and self.instance.pk:
                existing = existing.exclude(id=self.instance.id)

            if existing.exists():
                role_display = dict(CommissionMember.ROLE_CHOICES)[role]
                raise ValidationError(
                    f'–í –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π {role_display.lower()}. '
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.'
                )

        return cleaned_data