from django import forms
from django.utils import timezone
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Submit, Row, Column, HTML, Div
from directory.models.siz_issued import SIZIssued
from directory.models.siz import SIZNorm, SIZ
from directory.models.employee import Employee


class SIZIssueMassForm(forms.Form):
    """
    üìù –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –°–ò–ó –¥–ª—è –≤—ã–¥–∞—á–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, –¥–∞—Ç–µ –∏ —Ç.–¥.
    """
    employee = forms.ModelChoiceField(
        queryset=Employee.objects.all(),
        label="–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        required=True,
        widget=forms.Select(attrs={'class': 'form-select select2'})
    )
    issue_date = forms.DateField(
        label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏",
        required=True,
        initial=timezone.now,
        widget=forms.DateInput(
            attrs={'type': 'date', 'class': 'form-control'},
            format='%Y-%m-%d'
        )
    )

    def __init__(self, *args, **kwargs):
        """
        üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –°–ò–ó
        """
        self.user = kwargs.pop('user', None)
        self.employee_id = kwargs.pop('employee_id', None)
        super().__init__(*args, **kwargs)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è helper –¥–ª—è crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_class = 'form-horizontal'

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and hasattr(self.user, 'profile'):
            allowed_orgs = self.user.profile.organizations.all()
            self.fields['employee'].queryset = Employee.objects.filter(
                organization__in=allowed_orgs
            ).order_by('full_name_nominative')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if self.employee_id:
            try:
                self.fields['employee'].initial = Employee.objects.get(pk=self.employee_id)
            except Employee.DoesNotExist:
                pass

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        self.setup_siz_fields()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout –¥–ª—è —Ñ–æ—Ä–º—ã
        self.setup_layout()

    def setup_siz_fields(self):
        """
        üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –°–ò–ó
        """
        if 'employee' in self.data and self.data['employee']:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                employee = Employee.objects.get(pk=self.data['employee'])
                self.add_siz_fields_for_employee(employee)
            except (Employee.DoesNotExist, ValueError):
                pass
        elif self.fields['employee'].initial:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            self.add_siz_fields_for_employee(self.fields['employee'].initial)

    def add_siz_fields_for_employee(self, employee):
        """
        ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –°–ò–ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ—Ä–º—ã –ø–æ–ª—è
        –≤—ã–±–æ—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
        """
        if not employee.position:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        norms = SIZNorm.objects.filter(
            position=employee.position
        ).select_related('siz').order_by('condition', 'order', 'siz__name')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
        conditions_groups = {}
        for norm in norms:
            condition = norm.condition or "–û—Å–Ω–æ–≤–Ω—ã–µ –°–ò–ó"
            if condition not in conditions_groups:
                conditions_groups[condition] = []
            conditions_groups[condition].append(norm)

        # –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ—Ä–º—ã —Å–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π
        for condition, condition_norms in conditions_groups.items():
            for norm in condition_norms:
                field_prefix = f"siz_{norm.id}"

                # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –°–ò–ó (—á–µ–∫–±–æ–∫—Å)
                self.fields[f"{field_prefix}_select"] = forms.BooleanField(
                    label=f"{norm.siz.name} ({norm.siz.classification})",
                    required=False,
                    initial=False,
                    widget=forms.CheckboxInput(attrs={
                        'class': 'form-check-input siz-select',
                        'data-norm-id': norm.id,
                        'data-condition': condition
                    })
                )

                # –ü–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                self.fields[f"{field_prefix}_quantity"] = forms.IntegerField(
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    required=False,
                    initial=norm.quantity,
                    min_value=1,
                    widget=forms.NumberInput(attrs={
                        'class': 'form-control siz-quantity',
                        'data-norm-id': norm.id
                    })
                )

                # –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
                self.fields[f"{field_prefix}_notes"] = forms.CharField(
                    label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
                    required=False,
                    widget=forms.TextInput(attrs={
                        'class': 'form-control siz-notes',
                        'data-norm-id': norm.id
                    })
                )

                # –ü–æ–ª–µ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                self.fields[f"{field_prefix}_cost"] = forms.DecimalField(
                    label="–°—Ç–æ–∏–º–æ—Å—Ç—å",
                    required=False,
                    decimal_places=2,
                    max_digits=10,
                    widget=forms.NumberInput(attrs={
                        'class': 'form-control siz-cost',
                        'data-norm-id': norm.id,
                        'step': '0.01'
                    })
                )

                # –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å ID –Ω–æ—Ä–º—ã –∏ –°–ò–ó
                self.fields[f"{field_prefix}_norm_id"] = forms.IntegerField(
                    widget=forms.HiddenInput(),
                    initial=norm.id
                )
                self.fields[f"{field_prefix}_siz_id"] = forms.IntegerField(
                    widget=forms.HiddenInput(),
                    initial=norm.siz.id
                )
                self.fields[f"{field_prefix}_condition"] = forms.CharField(
                    widget=forms.HiddenInput(),
                    initial=norm.condition
                )

    def setup_layout(self):
        """
        üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout –¥–ª—è —Ñ–æ—Ä–º—ã
        """
        layout_objects = [
            Fieldset(
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ',
                Row(
                    Column('employee', css_class='col-md-6'),
                    Column('issue_date', css_class='col-md-6'),
                    css_class='form-row'
                ),
                css_class='border p-3 mb-3 rounded'
            ),
            HTML("<div id='siz-groups-container'></div>"),
            Div(
                Submit('submit', 'üíæ –í—ã–¥–∞—Ç—å –°–ò–ó', css_class='btn-primary'),
                HTML('<a href="{% url "directory:siz:siz_list" %}" class="btn btn-secondary ml-2">–û—Ç–º–µ–Ω–∞</a>'),
                css_class='text-center mt-3'
            )
        ]

        self.helper.layout = Layout(*layout_objects)

    def save(self, commit=True):
        """
        üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ò–ó

        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã SIZIssued –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–ò–ó
        """
        if not commit:
            return []

        employee = self.cleaned_data['employee']
        issue_date = self.cleaned_data['issue_date']

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        created_objects = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã, –∏—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ò–ó
        for field_name, value in self.cleaned_data.items():
            if field_name.endswith('_select') and value:
                # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ—Ä–º—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—è
                norm_id = field_name.split('_')[1]

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —ç—Ç–æ–π –Ω–æ—Ä–º—ã
                siz_id = self.cleaned_data.get(f"siz_{norm_id}_siz_id")
                quantity = self.cleaned_data.get(f"siz_{norm_id}_quantity", 1)
                notes = self.cleaned_data.get(f"siz_{norm_id}_notes", "")
                cost = self.cleaned_data.get(f"siz_{norm_id}_cost")
                condition = self.cleaned_data.get(f"siz_{norm_id}_condition", "")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –°–ò–ó
                try:
                    siz = SIZ.objects.get(pk=siz_id)

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ –°–ò–ó
                    issued = SIZIssued.objects.create(
                        employee=employee,
                        siz=siz,
                        issue_date=issue_date,
                        quantity=quantity,
                        notes=notes,
                        cost=cost,
                        condition=condition,
                        received_signature=True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞
                    )

                    created_objects.append(issued)

                except SIZ.DoesNotExist:
                    continue

        return created_objects


class SIZIssueReturnForm(forms.ModelForm):
    """
    üìù –§–æ—Ä–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    class Meta:
        model = SIZIssued
        fields = ['return_date', 'wear_percentage', 'notes']
        widgets = {
            'return_date': forms.DateInput(
                attrs={'type': 'date', 'class': 'form-control'},
                format='%Y-%m-%d'
            ),
            'wear_percentage': forms.NumberInput(
                attrs={'class': 'form-control', 'min': 0, 'max': 100}
            ),
            'notes': forms.Textarea(
                attrs={'class': 'form-control', 'rows': 3}
            )
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['return_date'].initial = timezone.now
        self.fields['return_date'].required = True

        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', css_class='btn-primary'))

    def save(self, commit=True):
        instance = super().save(commit=False)
        instance.is_returned = True

        if commit:
            instance.save()

        return instance