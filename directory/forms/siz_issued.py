# üìÅ directory/forms/siz_issued.py
from django import forms
from django.utils import timezone
from django.forms import formset_factory
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Field, HTML, Submit, Button
from directory.models import SIZIssued, SIZ, SIZNorm, Employee, Position


class SIZIssueForm(forms.ModelForm):
    """
    üìù –§–æ—Ä–º–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    """

    class Meta:
        model = SIZIssued
        fields = [
            'employee', 'siz', 'issue_date', 'quantity',
            'cost', 'condition', 'notes', 'received_signature'
        ]
        widgets = {
            'issue_date': forms.DateInput(attrs={'type': 'date'}, format='%Y-%m-%d'),
            'notes': forms.Textarea(attrs={'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        # üîë –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        self.user = kwargs.pop('user', None)

        # üß© –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        self.initial_employee_id = kwargs.pop('employee_id', None)

        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã —Å –ø–æ–º–æ—â—å—é crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_tag = True

        # üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and hasattr(self.user, 'profile'):
            allowed_orgs = self.user.profile.organizations.all()
            self.fields['employee'].queryset = Employee.objects.filter(
                organization__in=allowed_orgs
            ).order_by('full_name_nominative')

        # üìå –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        if self.initial_employee_id:
            try:
                employee = Employee.objects.get(id=self.initial_employee_id)
                self.fields['employee'].initial = employee
                self.fields['employee'].widget.attrs['disabled'] = True

                # üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –°–ò–ó, –ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ –Ω–æ—Ä–º–∞–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                if hasattr(employee, 'position') and employee.position:
                    norms = SIZNorm.objects.filter(
                        position=employee.position
                    ).select_related('siz')

                    if norms.exists():
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –°–ò–ó —Ç–µ–º–∏, —á—Ç–æ –ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –Ω–æ—Ä–º–∞–º
                        siz_ids = norms.values_list('siz_id', flat=True)
                        self.fields['siz'].queryset = SIZ.objects.filter(id__in=siz_ids)

                        # ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—è condition –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π –∏–∑ –Ω–æ—Ä–º
                        conditions = norms.exclude(condition='').values_list('condition', flat=True).distinct()
                        if conditions:
                            self.fields['condition'].widget.attrs['list'] = 'condition_datalist'
                            condition_options = ''.join([f'<option value="{c}">' for c in conditions])
                            self.fields[
                                'condition'].help_text += f'<datalist id="condition_datalist">{condition_options}</datalist>'
            except Employee.DoesNotExist:
                pass

        # üìÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—è issue_date
        self.fields['issue_date'].initial = timezone.now().date()


class SIZIssueMassForm(forms.Form):
    """
    üìã –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    """
    employee = forms.ModelChoiceField(
        queryset=Employee.objects.all(),
        label="–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        required=True
    )

    siz_norm = forms.ModelChoiceField(
        queryset=SIZNorm.objects.none(),  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        label="–°–ò–ó (–∏–∑ –Ω–æ—Ä–º)",
        required=True,
        empty_label="–í—ã–±–µ—Ä–∏—Ç–µ –°–ò–ó –∏–∑ –Ω–æ—Ä–º"
    )

    issue_date = forms.DateField(
        label="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏",
        widget=forms.DateInput(attrs={'type': 'date'}, format='%Y-%m-%d'),
        initial=timezone.now().date()
    )

    quantity = forms.IntegerField(
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        min_value=1,
        initial=1
    )

    cost = forms.DecimalField(
        label="–°—Ç–æ–∏–º–æ—Å—Ç—å",
        required=False,
        min_value=0,
        decimal_places=2
    )

    notes = forms.CharField(
        label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        required=False,
        widget=forms.Textarea(attrs={'rows': 3})
    )

    received_signature = forms.BooleanField(
        label="–ü–æ–¥–ø–∏—Å—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        required=False,
        initial=True
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã —Å –ø–æ–º–æ—â—å—é crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_id = 'siz-issue-mass-form'

        # üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and hasattr(self.user, 'profile'):
            allowed_orgs = self.user.profile.organizations.all()
            self.fields['employee'].queryset = Employee.objects.filter(
                organization__in=allowed_orgs
            ).order_by('full_name_nominative')

        # üì± –î–æ–±–∞–≤–ª—è–µ–º AJAX-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–ª–µ–π
        self.fields['employee'].widget.attrs.update({
            'class': 'select2 form-control',
            'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
            'onchange': 'updateSIZNorms(this.value)'
        })

        self.fields['siz_norm'].widget.attrs.update({
            'class': 'select2 form-control',
            'data-placeholder': '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
        })


class SIZIssueReturnForm(forms.ModelForm):
    """
    üîÑ –§–æ—Ä–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –°–ò–ó
    """

    confirm_return = forms.BooleanField(
        label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤–æ–∑–≤—Ä–∞—Ç –°–ò–ó",
        required=True,
        initial=True,
        help_text="–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –°–ò–ó"
    )

    class Meta:
        model = SIZIssued
        fields = ['return_date', 'wear_percentage', 'notes']
        widgets = {
            'return_date': forms.DateInput(attrs={'type': 'date'}, format='%Y-%m-%d'),
            'wear_percentage': forms.NumberInput(attrs={'min': '0', 'max': '100'}),
            'notes': forms.Textarea(attrs={'rows': 3, 'placeholder': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–ò–ó'})
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã —Å –ø–æ–º–æ—â—å—é crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_tag = True

        # üìÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—è return_date
        self.fields['return_date'].initial = timezone.now().date()

        # üß© –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –º–∞–∫–µ—Ç —Ñ–æ—Ä–º—ã
        self.helper.layout = Layout(
            Field('return_date'),
            Field('wear_percentage'),
            Field('notes'),
            Div(
                Field('confirm_return'),
                css_class='alert alert-warning p-3 mt-3'
            ),
            Div(
                Submit('submit', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', css_class='btn-success'),
                Button('cancel', '‚ùå –û—Ç–º–µ–Ω–∞', css_class='btn-secondary ml-2',
                       onclick="window.history.back();"),
                css_class='text-center mt-4'
            )
        )

    def clean(self):
        """
        üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        """
        cleaned_data = super().clean()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑–≤—Ä–∞—Ç
        if not cleaned_data.get('confirm_return'):
            self.add_error('confirm_return', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –°–ò–ó')

        # üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏
        return_date = cleaned_data.get('return_date')
        if return_date and self.instance and self.instance.issue_date and return_date < self.instance.issue_date:
            self.add_error('return_date', '–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏')

        return cleaned_data

    def save(self, commit=True):
        """
        üíæ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ is_returned
        """
        instance = super().save(commit=False)
        instance.is_returned = True

        if commit:
            instance.save()

        return instance