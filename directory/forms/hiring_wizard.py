from django import forms
from django.utils.translation import gettext_lazy as _
from dal import autocomplete
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Div, Submit, HTML, Row, Column, Field

from directory.models import (
    Employee,
    EmployeeHiring,
    Organization,
    Position,
    StructuralSubdivision,
    Department
)


class CombinedEmployeeHiringForm(forms.Form):
    """
    üë®‚Äçüíº –§–æ—Ä–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
    —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª–µ–π (–§–ò–û –∏ –í–∏–¥ –ø—Ä–∏–µ–º–∞ –ø–µ—Ä–≤—ã–º–∏)
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–º–∏ –∏–¥—É—Ç –§–ò–û –∏ –í–∏–¥ –ø—Ä–∏–µ–º–∞)
    full_name_nominative = forms.CharField(
        label=_("–§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)"),
        max_length=255,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
        })
    )

    hiring_type = forms.ChoiceField(
        label=_("–í–∏–¥ –ø—Ä–∏–µ–º–∞"),
        choices=EmployeeHiring.HIRING_TYPE_CHOICES,
        initial='new',
        required=True,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    organization = forms.ModelChoiceField(
        queryset=Organization.objects.all(),
        label=_("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"),
        required=True,
        widget=autocomplete.ModelSelect2(
            url='directory:organization-autocomplete',
            attrs={
                'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...',
                'class': 'select2 form-control'
            }
        )
    )

    subdivision = forms.ModelChoiceField(
        queryset=StructuralSubdivision.objects.none(),
        label=_("–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"),
        required=False,
        widget=autocomplete.ModelSelect2(
            url='directory:subdivision-autocomplete',
            forward=['organization'],
            attrs={
                'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...',
                'class': 'select2 form-control'
            }
        )
    )

    department = forms.ModelChoiceField(
        queryset=Department.objects.none(),
        label=_("–û—Ç–¥–µ–ª"),
        required=False,
        widget=autocomplete.ModelSelect2(
            url='directory:department-autocomplete',
            forward=['subdivision'],
            attrs={
                'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                'class': 'select2 form-control'
            }
        )
    )

    position = forms.ModelChoiceField(
        queryset=Position.objects.all(),
        label=_("–î–æ–ª–∂–Ω–æ—Å—Ç—å"),
        required=True,
        widget=autocomplete.ModelSelect2(
            url='directory:position-autocomplete',
            forward=['organization', 'subdivision', 'department'],
            attrs={
                'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...',
                'class': 'select2 form-control'
            }
        )
    )

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
    date_of_birth = forms.DateField(
        label=_("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"),
        required=False,
        widget=forms.DateInput(
            attrs={
                'type': 'date',
                'class': 'form-control'
            },
            format='%Y-%m-%d'
        )
    )

    place_of_residence = forms.CharField(
        label=_("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"),
        required=False,
        widget=forms.Textarea(
            attrs={
                'rows': 3,
                'class': 'form-control',
                'placeholder': '–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
            }
        )
    )

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –°–ò–ó (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
    height = forms.ChoiceField(
        label=_("–†–æ—Å—Ç"),
        choices=Employee.HEIGHT_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    clothing_size = forms.ChoiceField(
        label=_("–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã"),
        choices=Employee.CLOTHING_SIZE_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    shoe_size = forms.ChoiceField(
        label=_("–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏"),
        choices=Employee.SHOE_SIZE_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    # –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ (—Å–∫—Ä—ã—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    contract_type = forms.ChoiceField(
        label=_("–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞"),
        choices=Employee.CONTRACT_TYPE_CHOICES,
        initial='standard',
        required=False,
        widget=forms.HiddenInput()
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ crispy forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_id = 'hiring-form'

        # –ò–∑–º–µ–Ω—è–µ–º layout –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.helper.layout = Layout(
            # –°–µ–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            Fieldset(
                _('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
                Row(
                    Column('full_name_nominative', css_class='col-md-8'),
                    Column('hiring_type', css_class='col-md-4'),
                ),
                css_class='form-section'
            ),

            # –°–µ–∫—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            Fieldset(
                _('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'),
                'organization',
                Row(
                    Column('subdivision', css_class='col-md-6'),
                    Column('department', css_class='col-md-6'),
                ),
                'position',
                css_class='form-section'
            ),

            # –°–µ–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            Div(
                Fieldset(
                    _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞'),
                    Row(
                        Column('date_of_birth', css_class='col-md-6'),
                        Column('place_of_residence', css_class='col-md-6'),
                    ),
                ),
                css_class='form-section d-none',
                id='medical-section'
            ),

            # –°–µ–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –°–ò–ó (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            Div(
                Fieldset(
                    _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –°–ò–ó'),
                    Row(
                        Column('height', css_class='col-md-4'),
                        Column('clothing_size', css_class='col-md-4'),
                        Column('shoe_size', css_class='col-md-4'),
                    ),
                ),
                css_class='form-section d-none',
                id='siz-section'
            ),

            # –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
            'contract_type',

            # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
            Div(
                Submit('submit', _('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'), css_class='btn-primary'),
                HTML(
                    '<a href="{% url "directory:hiring:hiring_list" %}" class="btn btn-secondary">{{ _("–û—Ç–º–µ–Ω–∞") }}</a>'),
                css_class='form-group text-right'
            )
        )

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and hasattr(self.user, 'profile'):
            user_orgs = self.user.profile.organizations.all()
            self.fields['organization'].queryset = user_orgs

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –µ—ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if user_orgs.count() == 1:
                self.initial['organization'] = user_orgs.first().id

    def clean(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
        """
        cleaned_data = super().clean()
        position = cleaned_data.get('position')

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó
        if position:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–æ—Å–º–æ—Ç—Ä (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ is_disabled=False)
            needs_medical = position.medical_factors.filter(is_disabled=False).exists()

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞
            if not needs_medical:
                from directory.models.medical_norm import MedicalExaminationNorm
                needs_medical = MedicalExaminationNorm.objects.filter(
                    position_name=position.position_name
                ).exists()

            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ–¥–æ—Å–º–æ—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if needs_medical:
                date_of_birth = cleaned_data.get('date_of_birth')
                place_of_residence = cleaned_data.get('place_of_residence')

                if not date_of_birth:
                    self.add_error('date_of_birth', _('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞'))

                if not place_of_residence:
                    self.add_error('place_of_residence', _('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞'))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ò–ó
            needs_siz = position.siz_norms.exists()

            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó
            if not needs_siz:
                needs_siz = Position.find_reference_norms(position.position_name).exists()

            # –î–ª—è –°–ò–ó –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        return cleaned_data