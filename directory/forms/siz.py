from django import forms
from directory.models.siz import SIZ, SIZNorm
from directory.models.position import Position
from directory.forms.mixins import CrispyFormMixin
from dal import autocomplete

class SIZForm(CrispyFormMixin, forms.ModelForm):
    """
    üõ°Ô∏è –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–ò–ó
    """
    class Meta:
        model = SIZ
        fields = ('name', 'classification', 'unit', 'wear_period')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper.form_tag = True
        self.helper.form_method = 'post'

class SIZNormForm(CrispyFormMixin, forms.ModelForm):
    """
    üìã –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ –°–ò–ó
    """
    class Meta:
        model = SIZNorm
        fields = ('position', 'siz', 'quantity', 'condition', 'order')
        widgets = {
            'position': autocomplete.ModelSelect2(url='directory:position-autocomplete'),
            'siz': autocomplete.ModelSelect2(url='directory:siz-autocomplete'),
        }

    def __init__(self, *args, **kwargs):
        position_id = kwargs.pop('position_id', None)
        super().__init__(*args, **kwargs)
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if position_id:
            self.fields['position'].initial = position_id
            self.fields['position'].widget.attrs['readonly'] = True

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—è condition (—Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π)
        conditions = SIZNorm.objects.exclude(condition='').values_list('condition', flat=True).distinct()
        if conditions:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            self.fields['condition'].widget.attrs['list'] = 'condition_datalist'
            self.fields['condition'].help_text += '<datalist id="condition_datalist">'
            for condition in set(conditions):
                self.fields['condition'].help_text += f'<option value="{condition}">'
            self.fields['condition'].help_text += '</datalist>'

        self.helper.form_tag = True
        self.helper.form_method = 'post'

    def clean(self):
        """
        ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ position-siz-condition
        """
        cleaned_data = super().clean()
        position = cleaned_data.get('position')
        siz = cleaned_data.get('siz')
        condition = cleaned_data.get('condition', '')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ä–º—ã
        if position and siz:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ position-siz-condition
            existing_norm = SIZNorm.objects.filter(
                position=position,
                siz=siz,
                condition=condition
            )

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if self.instance and self.instance.pk:
                existing_norm = existing_norm.exclude(pk=self.instance.pk)

            if existing_norm.exists():
                condition_display = condition if condition else "–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã"
                raise forms.ValidationError(
                    f"–ù–æ—Ä–º–∞ –¥–ª—è '{siz}' —Å —É—Å–ª–æ–≤–∏–µ–º '{condition_display}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{position}'"
                )

        return cleaned_data