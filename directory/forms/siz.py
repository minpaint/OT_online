from django import forms
from directory.models.siz import SIZ, SIZNorm
from directory.models.position import Position
from directory.forms.mixins import CrispyFormMixin
from dal import autocomplete


class SIZForm(CrispyFormMixin, forms.ModelForm):
    """
    üõ°Ô∏è –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–ò–ó
    """

    class Meta:
        model = SIZ
        fields = ('name', 'classification', 'unit', 'wear_period')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper.form_tag = True
        self.helper.form_method = 'post'


class SIZNormForm(CrispyFormMixin, forms.ModelForm):
    """
    üìã –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ –°–ò–ó
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    unique_position_name = forms.ChoiceField(
        label="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/–¥–æ–ª–∂–Ω–æ—Å—Ç—å (–æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)",
        required=True,
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏/–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
    )

    class Meta:
        model = SIZNorm
        fields = ('siz', 'quantity', 'condition', 'order')
        widgets = {
            'siz': autocomplete.ModelSelect2(url='directory:siz-autocomplete'),
        }

    def __init__(self, *args, **kwargs):
        position_id = kwargs.pop('position_id', None)
        super().__init__(*args, **kwargs)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ –ë–î
        unique_positions = Position.objects.values_list('position_name', flat=True).distinct().order_by('position_name')
        self.fields['unique_position_name'].choices = [('', '-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é/–¥–æ–ª–∂–Ω–æ—Å—Ç—å --')] + [(name, name) for
                                                                                                      name in
                                                                                                      unique_positions]

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ—Ä–º—ã
        if self.instance and self.instance.pk and self.instance.position:
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            self.fields['unique_position_name'].initial = self.instance.position.position_name

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–∞—Ö–æ–¥–∏–º –µ—ë –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if position_id:
            try:
                position = Position.objects.get(id=position_id)
                self.fields['unique_position_name'].initial = position.position_name
            except Position.DoesNotExist:
                pass

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—è condition (—Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π)
        conditions = SIZNorm.objects.exclude(condition='').values_list('condition', flat=True).distinct()
        if conditions:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            self.fields['condition'].widget.attrs['list'] = 'condition_datalist'
            self.fields['condition'].help_text += '<datalist id="condition_datalist">'
            for condition in set(conditions):
                self.fields['condition'].help_text += f'<option value="{condition}">'
            self.fields['condition'].help_text += '</datalist>'

        self.helper.form_tag = True
        self.helper.form_method = 'post'

    def clean(self):
        """
        ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ position-siz-condition
        """
        cleaned_data = super().clean()
        unique_position_name = cleaned_data.get('unique_position_name')
        siz = cleaned_data.get('siz')
        condition = cleaned_data.get('condition', '')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        if not unique_position_name:
            self.add_error('unique_position_name', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é/–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
            return cleaned_data

        # –í—ã–±–∏—Ä–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—É—é –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
        reference_position = Position.objects.filter(
            position_name=unique_position_name
        ).order_by('organization__full_name_ru').first()

        if not reference_position:
            self.add_error('unique_position_name', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º')
            return cleaned_data

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ä–º—ã
        if siz:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ position-siz-condition
            existing_norm = SIZNorm.objects.filter(
                position=reference_position,
                siz=siz,
                condition=condition
            )

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if self.instance and self.instance.pk:
                existing_norm = existing_norm.exclude(pk=self.instance.pk)

            if existing_norm.exists():
                condition_display = condition if condition else "–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã"
                raise forms.ValidationError(
                    f"–ù–æ—Ä–º–∞ –¥–ª—è '{siz}' —Å —É—Å–ª–æ–≤–∏–µ–º '{condition_display}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{unique_position_name}'"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ save()
        self.reference_position = reference_position
        return cleaned_data

    def save(self, commit=True):
        """
        üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º—ã –°–ò–ó —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        """
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ—Ä–º—ã
        self.instance.position = self.reference_position

        return super().save(commit)