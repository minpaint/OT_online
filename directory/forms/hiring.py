# directory/forms/hiring.py
from django import forms
from django.utils.translation import gettext_lazy as _
from django.utils import timezone  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö
from django.db import transaction  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ
from django.forms import formset_factory  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, Div, Submit, HTML, Row, Column, Field
from dal import autocomplete

from directory.models import (
    Employee,
    EmployeeHiring,
    Organization,
    Position,
    StructuralSubdivision,
    Department,
    GeneratedDocument  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ
)
from directory.models.medical_norm import MedicalExaminationNorm  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ clean


# from directory.utils.declension import decline_full_name # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ, –Ω–æ –≤ view
# from directory.forms.mixins import OrganizationRestrictionFormMixin # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. –ª–æ–≥–∏–∫–∞ –≤ __init__


class CombinedEmployeeHiringForm(forms.Form):
    """
    üë®‚Äçüíº –§–æ—Ä–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
    —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª–µ–π (–§–ò–û –∏ –í–∏–¥ –ø—Ä–∏–µ–º–∞ –ø–µ—Ä–≤—ã–º–∏)
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–º–∏ –∏–¥—É—Ç –§–ò–û –∏ –í–∏–¥ –ø—Ä–∏–µ–º–∞)
    full_name_nominative = forms.CharField(
        label=_("–§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)"),
        max_length=255,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
        })
    )

    hiring_type = forms.ChoiceField(
        label=_("–í–∏–¥ –ø—Ä–∏–µ–º–∞"),
        choices=EmployeeHiring.HIRING_TYPE_CHOICES,
        initial='new',
        required=True,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    organization = forms.ModelChoiceField(
        queryset=Organization.objects.all(),  # –ë–∞–∑–æ–≤—ã–π queryset, –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω –≤ __init__ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        label=_("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"),
        required=True,
        widget=autocomplete.ModelSelect2(
            url='directory:organization-autocomplete',
            attrs={
                'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...',
                'class': 'select2 form-control'
            }
        )
    )

    subdivision = forms.ModelChoiceField(
        queryset=StructuralSubdivision.objects.none(),  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π, –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ __init__
        label=_("–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"),
        required=False,
        widget=autocomplete.ModelSelect2(
            url='directory:subdivision-autocomplete',
            forward=['organization'],
            attrs={
                'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...',
                'class': 'select2 form-control'
            }
        )
    )

    department = forms.ModelChoiceField(
        queryset=Department.objects.none(),  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π, –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ __init__
        label=_("–û—Ç–¥–µ–ª"),
        required=False,
        widget=autocomplete.ModelSelect2(
            url='directory:department-autocomplete',
            forward=['subdivision', 'organization'],
            # –î–æ–±–∞–≤–∏–ª organization –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            attrs={
                'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                'class': 'select2 form-control'
            }
        )
    )

    position = forms.ModelChoiceField(
        queryset=Position.objects.all(),  # –ë–∞–∑–æ–≤—ã–π queryset
        label=_("–î–æ–ª–∂–Ω–æ—Å—Ç—å"),
        required=True,
        widget=autocomplete.ModelSelect2(
            url='directory:position-autocomplete',
            forward=['organization', 'subdivision', 'department'],
            attrs={
                'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...',
                'class': 'select2 form-control'
            }
        )
    )

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
    date_of_birth = forms.DateField(
        label=_("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"),
        required=False,
        widget=forms.DateInput(
            attrs={
                'type': 'date',
                'class': 'form-control'
            },
            format='%Y-%m-%d'  # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        )
    )

    place_of_residence = forms.CharField(
        label=_("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"),
        required=False,
        widget=forms.Textarea(
            attrs={
                'rows': 3,
                'class': 'form-control',
                'placeholder': '–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
            }
        )
    )

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –°–ò–ó (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
    height = forms.ChoiceField(
        label=_("–†–æ—Å—Ç"),
        choices=Employee.HEIGHT_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    clothing_size = forms.ChoiceField(
        label=_("–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã"),
        choices=Employee.CLOTHING_SIZE_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    shoe_size = forms.ChoiceField(
        label=_("–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏"),
        choices=Employee.SHOE_SIZE_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    # –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ (—Å–∫—Ä—ã—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    contract_type = forms.ChoiceField(
        label=_("–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞"),
        choices=Employee.CONTRACT_TYPE_CHOICES,
        initial='standard',
        required=False,  # –ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ standard, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
        widget=forms.HiddenInput()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–æ
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ crispy forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_id = 'hiring-form'
        self.helper.layout = Layout(
            Fieldset(
                _('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
                Row(
                    Column('full_name_nominative', css_class='col-md-8'),
                    Column('hiring_type', css_class='col-md-4'),
                ),
                css_class='form-section'
            ),
            Fieldset(
                _('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'),
                'organization',
                Row(
                    Column('subdivision', css_class='col-md-6'),
                    Column('department', css_class='col-md-6'),
                ),
                'position',
                css_class='form-section'
            ),
            Div(
                Fieldset(
                    _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞'),
                    Row(
                        Column('date_of_birth', css_class='col-md-6'),
                        Column('place_of_residence', css_class='col-md-6'),
                    ),
                ),
                css_class='form-section d-none',  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ
                id='medical-section'
            ),
            Div(
                Fieldset(
                    _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –°–ò–ó'),
                    Row(
                        Column('height', css_class='col-md-4'),
                        Column('clothing_size', css_class='col-md-4'),
                        Column('shoe_size', css_class='col-md-4'),
                    ),
                ),
                css_class='form-section d-none',  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ
                id='siz-section'
            ),
            'contract_type',  # –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            Div(
                Submit('submit', _('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'), css_class='btn-primary'),
                HTML(
                    '<a href="{% url "directory:hiring:hiring_list" %}" class="btn btn-secondary">{{ _("–û—Ç–º–µ–Ω–∞") }}</a>'),
                # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ–≥ Django, –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —à–∞–±–ª–æ–Ω–µ
                css_class='form-group text-right mt-3'  # –î–æ–±–∞–≤–∏–ª mt-3 –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            )
        )

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and hasattr(self.user, 'profile') and not self.user.is_superuser:
            user_orgs = self.user.profile.organizations.all()
            self.fields['organization'].queryset = user_orgs
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ initial –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            # –∏ –ø–æ–ª–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            if user_orgs.count() == 1 and not self.data.get('organization') and not self.initial.get('organization'):
                self.initial['organization'] = user_orgs.first().pk
        else:
            # –î–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            self.fields['organization'].queryset = Organization.objects.all()

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ queryset –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–ª–µ–π
        # –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ required=False –ø–æ–ª–µ–π.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.data –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Å–≤—è–∑–∞–Ω–∞ (POST), –∏–Ω–∞—á–µ self.initial (GET/–ø—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞).

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –û–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –æ–±—ä–µ–∫—Ç–æ–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å initial={ 'organization': org_obj }
        # –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π/—á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –∏–∑ self.data –∏–ª–∏ self.initial —á–∏—Å–ª–æ–≤–æ–≥–æ PK.
        organization_value = None
        if self.is_bound:  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ POST)
            organization_value = self.data.get('organization')
        elif self.initial:  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            organization_value = self.initial.get('organization')

        organization_pk = None
        if organization_value:
            if isinstance(organization_value, Organization):
                organization_pk = organization_value.pk
            else:
                try:
                    organization_pk = int(organization_value)
                except (ValueError, TypeError):
                    organization_pk = None

        if organization_pk:
            self.fields['subdivision'].queryset = StructuralSubdivision.objects.filter(organization_id=organization_pk)
            self.fields['department'].queryset = Department.objects.filter(
                organization_id=organization_pk)  # –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–¥–µ–ª–∞
            self.fields['position'].queryset = Position.objects.filter(organization_id=organization_pk)

            subdivision_value = None
            if self.is_bound:
                subdivision_value = self.data.get('subdivision')
            elif self.initial:
                subdivision_value = self.initial.get('subdivision')

            subdivision_pk = None
            if subdivision_value:
                if isinstance(subdivision_value, StructuralSubdivision):
                    subdivision_pk = subdivision_value.pk
                else:
                    try:
                        subdivision_pk = int(subdivision_value)
                    except(ValueError, TypeError):
                        subdivision_pk = None

            if subdivision_pk:
                # –£—Ç–æ—á–Ω—è–µ–º queryset –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤, –µ—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ
                self.fields['department'].queryset = Department.objects.filter(
                    subdivision_id=subdivision_pk,
                    organization_id=organization_pk  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                )
                self.fields['position'].queryset = Position.objects.filter(
                    subdivision_id=subdivision_pk,
                    organization_id=organization_pk
                )

                department_value = None
                if self.is_bound:
                    department_value = self.data.get('department')
                elif self.initial:
                    department_value = self.initial.get('department')

                department_pk = None
                if department_value:
                    if isinstance(department_value, Department):
                        department_pk = department_value.pk
                    else:
                        try:
                            department_pk = int(department_value)
                        except(ValueError, TypeError):
                            department_pk = None

                if department_pk:
                    self.fields['position'].queryset = Position.objects.filter(
                        department_id=department_pk,
                        subdivision_id=subdivision_pk,  # –í–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                        organization_id=organization_pk
                    )
                # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
                # (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤—ã—à–µ)
            else:
                # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞,
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—ã –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
                self.fields['department'].queryset = Department.objects.filter(
                    organization_id=organization_pk,
                    subdivision__isnull=True
                )
                # –ò –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ç–¥–µ–ª–∞
                self.fields['position'].queryset = Position.objects.filter(
                    organization_id=organization_pk,
                    subdivision__isnull=True,
                    department__isnull=True
                )
        else:
            # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—É—Å—Ç–æ–π queryset,
            # —Ç–∞–∫ –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ –∏–∑ —á–µ–≥–æ (—ç—Ç–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π).
            # –ù–æ –¥–ª—è position, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å Position.objects.all()
            # –∏–ª–∏ —Ç–æ–∂–µ .none(), –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
            # –¢–µ–∫—É—â–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—è position - queryset=Position.objects.all()
            pass

    def clean(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
        """
        cleaned_data = super().clean()
        position = cleaned_data.get('position')

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó
        if position:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–æ—Å–º–æ—Ç—Ä (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ is_disabled=False)
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É Position –µ—Å—Ç—å medical_factors (—á–µ—Ä–µ–∑ PositionMedicalFactor)
            # –∏ —á—Ç–æ —É HarmfulFactor –µ—Å—Ç—å is_disabled
            # –í –≤–∞—à–µ–º —Ñ–∞–π–ª–µ position.py –µ—Å—Ç—å medical_harmful_factors, –Ω–æ –Ω–µ—Ç is_disabled –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –Ω–∏—Ö.
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è is_disabled –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª–∏ PositionMedicalFactor,
            # –∏–ª–∏ —á—Ç–æ –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–∑ position.medical_harmful_factors.all() —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã, —Ç–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä –Ω—É–∂–µ–Ω.
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å is_disabled, –µ–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∑–¥–µ—Å—å.

            # needs_medical = position.medical_harmful_factors.exists() # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —É PositionMedicalFactor –µ—Å—Ç—å –ø–æ–ª–µ is_active –∏–ª–∏ is_disabled
            # needs_medical = position.positionmedicalfactor_set.filter(is_active=True).exists() # –ü—Ä–∏–º–µ—Ä

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ clean:
            needs_medical = False
            if hasattr(position, 'medical_factors') and hasattr(position.medical_factors,
                                                                'filter'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                needs_medical = position.medical_factors.filter(is_disabled=False).exists()

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞
            if not needs_medical:
                # from directory.models.medical_norm import MedicalExaminationNorm # –ò–º–ø–æ—Ä—Ç —É–∂–µ –µ—Å—Ç—å –≤–≤–µ—Ä—Ö—É
                needs_medical = MedicalExaminationNorm.objects.filter(
                    position_name=position.position_name  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ MedicalExaminationNorm –∏–º–µ–µ—Ç position_name
                ).exists()

            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ–¥–æ—Å–º–æ—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if needs_medical:
                date_of_birth = cleaned_data.get('date_of_birth')
                place_of_residence = cleaned_data.get('place_of_residence')

                if not date_of_birth:
                    self.add_error('date_of_birth', _('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞.'))

                if not place_of_residence:
                    self.add_error('place_of_residence', _('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞.'))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ò–ó
            needs_siz = False
            if hasattr(position, 'siz_norms') and hasattr(position.siz_norms, 'exists'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                needs_siz = position.siz_norms.exists()

            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó
            if not needs_siz:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ Position, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if hasattr(Position, 'find_reference_norms'):
                    needs_siz = Position.find_reference_norms(position.position_name).exists()
                else:  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç
                    # –¢—É—Ç –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                    pass

                    # –î–ª—è –°–ò–ó –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ,
            # –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ needs_siz=True, —Ç–æ —Ä–æ—Å—Ç/—Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å).

        return cleaned_data


class DocumentAttachmentForm(forms.Form):
    """
    üìé –§–æ—Ä–º–∞ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
    """
    documents = forms.ModelMultipleChoiceField(
        queryset=GeneratedDocument.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label=_("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è")
    )

    def __init__(self, *args, **kwargs):
        employee_id = kwargs.pop('employee_id', None)
        super().__init__(*args, **kwargs)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        if employee_id:
            self.fields['documents'].queryset = GeneratedDocument.objects.filter(
                employee_id=employee_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É GeneratedDocument –µ—Å—Ç—å ForeignKey –Ω–∞ Employee
            ).order_by('-created_at')

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.fields[
                'documents'].label_from_instance = self.label_from_instance_custom  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º

    @staticmethod
    def label_from_instance_custom(obj):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∫—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        if hasattr(obj, 'template') and obj.template and hasattr(obj.template, 'get_document_type_display'):
            type_name = obj.template.get_document_type_display()
            created_at_str = obj.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(obj,
                                                                                  'created_at') and obj.created_at else "N/A"
            return f"{type_name} ({created_at_str})"
        created_at_str_default = obj.created_at.strftime('%d.%m.%Y') if hasattr(obj,
                                                                                'created_at') and obj.created_at else "N/A"
        return f"–î–æ–∫—É–º–µ–Ω—Ç #{obj.id} ({created_at_str_default})"