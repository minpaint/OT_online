from django import forms
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit, Layout, Fieldset, Div, HTML, Button, Field, Row, Column
from dal import autocomplete

# –ú–∏–∫—Å–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from directory.forms.mixins import OrganizationRestrictionFormMixin

# –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ Employee
from directory.models.employee import Employee


class EmployeeHiringForm(OrganizationRestrictionFormMixin, forms.ModelForm):
    """
    üë• –§–æ—Ä–º–∞ –¥–ª—è –Ω–∞–π–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è django-autocomplete-light (DAL).
    –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Employee, –≤–∫–ª—é—á–∞—è –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —Ä–æ—Å—Ç –∏ —Ç.–¥.
    """

    class Meta:
        model = Employee
        fields = [
            'full_name_nominative',  # –§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π) üìù
            'date_of_birth',         # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è üìÖ
            'place_of_residence',    # –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è üè†
            'hire_date',             # –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ üìÖ
            'start_date',            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã üìÖ
            'contract_type',         # –í–∏–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ (–∑–∞–º–µ–Ω—è–µ—Ç is_contractor) üìÑ
            'organization',          # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è üè¢
            'subdivision',           # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ üè≠
            'department',            # –û—Ç–¥–µ–ª üìÇ
            'position',              # –î–æ–ª–∂–Ω–æ—Å—Ç—å üëî
            'height',                # –†–æ—Å—Ç üìè
            'clothing_size',         # –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã üëï
            'shoe_size',             # –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏ üëû
        ]
        widgets = {
            'contract_type': forms.Select(
                attrs={
                    'class': 'form-control',
                    'data-placeholder': 'üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–æ–≥–æ–≤–æ—Ä–∞...'
                }
            ),
            'hire_date': forms.DateInput(
                attrs={'type': 'date', 'class': 'form-control'},
                format='%Y-%m-%d'
            ),
            'start_date': forms.DateInput(
                attrs={'type': 'date', 'class': 'form-control'},
                format='%Y-%m-%d'
            ),
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={
                    'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...',
                    'class': 'select2 form-control',
                    'data-theme': 'bootstrap4',
                    'style': 'width: 100%; text-align: left;'
                }
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={
                    'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...',
                    'class': 'select2 form-control',
                    'data-theme': 'bootstrap4',
                    'style': 'width: 100%; text-align: left;'
                }
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={
                    'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                    'class': 'select2 form-control',
                    'data-theme': 'bootstrap4',
                    'style': 'width: 100%; text-align: left;'
                }
            ),
            'position': autocomplete.ModelSelect2(
                url='directory:position-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={
                    'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...',
                    'class': 'select2 form-control',
                    'data-theme': 'bootstrap4',
                    'style': 'width: 100%; text-align: left;'
                }
            ),
            'date_of_birth': forms.DateInput(
                attrs={'type': 'date', 'class': 'form-control'},
                format='%Y-%m-%d'
            ),
            'place_of_residence': forms.Textarea(
                attrs={
                    'class': 'form-control',
                    'rows': 3,
                    'placeholder': 'üè† –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è...'
                }
            ),
            'height': forms.Select(
                attrs={'class': 'form-control'}
            ),
            'clothing_size': forms.Select(
                attrs={'class': 'form-control'}
            ),
            'shoe_size': forms.Select(
                attrs={'class': 'form-control'}
            ),
        }

    def __init__(self, *args, **kwargs):
        # üîë –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.layout = Layout(
            Fieldset(
                _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É'),
                Row(
                    Column('hire_date', css_class='form-group col-md-6'),
                    Column('start_date', css_class='form-group col-md-6'),
                    css_class='form-row'
                ),
                Row(
                    Column('contract_type', css_class='form-group col-md-12'),
                    css_class='form-row'
                ),
                css_class='mb-3'
            ),
            Fieldset(
                _('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'),
                Row(
                    Column('organization', css_class='form-group col-md-12'),
                    css_class='form-row'
                ),
                Row(
                    Column('subdivision', css_class='form-group col-md-6'),
                    Column('department', css_class='form-group col-md-6'),
                    css_class='form-row'
                ),
                Row(
                    Column('position', css_class='form-group col-md-12'),
                    css_class='form-row'
                ),
                css_class='mb-3'
            ),
            Fieldset(
                _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ'),
                Row(
                    Column('full_name_nominative', css_class='form-group col-md-12'),
                    css_class='form-row'
                ),
                Row(
                    Column('date_of_birth', css_class='form-group col-md-6'),
                    css_class='form-row'
                ),
                'place_of_residence',
                css_class='mb-3'
            ),
            Fieldset(
                _('–†–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–ø–µ—Ü–æ–¥–µ–∂–¥—ã'),
                Row(
                    Column('height', css_class='form-group col-md-4'),
                    Column('clothing_size', css_class='form-group col-md-4'),
                    Column('shoe_size', css_class='form-group col-md-4'),
                    css_class='form-row'
                ),
                css_class='mb-3'
            ),
            Div(
                Submit('submit', 'üíæ –ü—Ä–∏–Ω—è—Ç—å', css_class='btn-primary'),
                Button('preview', 'üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', css_class='btn-info', type='submit'),
                HTML('<a href="{% url \"directory:home\" %}" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>'),
                css_class='d-flex justify-content-between mt-3'
            )
        )

        # üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.user and hasattr(self.user, 'profile'):
            user_orgs = self.user.profile.organizations.all()
            if user_orgs.count() == 1:
                self.initial['organization'] = user_orgs.first().id

        # –î–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not self.initial.get('hire_date'):
            self.initial['hire_date'] = timezone.now().date()
        if not self.initial.get('start_date'):
            self.initial['start_date'] = timezone.now().date()

        # –ó–Ω–∞—á–µ–Ω–∏–µ contract_type –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not self.initial.get('contract_type'):
            self.initial['contract_type'] = 'standard'

        # –°—Ç–∏–ª–∏ –¥–ª—è Select2
        for field_name in ['organization', 'subdivision', 'department', 'position']:
            if field_name in self.fields:
                self.fields[field_name].widget.attrs.update({
                    'class': 'select2 form-control',
                    'style': 'width: 100%; text-align: left;'
                })

    def clean(self):
        cleaned_data = super().clean()
        hire_date = cleaned_data.get('hire_date')
        start_date = cleaned_data.get('start_date')
        if hire_date and start_date and start_date < hire_date:
            self.add_error('start_date', _("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø—Ä–∏–µ–º–∞"))
        return cleaned_data
