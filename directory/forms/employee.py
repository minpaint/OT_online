# directory/forms/employee.py
"""
üë§ –§–æ—Ä–º–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–¥–µ–ª–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏,
–ø—Ä–∏ —ç—Ç–æ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. üöÄ
"""

from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from dal import autocomplete
from directory.models import Employee, StructuralSubdivision, Department, Position
from .mixins import OrganizationRestrictionFormMixin  # –ò–º–ø–æ—Ä—Ç –º–∏–∫—Å–∏–Ω–∞ üöÄ


class EmployeeForm(OrganizationRestrictionFormMixin, forms.ModelForm):
    class Meta:
        model = Employee
        fields = [
            "full_name_nominative", "full_name_dative",
            "date_of_birth", "place_of_residence",
            "organization", "subdivision", "department", "position",
            "height", "clothing_size", "shoe_size",
            "is_contractor"
        ]
        widgets = {
            "organization": autocomplete.ModelSelect2(
                url="directory:organization-autocomplete",
                attrs={
                    "data-placeholder": "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...",
                    "class": "select2-basic"
                }
            ),
            "subdivision": autocomplete.ModelSelect2(
                url="directory:subdivision-autocomplete",
                forward=["organization"],
                attrs={
                    "data-placeholder": "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
                    "class": "select2-basic"
                }
            ),
            "department": autocomplete.ModelSelect2(
                url="directory:department-autocomplete",
                forward=["subdivision"],
                attrs={
                    "data-placeholder": "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...",
                    "class": "select2-basic"
                }
            ),
            "position": autocomplete.ModelSelect2(
                url="directory:position-autocomplete",
                forward=["organization", "subdivision", "department"],
                attrs={
                    "data-placeholder": "üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
                    "class": "select2-basic"
                }
            ),
            "date_of_birth": forms.DateInput(
                attrs={"type": "date"},
                format="%Y-%m-%d"
            ),
        }

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop("user", None)
        super().__init__(*args, **kwargs)

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ crispy-forms
        self.helper = FormHelper()
        self.helper.form_method = "post"
        self.helper.add_input(Submit("submit", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))

        # –î–µ–ª–∞–º –ø–æ–ª—è subdivision –∏ department –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ üîß
        self.fields["subdivision"].required = False
        self.fields["department"].required = False

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üîí
        if self.user and hasattr(self.user, "profile"):
            user_orgs = self.user.profile.organizations.all()
            self.fields["organization"].queryset = user_orgs

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äì —Å—Ç–∞–≤–∏–º –µ—ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if user_orgs.count() == 1:
                org = user_orgs.first()
                self.initial["organization"] = org.id
                self.fields["subdivision"].queryset = StructuralSubdivision.objects.filter(organization=org)
            else:
                self.fields["subdivision"].queryset = StructuralSubdivision.objects.none()

            # –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–ª—è
            self.fields["department"].queryset = Department.objects.none()
            self.fields["position"].queryset = Position.objects.none()

    def clean(self):
        """
        üõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:
        - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.
        - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª ‚Äì –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ department.
        """
        cleaned_data = super().clean()
        organization = cleaned_data.get("organization")
        subdivision = cleaned_data.get("subdivision")
        department = cleaned_data.get("department")

        if subdivision and not organization:
            cleaned_data["organization"] = subdivision.organization

        if subdivision and not department:
            cleaned_data["department"] = None

        return cleaned_data
