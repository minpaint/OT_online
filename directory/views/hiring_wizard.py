# directory/views/hiring_wizard.py
"""
üë®‚Äçüíº –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FormWizard –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–≥–æ–≤
"""
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.shortcuts import redirect
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.db import transaction
from django.utils import timezone  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç timezone

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º—Ç—É–ª—Å
from formtools.wizard.views import SessionWizardView

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ñ–æ—Ä–º
from directory.forms.hiring_wizard import Step1BasicInfoForm, Step2MedicalInfoForm, Step3SIZInfoForm

# –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from directory.models.employee import Employee
from directory.models.hiring import EmployeeHiring
from directory.models.position import Position
from directory.models.medical_norm import MedicalExaminationNorm
from directory.utils.declension import decline_full_name

class HiringWizardView(LoginRequiredMixin, SessionWizardView):
    """–ú–∞—Å—Ç–µ—Ä —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    template_name = 'directory/hiring/wizard_form.html'
    form_list = [
        ('basic_info', Step1BasicInfoForm),
        ('medical_info', Step2MedicalInfoForm),
        ('siz_info', Step3SIZInfoForm)
    ]

    def get_form_kwargs(self, step=None):
        """–ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º—É"""
        kwargs = super().get_form_kwargs(step)
        if step == 'basic_info':
            kwargs['user'] = self.request.user
        return kwargs

    def get_form_initial(self, step):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"""
        initial = super().get_form_initial(step)

        # –î–ª—è —à–∞–≥–∞ 1 - –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if step == 'basic_info':
            initial['hiring_type'] = 'new'

        return initial

    def get_context_data(self, form, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        context = super().get_context_data(form, **kwargs)

        # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
        current_step = self.steps.current
        context['title'] = _('–ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É: –®–∞–≥ {0}').format(
            list(self.get_form_list()).index(current_step) + 1
        )

        # –î–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞—Ö –°–ò–ó
        if current_step == 'siz_info':
            basic_data = self.get_cleaned_data_for_step('basic_info')
            if basic_data and 'position' in basic_data:
                position = basic_data['position']
                context['siz_norms'] = self._get_siz_norms(position)

        return context

    def process_step(self, form):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"""
        step_data = super().process_step(form)
        step = self.steps.current

        # –î–ª—è —à–∞–≥–∞ basic_info –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó
        if step == 'basic_info':
            position = form.cleaned_data.get('position')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.storage.extra_data['needs_medical'] = self._position_needs_medical(position)
            self.storage.extra_data['needs_siz'] = self._position_needs_siz(position)

        return step_data

    def get_form_step_files(self, form):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –±—É–¥—É—Ç –Ω—É–∂–Ω—ã)"""
        return super().get_form_step_files(form)

    def get_next_step(self, step=None):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"""
        if step is None:
            step = self.steps.current

        next_step = super().get_next_step(step)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ - basic_info, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø. —à–∞–≥–∏
        if step == 'basic_info':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            cleaned_data = self.get_cleaned_data_for_step(step)
            if cleaned_data:
                position = cleaned_data.get('position')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –¥–ª—è —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                self.storage.extra_data['needs_medical'] = self._position_needs_medical(position)
                self.storage.extra_data['needs_siz'] = self._position_needs_siz(position)

                needs_medical = self.storage.extra_data.get('needs_medical', False)
                needs_siz = self.storage.extra_data.get('needs_siz', False)

                if not needs_medical:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ medical_info
                    if next_step == 'medical_info':
                        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —à–∞–≥ –°–ò–ó, –∏–¥–µ–º –∫ –Ω–µ–º—É
                        if needs_siz:
                            return 'siz_info'
                        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
                        return None

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ - medical_info, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —à–∞–≥ –°–ò–ó
        elif step == 'medical_info':
            needs_siz = self.storage.extra_data.get('needs_siz', False)
            if not needs_siz:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ siz_info
                return None

        return next_step

    def done(self, form_list, **kwargs):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —Ñ–æ—Ä–º"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —à–∞–≥–æ–≤
        all_data = {}
        for form in form_list:
            all_data.update(form.cleaned_data)

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try:
            with transaction.atomic():
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ Employee
                employee_data = {
                    'full_name_nominative': all_data['full_name_nominative'],
                    'full_name_dative': decline_full_name(all_data['full_name_nominative'], 'datv'),
                    'organization': all_data['organization'],
                    'subdivision': all_data.get('subdivision'),
                    'department': all_data.get('department'),
                    'position': all_data['position'],
                    'status': 'active',
                    'hire_date': timezone.now().date(),
                    'start_date': timezone.now().date(),
                    'contract_type': 'standard',
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–≥–∞ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if 'date_of_birth' in all_data:
                    employee_data['date_of_birth'] = all_data['date_of_birth']
                    employee_data['place_of_residence'] = all_data['place_of_residence']

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–≥–∞ –°–ò–ó, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if 'height' in all_data:
                    employee_data['height'] = all_data['height']
                    employee_data['clothing_size'] = all_data['clothing_size']
                    employee_data['shoe_size'] = all_data['shoe_size']

                # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee = Employee.objects.create(**employee_data)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ
                hiring = EmployeeHiring.objects.create(
                    employee=employee,
                    hiring_date=timezone.now().date(),
                    start_date=timezone.now().date(),
                    hiring_type=all_data['hiring_type'],
                    organization=all_data['organization'],
                    subdivision=all_data.get('subdivision'),
                    department=all_data.get('department'),
                    position=all_data['position'],
                    created_by=self.request.user,
                )

                messages.success(
                    self.request,
                    _('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {0} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É').format(employee.full_name_nominative)
                )

                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
                return redirect('directory:hiring:hiring_detail', pk=hiring.pk)

        except Exception as e:
            messages.error(
                self.request,
                _('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ: {0}').format(str(e))
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥
            return redirect('directory:hiring:hiring_wizard')

    def _position_needs_medical(self, position):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if not position:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        has_custom_medical = position.medical_factors.filter(is_disabled=False).exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        if not has_custom_medical:
            has_reference_medical = MedicalExaminationNorm.objects.filter(
                position_name=position.position_name
            ).exists()
            return has_reference_medical

        return has_custom_medical

    def _position_needs_siz(self, position):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω—ã –ª–∏ –°–ò–ó –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if not position:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        has_custom_siz = position.siz_norms.exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        if not has_custom_siz:
            has_reference_siz = Position.find_reference_norms(position.position_name).exists()
            return has_reference_siz

        return has_custom_siz

    def _get_siz_norms(self, position):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not position:
            return []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        custom_norms = position.siz_norms.select_related('siz').all()
        if custom_norms.exists():
            return custom_norms

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã
        reference_norms = Position.find_reference_norms(position.position_name)
        return reference_norms