from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.views.generic import FormView, View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.db import transaction
from django.utils import timezone
from django.http import JsonResponse

from directory.models import (
    Employee,
    EmployeeHiring,
    Organization,
    Position,
    StructuralSubdivision,
    Department
)
from directory.forms.hiring import CombinedEmployeeHiringForm
from directory.utils.declension import decline_full_name
from directory.models.medical_norm import MedicalExaminationNorm


class SimpleHiringView(LoginRequiredMixin, FormView):
    """
    üßô‚Äç‚ôÇÔ∏è –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–æ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.
    –í—Å–µ –ø–æ–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
    """
    template_name = 'directory/hiring/simple_form.html'
    form_class = CombinedEmployeeHiringForm
    success_url = reverse_lazy('directory:hiring:hiring_list')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É: –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫')

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        if self.request.user and hasattr(self.request.user, 'profile'):
            context['organizations'] = self.request.user.profile.organizations.all()
        else:
            context['organizations'] = Organization.objects.all()

        return context

    @transaction.atomic
    def form_valid(self, form):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            data = form.cleaned_data

            # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee = Employee(
                full_name_nominative=data['full_name_nominative'],
                date_of_birth=data.get('date_of_birth'),
                place_of_residence=data.get('place_of_residence'),
                organization=data['organization'],
                subdivision=data.get('subdivision'),
                department=data.get('department'),
                position=data['position'],
                height=data.get('height'),
                clothing_size=data.get('clothing_size'),
                shoe_size=data.get('shoe_size'),
                hire_date=timezone.now().date(),
                start_date=timezone.now().date(),
                contract_type=data.get('contract_type', 'standard'),
                status='active'
            )
            employee.save()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ
            hiring = EmployeeHiring(
                employee=employee,
                hiring_date=timezone.now().date(),
                start_date=timezone.now().date(),
                hiring_type=data['hiring_type'],
                organization=data['organization'],
                subdivision=data.get('subdivision'),
                department=data.get('department'),
                position=data['position'],
                created_by=self.request.user
            )
            hiring.save()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            messages.success(
                self.request,
                _('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É').format(employee.full_name_nominative)
            )

            # –ò–∑–º–µ–Ω—è–µ–º URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
            self.success_url = reverse('directory:hiring:hiring_detail', kwargs={'pk': hiring.pk})

            return super().form_valid(form)

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")

            messages.error(
                self.request,
                _('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {}').format(str(e))
            )

            return self.form_invalid(form)


@login_required
def position_requirements_api(request, position_id):
    """
    üîç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –∏ –°–ò–ó –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π.

    Args:
        request: HttpRequest
        position_id: ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ 404
        position = get_object_or_404(Position, pk=position_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞
        has_custom_medical = position.medical_factors.filter(is_disabled=False).exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        has_reference_medical = False
        if not has_custom_medical:
            has_reference_medical = MedicalExaminationNorm.objects.filter(
                position_name=position.position_name
            ).exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –°–ò–ó
        has_custom_siz = position.siz_norms.exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        has_reference_siz = False
        if not has_custom_siz:
            has_reference_siz = Position.find_reference_norms(position.position_name).exists()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'position_id': position.id,
            'position_name': position.position_name,
            'needs_medical': has_custom_medical or has_reference_medical,
            'needs_siz': has_custom_siz or has_reference_siz,
            'status': 'success'
        }

        return JsonResponse(response_data)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ position_requirements_api –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ ID={position_id}: {str(e)}")

        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)