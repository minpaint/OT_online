# directory/views/documents/selection.py
"""
üîç –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
"""
import json
import logging
from django.views.generic import FormView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect, render
from django.contrib import messages
from django.utils.translation import gettext as _

from directory.models import Employee
from directory.models.document_template import DocumentTemplate
from directory.forms.document_forms import DocumentSelectionForm
from directory.utils.docx_generator import (
    generate_all_orders, generate_knowledge_protocol,
    generate_familiarization_document, generate_siz_card,
    generate_personal_ot_card, generate_journal_example
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_auto_selected_document_types(employee):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    –ü—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞:
    1. –ï—Å–ª–∏ —Å—Ä–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ > 0 –∏ –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ–¥—Ä—è–¥–∞: –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ + –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π
    2. –ï—Å–ª–∏ —Å—Ä–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ > 0 –∏ –µ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞: —Ç–æ–ª—å–∫–æ –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π
    3. –ï—Å–ª–∏ —É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è
    4. –ï—Å–ª–∏ —É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –Ω–æ—Ä–º—ã –°–ò–ó: –ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó

    Args:
        employee (Employee): –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    document_types = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if not employee.position:
        logger.warning(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        return document_types

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞
    internship_period = getattr(employee.position, 'internship_period_days', 0)
    is_contractor = getattr(employee, 'is_contractor', False)

    if internship_period > 0:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ
        if not is_contractor:
            document_types.append('all_orders')

        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π
        document_types.append('knowledge_protocol')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    has_documents = False
    if hasattr(employee.position, 'documents') and employee.position.documents.exists():
        has_documents = True
        document_types.append('doc_familiarization')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ—Ä–º –°–ò–ó
    has_siz_norms = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó
    from directory.models.siz import SIZNorm
    if SIZNorm.objects.filter(position=employee.position).exists():
        has_siz_norms = True

    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—Ä–º—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    # if hasattr(employee.position, 'siz_items') and employee.position.siz_items.exists():
    #     has_siz_norms = True

    if has_siz_norms:
        document_types.append('siz_card')

    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {employee.full_name_nominative}: {document_types}")

    return document_types


class DocumentSelectionView(LoginRequiredMixin, FormView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    template_name = 'directory/documents/document_selection.html'
    form_class = DocumentSelectionForm

    def get_initial(self):
        initial = super().get_initial()
        employee_id = self.kwargs.get('employee_id')

        if employee_id:
            initial['employee_id'] = employee_id

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                employee = Employee.objects.get(id=employee_id)

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                document_types = get_auto_selected_document_types(employee)
                initial['document_types'] = document_types

            except Employee.DoesNotExist:
                logger.error(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return initial

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        employee_id = self.kwargs.get('employee_id')

        if employee_id:
            try:
                employee = Employee.objects.get(id=employee_id)
                context['employee'] = employee

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
                context['internship_period'] = getattr(employee.position, 'internship_period_days',
                                                       0) if employee.position else 0
                context['is_contractor'] = getattr(employee, 'is_contractor', False)
                context['has_documents'] = hasattr(employee.position,
                                                   'documents') and employee.position.documents.exists() if employee.position else False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ—Ä–º –°–ò–ó
                from directory.models.siz import SIZNorm
                context['has_siz_norms'] = SIZNorm.objects.filter(
                    position=employee.position).exists() if employee.position else False

            except Employee.DoesNotExist:
                logger.error(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        context['title'] = _('–í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
        return context

    def form_valid(self, form):
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        employee_id = form.cleaned_data.get('employee_id')
        document_types = form.cleaned_data.get('document_types', [])

        if not employee_id:
            messages.error(self.request, _("–ù–µ —É–∫–∞–∑–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"))
            return self.form_invalid(form)

        if not document_types:
            messages.error(self.request, _("–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"))
            return self.form_invalid(form)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        try:
            employee = Employee.objects.get(id=employee_id)
        except Employee.DoesNotExist:
            messages.error(self.request, _("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            return self.form_invalid(form)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        generated_documents = []

        for doc_type in document_types:
            generated_doc = self._generate_document(doc_type, employee)
            if generated_doc:
                generated_documents.append(generated_doc)

        # –ï—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        if generated_documents:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–∏–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if len(generated_documents) == 1:
                messages.success(self.request, _("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"))
                return redirect('directory:documents:document_detail', pk=generated_documents[0].id)
            else:
                # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                messages.success(self.request, _("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"))
                return redirect('directory:documents:document_list')
        else:
            messages.error(self.request, _("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"))
            return self.form_invalid(form)

    def _generate_document(self, doc_type, employee):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ {doc_type} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")

        if doc_type == 'all_orders':
            return generate_all_orders(employee, self.request.user)
        elif doc_type == 'knowledge_protocol':
            return generate_knowledge_protocol(employee, self.request.user)
        elif doc_type == 'doc_familiarization':
            return generate_familiarization_document(employee, user=self.request.user)
        elif doc_type == 'siz_card':
            return generate_siz_card(employee, self.request.user)
        elif doc_type == 'personal_ot_card':
            return generate_personal_ot_card(employee, self.request.user)
        elif doc_type == 'journal_example':
            return generate_journal_example(employee, self.request.user)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")
            return None