"""
üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.
"""
import logging
from directory.utils.declension import get_initials_from_name, decline_full_name, decline_phrase
from directory.models import Employee

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_internship_leader(employee):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –ò—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º can_be_internship_leader=True.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (leader, level, success)
        –≥–¥–µ level: "department", "subdivision", "organization"
    """
    logger.info(f"–ü–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    if not employee.position:
        logger.warning(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        return None, None, False

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏ –æ—Ç–¥–µ–ª–µ
    logger.info(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {employee.subdivision.name if employee.subdivision else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
    logger.info(f"–û—Ç–¥–µ–ª: {employee.department.name if employee.department else '–ù–µ —É–∫–∞–∑–∞–Ω'}")

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Ç–¥–µ–ª–µ
    if employee.department:
        leaders_in_dept = list(employee.department.employees.filter(
            position__can_be_internship_leader=True
        ).exclude(id=employee.id))  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(leaders_in_dept)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª–µ")

        if leaders_in_dept:
            leader = leaders_in_dept[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª–µ: {leader.full_name_nominative}")
            return leader, "department", True

    # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    if employee.subdivision:
        leaders_in_subdiv = list(Employee.objects.filter(
            subdivision=employee.subdivision,
            position__can_be_internship_leader=True,
        ).exclude(id=employee.id))  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(leaders_in_subdiv)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏")

        if leaders_in_subdiv:
            leader = leaders_in_subdiv[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏: {leader.full_name_nominative}")
            return leader, "subdivision", True

    # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if employee.organization:
        leaders_in_org = list(Employee.objects.filter(
            organization=employee.organization,
            position__can_be_internship_leader=True,
        ).exclude(id=employee.id))  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(leaders_in_org)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")

        if leaders_in_org:
            leader = leaders_in_org[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {leader.full_name_nominative}")
            return leader, "organization", True

    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.warning(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è {employee.full_name_nominative} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None, None, False


def get_document_signer(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏.
    –ò—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º can_sign_orders=True.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (signer, level, success)
        –≥–¥–µ level: "department", "subdivision", "organization"
    """
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Ç–¥–µ–ª–µ
    if employee.department:
        signer = employee.department.employees.filter(
            position__can_sign_orders=True
        ).first()
        if signer:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω—Ç –≤ –æ—Ç–¥–µ–ª–µ: {signer.full_name_nominative}")
            return signer, "department", True

    # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    if employee.subdivision:
        signer = Employee.objects.filter(
            subdivision=employee.subdivision,
            position__can_sign_orders=True,
        ).first()
        if signer:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω—Ç –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏: {signer.full_name_nominative}")
            return signer, "subdivision", True

    # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if employee.organization:
        signer = Employee.objects.filter(
            organization=employee.organization,
            position__can_sign_orders=True,
        ).first()
        if signer:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {signer.full_name_nominative}")
            return signer, "organization", True

    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞—à–ª–∏
    logger.warning(f"–ü–æ–¥–ø–∏—Å–∞–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {employee.full_name_nominative} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None, None, False


def get_internship_leader_position(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    –î–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (position_name, success)
    """
    leader, _, success = get_internship_leader(employee)
    if success and leader and leader.position:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞)
        position_name = leader.position.position_name
        if position_name:
            position_name = position_name[0].lower() + position_name[1:]
        return position_name, True

    return None, False


def get_internship_leader_name(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (name, success)
    """
    leader, _, success = get_internship_leader(employee)
    if success and leader:
        return leader.full_name_nominative, True

    return None, False


def get_internship_leader_initials(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (initials, success)
    """
    leader, _, success = get_internship_leader(employee)
    if success and leader:
        return get_initials_from_name(leader.full_name_nominative), True

    return None, False

# --- –ù–æ–≤—ã–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_commission_member(employee):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "–ò–≤–∞–Ω–æ–≤ –ò.–ò., –¥–∏—Ä–µ–∫—Ç–æ—Ä"
    """
    from directory.utils.declension import get_initials_from_name
    from directory.models import Employee # Ensure Employee is available if not globally imported

    if not isinstance(employee, Employee):
        logger.error(f"Invalid type passed to format_commission_member: {type(employee)}")
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞" # Or handle appropriately

    position_name = ""
    if employee.position:
        position_name = employee.position.position_name.lower()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
    # Ensure full_name_nominative exists and is a string
    name_initials = ""
    if hasattr(employee, 'full_name_nominative') and isinstance(employee.full_name_nominative, str):
         name_initials = get_initials_from_name(employee.full_name_nominative)
    else:
         logger.warning(f"Employee {employee.id} has no full_name_nominative or it's not a string.")


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–ò–≤–∞–Ω–æ–≤ –ò.–ò., –¥–∏—Ä–µ–∫—Ç–æ—Ä"
    return f"{name_initials}, {position_name}" if position_name else name_initials

def default_commission():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –≤ get_commission_members)
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    return {
        'chairman': "–ò–≤–∞–Ω–æ–≤ –ò.–ò., –¥–∏—Ä–µ–∫—Ç–æ—Ä",
        'members': ["–ü–µ—Ç—Ä–æ–≤ –ü.–ü., –∑–∞–º. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", "–°–∏–¥–æ—Ä–æ–≤ –°.–°., –∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –û–¢"],
        'secretary': "–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ö.–ö., —Å–µ–∫—Ä–µ—Ç–∞—Ä—å"
    }

def get_commission_members(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.
    –ü–æ–∏—Å–∫ –í–°–ï–• —Ä–æ–ª–µ–π (chairman, member, secretary) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å commission_role.
    (–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç–∞–∫–∏—Ö —Ä–æ–ª–µ–π
    –∏–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã)

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (members_list, success) - members_list —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π,
               success=True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å, —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –∏ —Ö–æ—Ç—è –±—ã 1 —á–ª–µ–Ω.
    """
    from directory.models import Employee # Ensure Employee is available
    import logging # Ensure logging is available

    logger = logging.getLogger(__name__) # Ensure logger is initialized

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    if not employee.organization:
        logger.warning(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.pk} ({employee.full_name_nominative}) –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
        return [], False

    organization = employee.organization
    commission = {
        'chairman': None,
        'members': [],
        'secretary': None
    }
    chairman_found_obj = None
    members_found_objs = []
    secretary_found_obj = None
    # Get organization name safely for logging, falling back to ID
    organization_name_for_log = getattr(organization, 'name', None) # Use getattr for safety
    if organization_name_for_log is None and hasattr(organization, 'full_name'): # Check for full_name if name is missing
         organization_name_for_log = getattr(organization, 'full_name', str(organization.id))
    elif organization_name_for_log is None: # Fallback to ID if neither name nor full_name exists
         organization_name_for_log = str(organization.id)


    # 1. –ò—â–µ–º –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–∏ –í–û –í–°–ï–ô –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
    try:
        chairman_found_obj = Employee.objects.filter(
            organization=organization,
            position__commission_role='chairman' # Removed is_active=True
        ).select_related('position').first()
        if chairman_found_obj:
            commission['chairman'] = format_commission_member(chairman_found_obj)
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {commission['chairman']}")
        else:
             logger.warning(f"–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}")
    except Exception as e:
        # Log the error with traceback
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}: {e}", exc_info=True)


    # 2. –ò—â–µ–º —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ –í–û –í–°–ï–ô –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
    try:
        members_found_objs = list(Employee.objects.filter(
            organization=organization,
            position__commission_role='member' # Removed is_active=True
        ).select_related('position'))
        commission['members'] = [format_commission_member(m) for m in members_found_objs]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {len(commission['members'])}")
        if not commission['members']:
            logger.warning(f"–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}: {e}", exc_info=True)


    # 3. –ò—â–µ–º —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∫–æ–º–∏—Å—Å–∏–∏ –í–û –í–°–ï–ô –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
    try:
        secretary_found_obj = Employee.objects.filter(
            organization=organization,
            position__commission_role='secretary' # Removed is_active=True
        ).select_related('position').first()
        if secretary_found_obj:
            commission['secretary'] = format_commission_member(secretary_found_obj)
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {commission['secretary']}")
        else:
             logger.warning(f"–°–µ–∫—Ä–µ—Ç–∞—Ä—å –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∫–æ–º–∏—Å—Å–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}: {e}", exc_info=True)


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–æ—Å—Ç–∞–≤
    success = (
        commission['chairman'] is not None and
        len(commission['members']) >= 1 and
        commission['secretary'] is not None
    )

    if not success:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è {employee.full_name_nominative} –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name_for_log}. "
            f"–ù–∞–π–¥–µ–Ω–æ: –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å={'–î–∞' if commission['chairman'] else '–ù–µ—Ç'}, "
            f"—á–ª–µ–Ω–æ–≤={len(commission['members'])}, "
            f"—Å–µ–∫—Ä–µ—Ç–∞—Ä—å={'–î–∞' if commission['secretary'] else '–ù–µ—Ç'}"
        )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è get_commission_formatted
    result = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
    if chairman_found_obj:
        result.append({
            "role": "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏",
            "name": commission['chairman'], # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            "employee_obj": chairman_found_obj
        })

    # –î–æ–±–∞–≤–ª—è–µ–º —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    for idx, member_str in enumerate(commission['members']):
         if idx < len(members_found_objs): # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞—Å—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
            member_obj = members_found_objs[idx] # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Employee
            result.append({
                "role": "–ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏",
                "name": member_str, # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
                "employee_obj": member_obj
            })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–∞—Ä—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
    if secretary_found_obj:
        result.append({
            "role": "–°–µ–∫—Ä–µ—Ç–∞—Ä—å –∫–æ–º–∏—Å—Å–∏–∏",
            "name": commission['secretary'], # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            "employee_obj": secretary_found_obj
        })

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∏ —Ñ–ª–∞–≥ —É—Å–ø–µ—Ö–∞ (–ø–æ–ª–Ω—ã–π –ª–∏ —Å–æ—Å—Ç–∞–≤)
    return result, success

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ ---

def get_employee_documents(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –¥–æ–ª–∂–µ–Ω –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        tuple: (documents_list, success)
    """
    # –ï—Å–ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    if employee.position and hasattr(employee.position, 'documents'):
        documents = employee.position.documents.all()
        if documents.exists():
            documents_list = [doc.name for doc in documents]
            return documents_list, True

    # –ù–µ –Ω–∞–π–¥–µ–Ω–æ
    logger.warning(f"–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è")
    return None, False


def prepare_internship_context(employee, context=None):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ,
    –≤–∫–ª—é—á–∞—è —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
    Returns:
        dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ
    """
    if context is None:
        context = {}

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    leader, level, success = get_internship_leader(employee)

    if success and leader:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∏–º—è –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        leader_position = leader.position.position_name if leader.position else ""
        leader_name = leader.full_name_nominative

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        if leader_position:
            leader_position = leader_position[0].lower() + leader_position[1:]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        leader_name_initials = get_initials_from_name(leader_name)

        # –°–∫–ª–æ–Ω—è–µ–º –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π (nomn) - —É–∂–µ –µ—Å—Ç—å
        # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (gent)
        leader_position_genitive = decline_phrase(leader_position, 'gent') if leader_position else ""
        leader_name_genitive = decline_full_name(leader_name, 'gent')

        # –î–∞—Ç–µ–ª—å–Ω—ã–π (datv)
        leader_position_dative = decline_phrase(leader_position, 'datv') if leader_position else ""
        leader_name_dative = decline_full_name(leader_name, 'datv')

        # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π (accs)
        leader_position_accusative = decline_phrase(leader_position, 'accs') if leader_position else ""
        leader_name_accusative = decline_full_name(leader_name, 'accs')

        # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (ablt)
        leader_position_instrumental = decline_phrase(leader_position, 'ablt') if leader_position else ""
        leader_name_instrumental = decline_full_name(leader_name, 'ablt')

        # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π (loct)
        leader_position_prepositional = decline_phrase(leader_position, 'loct') if leader_position else ""
        leader_name_prepositional = decline_full_name(leader_name, 'loct')

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ —Å–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        context.update({
            # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫—Ç–æ? —á—Ç–æ?)
            'head_of_internship_position': leader_position,
            'head_of_internship_name': leader_name,
            'head_of_internship_name_initials': leader_name_initials,

            # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–≥–æ? —á–µ–≥–æ?)
            'head_of_internship_position_genitive': leader_position_genitive,
            'head_of_internship_name_genitive': leader_name_genitive,

            # –î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–º—É? —á–µ–º—É?)
            'head_of_internship_position_dative': leader_position_dative,
            'head_of_internship_name_dative': leader_name_dative,

            # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–≥–æ? —á—Ç–æ?)
            'head_of_internship_position_accusative': leader_position_accusative,
            'head_of_internship_name_accusative': leader_name_accusative,

            # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–µ–º? —á–µ–º?)
            'head_of_internship_position_instrumental': leader_position_instrumental,
            'head_of_internship_name_instrumental': leader_name_instrumental,

            # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ (–æ –∫–æ–º? –æ —á—ë–º?)
            'head_of_internship_position_prepositional': leader_position_prepositional,
            'head_of_internship_name_prepositional': leader_name_prepositional,

            # –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'internship_leader_level': level,
        })

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–∏
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö –¥–ª—è {employee.full_name_nominative}")
    else:
        # –î–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–ª—É—à–µ–∫,
        # –∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
        logger.error(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")
        # –ú—ã –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ

    return context


def prepare_director_context(employee, context=None):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞),
    –≤–∫–ª—é—á–∞—è —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ Employee
        context: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–µ
    """
    if context is None:
        context = {}

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–µ
    signer, level, success = get_document_signer(employee)

    if success and signer:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∏–º—è
        signer_position = signer.position.position_name if signer.position else ""
        signer_name = signer.full_name_nominative

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        signer_name_initials = get_initials_from_name(signer_name)

        # –°–∫–ª–æ–Ω—è–µ–º –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö
        # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π (nomn) - —É–∂–µ –µ—Å—Ç—å
        # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (gent)
        signer_position_genitive = decline_phrase(signer_position, 'gent') if signer_position else ""
        signer_name_genitive = decline_full_name(signer_name, 'gent')

        # –î–∞—Ç–µ–ª—å–Ω—ã–π (datv)
        signer_position_dative = decline_phrase(signer_position, 'datv') if signer_position else ""
        signer_name_dative = decline_full_name(signer_name, 'datv')

        # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π (accs)
        signer_position_accusative = decline_phrase(signer_position, 'accs') if signer_position else ""
        signer_name_accusative = decline_full_name(signer_name, 'accs')

        # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (ablt)
        signer_position_instrumental = decline_phrase(signer_position, 'ablt') if signer_position else ""
        signer_name_instrumental = decline_full_name(signer_name, 'ablt')

        # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π (loct)
        signer_position_prepositional = decline_phrase(signer_position, 'loct') if signer_position else ""
        signer_name_prepositional = decline_full_name(signer_name, 'loct')

        context.update({
            # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position': signer_position,
            'director_name': signer_name,
            'director_name_initials': signer_name_initials,

            # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position_genitive': signer_position_genitive,
            'director_name_genitive': signer_name_genitive,

            # –î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position_dative': signer_position_dative,
            'director_name_dative': signer_name_dative,

            # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position_accusative': signer_position_accusative,
            'director_name_accusative': signer_name_accusative,

            # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position_instrumental': signer_position_instrumental,
            'director_name_instrumental': signer_name_instrumental,

            # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂
            'director_position_prepositional': signer_position_prepositional,
            'director_name_prepositional': signer_name_prepositional,

            # –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'director_level': level,
        })

        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö –¥–ª—è {employee.full_name_nominative}")
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
        logger.error(f"–ü–æ–¥–ø–∏—Å–∞–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")

    return context


def get_commission_formatted(employee):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–º –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ–ª–Ω—ã–π.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏.

    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
    Returns:
        tuple: (–¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    """
    commission_members_list, success = get_commission_members(employee)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ò–õ–ò —Å–æ—Å—Ç–∞–≤ –Ω–µ–ø–æ–ª–Ω—ã–π
    if not success or not commission_members_list:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name_nominative}")
        # –ù–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏ False
        return {}, False

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è
        result = {}
        members_formatted = []

        for member_data in commission_members_list:
            role_key = member_data.get('role', '').lower()
            member_obj = member_data.get('employee_obj') # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

            if not member_obj:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —á–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏: {member_data.get('name')}")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞

            name = member_obj.full_name_nominative
            position = member_obj.position.position_name if member_obj.position else ""
            name_initials = get_initials_from_name(name)

            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            member_info = {
                "name": name,
                "position": position,
                "name_initials": name_initials,
                "formatted": f"{name_initials}, {position.lower()}" if position else name_initials
            }

            # –°–∫–ª–æ–Ω–µ–Ω–∏—è
            try:
                member_info.update({
                    'position_genitive': decline_phrase(position, 'gent') if position else "",
                    'name_genitive': decline_full_name(name, 'gent'),
                    'position_dative': decline_phrase(position, 'datv') if position else "",
                    'name_dative': decline_full_name(name, 'datv'),
                    'position_accusative': decline_phrase(position, 'accs') if position else "",
                    'name_accusative': decline_full_name(name, 'accs'),
                    'position_instrumental': decline_phrase(position, 'ablt') if position else "",
                    'name_instrumental': decline_full_name(name, 'ablt'),
                    'position_prepositional': decline_phrase(position, 'loct') if position else "",
                    'name_prepositional': decline_full_name(name, 'loct'),
                })
            except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è {name}, {position}: {e}")
                 # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–æ–ª—è–º
            if '–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å' in role_key:
                result['chairman'] = member_info['formatted']
                for k, v in member_info.items():
                    result[f'chairman_{k}'] = v
            elif '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å' in role_key:
                result['secretary'] = member_info['formatted']
                for k, v in member_info.items():
                    result[f'secretary_{k}'] = v
            else: # –ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏
                members_formatted.append(member_info)


        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏
        if members_formatted:
            result['members'] = [m['formatted'] for m in members_formatted]
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ (–¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤)
            if len(members_formatted) > 0:
                member1_info = members_formatted[0]
                result['member1'] = member1_info['formatted']
                for k, v in member1_info.items():
                    result[f'member1_{k}'] = v

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            result['members_formatted'] = members_formatted # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

        # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # success —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ chairman, secretary –∏ —Ö–æ—Ç—è –±—ã 1 member –ë–´–õ–ò –ù–ê–ô–î–ï–ù–´
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        required_keys_in_result = ['chairman', 'members', 'secretary']
        missing_keys = [key for key in required_keys_in_result if key not in result]
        if missing_keys:
            logger.warning(f"–í –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {', '.join(missing_keys)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º –Ω–µ—É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            return result, False

        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è {employee.full_name_nominative}")
        return result, True # –£—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ success –±—ã–ª True –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–∏: {e}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception –¥–ª—è —Å—Ç–µ–∫—Ç—Ä–µ–π—Å–∞
        return {}, False
