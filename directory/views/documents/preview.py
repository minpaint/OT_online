"""
üëÅÔ∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
"""
import json
import os
import tempfile
import zipfile
import datetime
import logging
from django.views.generic import FormView, TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse
from django.contrib import messages
from django.utils.translation import gettext
from django.views.decorators.http import require_POST
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.conf import settings

from directory.models import Employee
from directory.models.document_template import DocumentTemplate
from directory.models import GeneratedDocument
from directory.forms.document_forms import DocumentPreviewForm
from directory.utils.docx_generator import (
    generate_all_orders, get_document_template, generate_document_from_template
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class DocumentsPreviewView(LoginRequiredMixin, TemplateView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    """
    template_name = 'directory/documents/documents_preview.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = self.request.session.get('preview_data')
        if not preview_data_json:
            messages.error(self.request, gettext('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            context['no_data'] = True
            return context

        try:
            preview_data = json.loads(preview_data_json)
            context['preview_data'] = preview_data
        except json.JSONDecodeError:
            messages.error(self.request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'))
            context['no_data'] = True
            return context

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if preview_data and len(preview_data) > 0:
            employee_id = preview_data[0].get('employee_id')
            if employee_id:
                try:
                    context['employee'] = get_object_or_404(Employee, id=employee_id)
                except:
                    messages.warning(self.request, gettext('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ'))

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
        document_types_dict = dict(DocumentTemplate.DOCUMENT_TYPES)
        context['document_types_dict'] = document_types_dict

        context['title'] = gettext('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
        return context

    def post(self, request, *args, **kwargs):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            messages.error(request, gettext('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            return redirect('directory:home')

        try:
            preview_data = json.loads(preview_data_json)
        except json.JSONDecodeError:
            messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            return redirect('directory:home')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        updated_data = {}
        for key, value in request.POST.items():
            if key.startswith('document_data_'):
                parts = key.replace('document_data_', '').split('_', 1)
                if len(parts) == 2:
                    doc_type, field = parts
                    if doc_type not in updated_data:
                        updated_data[doc_type] = {}
                    updated_data[doc_type][field] = value

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        generated_documents = []
        files_to_archive = []
        has_siz_card = False
        employee_id = None

        for doc_data in preview_data:
            doc_type = doc_data.get('document_type')
            employee_id = doc_data.get('employee_id')
            document_data = doc_data.get('document_data', {})

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if doc_type in updated_data:
                document_data.update(updated_data[doc_type])

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                employee = get_object_or_404(Employee, id=employee_id)
            except:
                messages.error(request, gettext('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'))
                continue

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if doc_type == 'siz_card':
                has_siz_card = True
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            generated_doc = None

            if doc_type == 'all_orders':
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è
                generated_doc = generate_all_orders(
                    employee,
                    request.user,
                    document_data
                )
            elif doc_type in ['knowledge_protocol', 'doc_familiarization']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
                template = get_document_template(doc_type)
                if template:
                    generated_doc = generate_document_from_template(
                        template,
                        employee,
                        request.user,
                        document_data
                    )

            if generated_doc:
                generated_documents.append(generated_doc)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                doc_path = os.path.join(settings.MEDIA_ROOT, str(generated_doc.document_file))
                if os.path.exists(doc_path):
                    file_name = os.path.basename(generated_doc.document_file.name)
                    files_to_archive.append((doc_path, file_name))
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤: {doc_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(doc_path)} bytes")
                else:
                    logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}")

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –°–ò–ó –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        if has_siz_card and employee_id:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                from directory.views.siz_issued import export_personal_card_pdf

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
                with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                    # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    pdf_response = export_personal_card_pdf(request, employee_id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                    if hasattr(pdf_response, 'content'):
                        tmp_file.write(pdf_response.content)
                    elif hasattr(pdf_response, 'streaming_content'):
                        for chunk in pdf_response.streaming_content:
                            tmp_file.write(chunk)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                tmp_file_size = os.path.getsize(tmp_file.name)
                logger.info(f"–°–æ–∑–¥–∞–Ω PDF —Ñ–∞–π–ª –¥–ª—è –°–ò–ó: {tmp_file.name}, —Ä–∞–∑–º–µ—Ä: {tmp_file_size} bytes")

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if tmp_file_size == 0:
                    logger.error("PDF —Ñ–∞–π–ª –°–ò–ó —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º!")
                    raise ValueError("PDF —Ñ–∞–π–ª –°–ò–ó –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                pdf_filename = f'siz_card_{employee.full_name_nominative}.pdf'
                files_to_archive.append((tmp_file.name, pdf_filename))

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è PDF
                template = DocumentTemplate.objects.filter(
                    document_type='siz_card',
                    is_active=True
                ).order_by('-id').first()

                if not template:
                    template = DocumentTemplate.objects.create(
                        document_type='siz_card',
                        name='–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó',
                        description='–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã',
                        is_active=True
                    )

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                siz_document = GeneratedDocument(
                    template=template,
                    employee=employee,
                    created_by=request.user
                )
                siz_document.document_file.save(pdf_filename, pdf_response)
                siz_document.save()

                generated_documents.append(siz_document)

            except Exception as e:
                error_msg = gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó:') + ' ' + str(e)
                logger.error(f"–û—à–∏–±–∫–∞ –°–ò–ó: {str(e)}")
                messages.warning(request, error_msg)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        if 'preview_data' in request.session:
            del request.session['preview_data']

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
        if len(files_to_archive) > 1:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            tmp_dir = os.path.join(settings.MEDIA_ROOT, 'tmp')
            os.makedirs(tmp_dir, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            zip_filename = f'documents_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.zip'
            zip_path = os.path.join(tmp_dir, zip_filename)

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            try:
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —Ñ–∞–π–ª—ã
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for file_path, file_name in files_to_archive:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                            zipf.write(file_path, file_name)
                            logger.info(f"–§–∞–π–ª {file_path} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤ –∫–∞–∫ {file_name}")
                        else:
                            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª {file_path}: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if not os.path.exists(zip_path) or os.path.getsize(zip_path) == 0:
                    raise ValueError("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ö–∏–≤")

                logger.info(f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(zip_path)} bytes")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(zip_path, 'rb') as f:
                    zip_content = f.read()

                response = HttpResponse(zip_content, content_type='application/zip')
                response['Content-Disposition'] = f'attachment; filename="{zip_filename}"'
                response['Content-Length'] = len(zip_content)

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(zip_path)
                    for file_path, _ in files_to_archive:
                        if file_path.startswith(tmp_dir):  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                            os.unlink(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

                success_msg = gettext('–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}').format(len(files_to_archive))
                messages.success(request, success_msg)

                return response
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
                messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: ') + str(e))
                return self.get(request, *args, **kwargs)

        # –ï—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        elif len(generated_documents) == 1:
            messages.success(request, gettext('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'))
            return redirect('directory:documents:document_detail', pk=generated_documents[0].id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –Ω–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
        elif len(files_to_archive) == 1:
            file_path, file_name = files_to_archive[0]
            try:
                with open(file_path, 'rb') as f:
                    file_content = f.read()

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                    if len(file_content) == 0:
                        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç")

                    content_type = 'application/pdf' if file_name.endswith('.pdf') else 'application/octet-stream'
                    response = HttpResponse(file_content, content_type=content_type)
                    response['Content-Disposition'] = f'attachment; filename="{file_name}"'
                    response['Content-Length'] = len(file_content)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    if file_path.startswith(os.path.join(settings.MEDIA_ROOT, 'tmp')):
                        os.unlink(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")

                messages.success(request, gettext('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'))
                return response
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {file_path}, –æ—à–∏–±–∫–∞: {str(e)}")
                messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: ') + str(e))
                return self.get(request, *args, **kwargs)

        else:
            messages.error(request, gettext('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã'))
            return self.get(request, *args, **kwargs)


@login_required
@require_POST
def update_document_data(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        doc_type = request.POST.get('doc_type')
        field_name = request.POST.get('field_name')
        field_value = request.POST.get('field_value')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            return JsonResponse({'success': False, 'error': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'})

        preview_data = json.loads(preview_data_json)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        for doc_data in preview_data:
            if doc_data.get('document_type') == doc_type:
                doc_data['document_data'][field_name] = field_value
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
        request.session['preview_data'] = json.dumps(preview_data, default=str)

        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})