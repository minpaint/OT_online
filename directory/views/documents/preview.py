"""
üëÅÔ∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
"""
import json
import os
import tempfile
import zipfile
import datetime
import logging
from django.views.generic import FormView, TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse
from django.contrib import messages
from django.utils.translation import gettext
from django.views.decorators.http import require_POST
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.conf import settings

from directory.models import Employee
from directory.models.document_template import DocumentTemplate
from directory.models import GeneratedDocument
from directory.forms.document_forms import DocumentPreviewForm

# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã --- 
from directory.document_generators.base import get_document_template, generate_docx_from_template # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from directory.document_generators.order_generator import generate_all_orders # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–π
# –ò–º–ø–æ—Ä—Ç—ã specific generators (protocol, familiarization, etc.) are needed if used directly
from directory.document_generators.protocol_generator import generate_knowledge_protocol
from directory.document_generators.familiarization_generator import generate_familiarization_document
from directory.document_generators.siz_card_generator import generate_siz_card # –•–æ—Ç—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ
from directory.document_generators.ot_card_generator import generate_personal_ot_card
from directory.document_generators.journal_example_generator import generate_journal_example
# --- --- --- 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class DocumentsPreviewView(LoginRequiredMixin, TemplateView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    """
    template_name = 'directory/documents/documents_preview.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = self.request.session.get('preview_data')
        if not preview_data_json:
            messages.error(self.request, gettext('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            context['no_data'] = True
            return context

        try:
            preview_data = json.loads(preview_data_json)
            context['preview_data'] = preview_data
        except json.JSONDecodeError:
            messages.error(self.request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'))
            context['no_data'] = True
            return context

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if preview_data and len(preview_data) > 0:
            employee_id = preview_data[0].get('employee_id')
            if employee_id:
                try:
                    context['employee'] = get_object_or_404(Employee, id=employee_id)
                except:
                    messages.warning(self.request, gettext('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ'))

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
        document_types_dict = dict(DocumentTemplate.DOCUMENT_TYPES)
        context['document_types_dict'] = document_types_dict

        context['title'] = gettext('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
        return context

    def post(self, request, *args, **kwargs):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            messages.error(request, gettext('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            return redirect('directory:home')

        try:
            preview_data = json.loads(preview_data_json)
        except json.JSONDecodeError:
            messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            return redirect('directory:home')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        updated_data = {}
        for key, value in request.POST.items():
            if key.startswith('document_data_'):
                parts = key.replace('document_data_', '').split('_', 1)
                if len(parts) == 2:
                    doc_type, field = parts
                    if doc_type not in updated_data:
                        updated_data[doc_type] = {}
                    updated_data[doc_type][field] = value

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        generated_documents = []
        files_to_archive = []
        has_siz_card = False
        employee_id = None

        for doc_data in preview_data:
            doc_type = doc_data.get('document_type')
            employee_id = doc_data.get('employee_id')
            document_context = doc_data.get('document_data', {})

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if doc_type in updated_data:
                document_context.update(updated_data[doc_type])

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                employee = get_object_or_404(Employee, id=employee_id)
            except:
                messages.error(request, gettext(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ {doc_type}'))
                continue

            generated_doc = None # –°—é–¥–∞ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            # --- –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä --- 
            try:
                if doc_type == 'all_orders':
                    generated_doc = generate_all_orders(employee, request.user, document_context)
                elif doc_type == 'knowledge_protocol':
                    generated_doc = generate_knowledge_protocol(employee, request.user, document_context)
                elif doc_type == 'doc_familiarization':
                    # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ document_context
                    doc_list = document_context.get('documents_list') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    generated_doc = generate_familiarization_document(employee, doc_list, request.user, document_context)
                elif doc_type == 'siz_card':
                    has_siz_card = True # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∏–∂–µ
                    continue
                elif doc_type == 'personal_ot_card':
                    generated_doc = generate_personal_ot_card(employee, request.user, document_context)
                elif doc_type == 'journal_example':
                    generated_doc = generate_journal_example(employee, request.user, document_context)
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –±–∞–∑–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
                    template = get_document_template(doc_type, employee)
                    if template:
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞: {doc_type}")
                        generated_doc = generate_docx_from_template(template, document_context, employee, request.user)
                    else:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")
                        messages.warning(request, gettext(f'–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}'))
                        continue

            except Exception as e:
                error_msg = gettext(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ {doc_type}:') + f' {str(e)}'
                logger.error(error_msg, exc_info=True)
                messages.error(request, error_msg)
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            # --- --- --- 

            if generated_doc and isinstance(generated_doc, GeneratedDocument): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç
                generated_documents.append(generated_doc)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                doc_path = os.path.join(settings.MEDIA_ROOT, str(generated_doc.document_file))
                if os.path.exists(doc_path):
                    file_name = os.path.basename(generated_doc.document_file.name)
                    files_to_archive.append((doc_path, file_name))
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤: {doc_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(doc_path)} bytes")
                else:
                    logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}")
            elif generated_doc: # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HttpResponse –¥–ª—è –°–ò–ó, —Ö–æ—Ç—è –º—ã –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                logger.warning(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è {doc_type} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(generated_doc)}")

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –°–ò–ó –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        if has_siz_card and employee_id: 
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—â–µ —Ä–∞–∑ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è)
                employee = get_object_or_404(Employee, id=employee_id)
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID: {employee_id}")
                
                # –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (–∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç excel_export)
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ custom_context –¥–ª—è –°–ò–ó –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ updated_data
                siz_context = updated_data.get('siz_card', {}) 
                siz_response = generate_siz_card(employee, request.user, siz_context)
                
                if siz_response and isinstance(siz_response, HttpResponse) and siz_response.status_code == 200:
                    logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó (Excel) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Excel
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                        for chunk in siz_response.streaming_content if hasattr(siz_response, 'streaming_content') else [siz_response.content]:
                            tmp_file.write(chunk)
                    
                    tmp_file_size = os.path.getsize(tmp_file.name)
                    if tmp_file_size > 0:
                        excel_filename = f'siz_card_{employee.full_name_nominative.split()[0]}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
                        files_to_archive.append((tmp_file.name, excel_filename))
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω Excel —Ñ–∞–π–ª –°–ò–ó –≤ –∞—Ä—Ö–∏–≤: {tmp_file.name}, —Ä–∞–∑–º–µ—Ä: {tmp_file_size} bytes")
                        
                        # –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å GeneratedDocument –¥–ª—è Excel —Ñ–∞–π–ª–∞
                        # template = get_document_template('siz_card', employee) ... 
                        # siz_document = GeneratedDocument(...) ... siz_document.save()
                    else:
                         logger.error("–§–∞–π–ª Excel –°–ò–ó —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º!")
                         messages.warning(request, gettext('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –ø—É—Å—Ç.'))
                else:
                     error_msg = gettext('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –°–ò–ó (Excel).')
                     if siz_response:
                         error_msg += f" –°—Ç–∞—Ç—É—Å: {siz_response.status_code}"
                     logger.error(error_msg)
                     messages.warning(request, error_msg)

            except Exception as e:
                error_msg = gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó:') + ' ' + str(e)
                logger.error(f"–û—à–∏–±–∫–∞ –°–ò–ó: {str(e)}", exc_info=True)
                messages.warning(request, error_msg)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        if 'preview_data' in request.session:
            del request.session['preview_data']

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ --- 
        if len(files_to_archive) > 1:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            tmp_dir = os.path.join(settings.MEDIA_ROOT, 'tmp_archives') # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–∞–ø–∫–∏
            os.makedirs(tmp_dir, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            zip_filename = f'documents_{employee.full_name_nominative.split()[0]}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.zip'
            zip_path = os.path.join(tmp_dir, zip_filename)

            try:
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —Ñ–∞–π–ª—ã
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for file_path, file_name in files_to_archive:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                            zipf.write(file_path, file_name)
                            logger.info(f"–§–∞–π–ª {file_path} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤ –∫–∞–∫ {file_name}")
                        else:
                            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª {file_path}: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if not os.path.exists(zip_path) or os.path.getsize(zip_path) == 0:
                    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                    if any(os.path.exists(fp) and os.path.getsize(fp) > 0 for fp, _ in files_to_archive):
                        logger.warning("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç, –Ω–æ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")
                    else:
                         raise ValueError("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ö–∏–≤, –∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

                logger.info(f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(zip_path)} bytes")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(zip_path, 'rb') as f:
                    zip_content = f.read()

                response = HttpResponse(zip_content, content_type='application/zip')
                response['Content-Disposition'] = f'attachment; filename="{zip_filename}"'
                response['Content-Length'] = len(zip_content)
                
                success_msg = gettext('–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {}').format(len(files_to_archive))
                messages.success(request, success_msg)
                
                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                os.unlink(zip_path)

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤ tmp_dir)
                for file_path, _ in files_to_archive:
                    if file_path.startswith(tempfile.gettempdir()) or file_path.startswith(tmp_dir): 
                        try:
                            os.unlink(file_path)
                        except OSError as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
                            
                return response
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}", exc_info=True)
                messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: ') + str(e))
                 # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π
                if len(generated_documents) >= 1:
                     messages.info(request, gettext('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É.'))
                     return redirect('directory:documents:document_detail', pk=generated_documents[0].id)
                return self.get(request, *args, **kwargs) # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        # –ï—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ –°–ò–ó)
        elif len(generated_documents) == 1:
            messages.success(request, gettext('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'))
            return redirect('directory:documents:document_detail', pk=generated_documents[0].id)
        
        # –ï—Å–ª–∏ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó (–∏ –æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ files_to_archive)
        elif len(files_to_archive) == 1 and has_siz_card:
            file_path, file_name = files_to_archive[0]
            try:
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                if len(file_content) == 0:
                    raise ValueError("–§–∞–π–ª –ø—É—Å—Ç")
                
                content_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' # Excel
                response = HttpResponse(file_content, content_type=content_type)
                response['Content-Disposition'] = f'attachment; filename="{file_name}"'
                response['Content-Length'] = len(file_content)
                
                messages.success(request, gettext('–ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞'))
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if file_path.startswith(tempfile.gettempdir()):
                    os.unlink(file_path)
                return response
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –°–ò–ó: {file_path}, –æ—à–∏–±–∫–∞: {str(e)}")
                messages.error(request, gettext('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –°–ò–ó: ') + str(e))
                return self.get(request, *args, **kwargs)
        else:
            # –°–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞
            if not messages.get_messages(request):
                 messages.error(request, gettext('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'))
            return self.get(request, *args, **kwargs)


@login_required
@require_POST
def update_document_data(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        doc_type = request.POST.get('doc_type')
        field_name = request.POST.get('field_name')
        field_value = request.POST.get('field_value')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            return JsonResponse({'success': False, 'error': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'})

        preview_data = json.loads(preview_data_json)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        updated = False
        for doc_data in preview_data:
            if doc_data.get('document_type') == doc_type:
                if 'document_data' not in doc_data: doc_data['document_data'] = {}
                doc_data['document_data'][field_name] = field_value
                updated = True
                break
        
        if not updated:
             return JsonResponse({'success': False, 'error': f'–î–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ {doc_type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º default=str –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç
        request.session['preview_data'] = json.dumps(preview_data, default=str) 
        request.session.modified = True # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è

        return JsonResponse({'success': True})
    except json.JSONDecodeError:
         return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_document_data: {e}", exc_info=True)
        return JsonResponse({'success': False, 'error': str(e)})