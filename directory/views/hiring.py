# directory/views/hiring.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView, FormView, View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.db import transaction
from django.utils import timezone
from django.http import JsonResponse, HttpResponseRedirect
from django.db.models import Q, Prefetch
from django import forms
from crispy_forms.helper import FormHelper

from directory.models import (
    Employee,
    EmployeeHiring,
    Organization,
    Position,
    GeneratedDocument
)
from directory.models.medical_norm import MedicalExaminationNorm
from directory.forms.hiring import CombinedEmployeeHiringForm, DocumentAttachmentForm
from directory.utils.hiring_utils import create_hiring_from_employee, attach_document_to_hiring
from directory.utils.declension import decline_full_name
from directory.forms.mixins import OrganizationRestrictionFormMixin

import logging

logger = logging.getLogger(__name__)


class SimpleHiringView(LoginRequiredMixin, FormView):
    """
    üßô‚Äç‚ôÇÔ∏è –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–æ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.
    –í—Å–µ –ø–æ–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –∏ –°–ò–ó.
    """
    template_name = 'directory/hiring/simple_form.html'
    form_class = CombinedEmployeeHiringForm
    success_url = reverse_lazy('directory:hiring:hiring_list')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É: –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫')

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        if self.request.user and hasattr(self.request.user, 'profile'):
            context['organizations'] = self.request.user.profile.organizations.all()
        else:
            context['organizations'] = Organization.objects.all()

        return context

    @transaction.atomic
    def form_valid(self, form):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            data = form.cleaned_data

            # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee = Employee(
                full_name_nominative=data['full_name_nominative'],
                date_of_birth=data.get('date_of_birth'),
                place_of_residence=data.get('place_of_residence'),
                organization=data['organization'],
                subdivision=data.get('subdivision'),
                department=data.get('department'),
                position=data['position'],
                height=data.get('height'),
                clothing_size=data.get('clothing_size'),
                shoe_size=data.get('shoe_size'),
                hire_date=timezone.now().date(),
                start_date=timezone.now().date(),
                contract_type=data.get('contract_type', 'standard'),
                status='active'
            )
            employee.save()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ
            hiring = EmployeeHiring(
                employee=employee,
                hiring_date=timezone.now().date(),
                start_date=timezone.now().date(),
                hiring_type=data['hiring_type'],
                organization=data['organization'],
                subdivision=data.get('subdivision'),
                department=data.get('department'),
                position=data['position'],
                created_by=self.request.user
            )
            hiring.save()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            messages.success(
                self.request,
                _('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É').format(employee.full_name_nominative)
            )

            # –ò–∑–º–µ–Ω—è–µ–º URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ
            self.success_url = reverse('directory:hiring:hiring_detail', kwargs={'pk': hiring.pk})

            return super().form_valid(form)

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")

            messages.error(
                self.request,
                _('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {}').format(str(e))
            )

            return self.form_invalid(form)


@login_required
def position_requirements_api(request, position_id):
    """
    üîç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –∏ –°–ò–ó –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π.

    Args:
        request: HttpRequest
        position_id: ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ 404
        position = get_object_or_404(Position, pk=position_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞
        has_custom_medical = position.medical_factors.filter(is_disabled=False).exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        has_reference_medical = False
        if not has_custom_medical:
            has_reference_medical = MedicalExaminationNorm.objects.filter(
                position_name=position.position_name
            ).exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –°–ò–ó
        has_custom_siz = position.siz_norms.exists()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó, –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        has_reference_siz = False
        if not has_custom_siz:
            has_reference_siz = Position.find_reference_norms(position.position_name).exists()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'position_id': position.id,
            'position_name': position.position_name,
            'needs_medical': has_custom_medical or has_reference_medical,
            'needs_siz': has_custom_siz or has_reference_siz,
            'status': 'success'
        }

        return JsonResponse(response_data)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –≤ position_requirements_api –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ ID={position_id}: {str(e)}")

        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)


# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
class HiringTreeView(LoginRequiredMixin, ListView):
    """
    –î—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    """
    model = EmployeeHiring
    template_name = 'directory/hiring/tree_view.html'
    context_object_name = 'hiring_records'

    def get_queryset(self):
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        is_active = self.request.GET.get('is_active')
        queryset = EmployeeHiring.objects.all()

        if is_active == 'true':
            queryset = queryset.filter(is_active=True)
        elif is_active == 'false':
            queryset = queryset.filter(is_active=False)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞
        hiring_type = self.request.GET.get('hiring_type')
        if hiring_type:
            queryset = queryset.filter(hiring_type=hiring_type)

        # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(employee__full_name_nominative__icontains=search) |
                Q(position__position_name__icontains=search)
            )

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            queryset = queryset.filter(organization__in=allowed_orgs)

        return queryset.select_related(
            'employee', 'organization', 'subdivision', 'department', 'position'
        ).prefetch_related('documents')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ü—Ä–∏–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç—É')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
        else:
            allowed_orgs = Organization.objects.all()

        # –°–æ–∑–¥–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        tree_data = []

        for org in allowed_orgs:
            org_hirings = self.get_queryset().filter(
                organization=org,
                subdivision__isnull=True,
                department__isnull=True
            )

            if not org_hirings.exists() and not org.subdivisions.exists():
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

            org_data = {
                'id': org.id,
                'name': org.short_name_ru or org.full_name_ru,
                'hirings': list(org_hirings),
                'subdivisions': []
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            for subdivision in org.subdivisions.all():
                sub_hirings = self.get_queryset().filter(
                    organization=org,
                    subdivision=subdivision,
                    department__isnull=True
                )

                if not sub_hirings.exists() and not subdivision.departments.exists():
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

                sub_data = {
                    'id': subdivision.id,
                    'name': subdivision.name,
                    'hirings': list(sub_hirings),
                    'departments': []
                }

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—ã
                for department in subdivision.departments.all():
                    dept_hirings = self.get_queryset().filter(
                        organization=org,
                        subdivision=subdivision,
                        department=department
                    )

                    if not dept_hirings.exists():
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –æ—Ç–¥–µ–ª—ã

                    dept_data = {
                        'id': department.id,
                        'name': department.name,
                        'hirings': list(dept_hirings)
                    }

                    sub_data['departments'].append(dept_data)

                org_data['subdivisions'].append(sub_data)

            tree_data.append(org_data)

        context['tree_data'] = tree_data
        context['hiring_types'] = dict(EmployeeHiring.HIRING_TYPE_CHOICES)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        context['current_hiring_type'] = self.request.GET.get('hiring_type', '')
        context['current_is_active'] = self.request.GET.get('is_active', '')
        context['search_query'] = self.request.GET.get('search', '')

        return context


class HiringListView(LoginRequiredMixin, ListView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    model = EmployeeHiring
    template_name = 'directory/hiring/list.html'
    context_object_name = 'hiring_records'
    paginate_by = 20

    def get_queryset(self):
        queryset = super().get_queryset()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ –∏ –≤ TreeView
        is_active = self.request.GET.get('is_active')
        if is_active == 'true':
            queryset = queryset.filter(is_active=True)
        elif is_active == 'false':
            queryset = queryset.filter(is_active=False)

        hiring_type = self.request.GET.get('hiring_type')
        if hiring_type:
            queryset = queryset.filter(hiring_type=hiring_type)

        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(employee__full_name_nominative__icontains=search) |
                Q(position__position_name__icontains=search)
            )

        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            queryset = queryset.filter(organization__in=allowed_orgs)

        return queryset.select_related(
            'employee', 'organization', 'subdivision', 'department', 'position'
        ).prefetch_related('documents')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ü—Ä–∏–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç—É')
        context['hiring_types'] = EmployeeHiring.HIRING_TYPE_CHOICES

        # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        context['current_hiring_type'] = self.request.GET.get('hiring_type', '')
        context['current_is_active'] = self.request.GET.get('is_active', '')
        context['search_query'] = self.request.GET.get('search', '')

        return context


class HiringDetailView(LoginRequiredMixin, DetailView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    model = EmployeeHiring
    template_name = 'directory/hiring/detail.html'
    context_object_name = 'hiring'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _(f'–ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É: {self.object.employee.full_name_nominative}')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        context['attachment_form'] = DocumentAttachmentForm(
            employee_id=self.object.employee.id,
            initial={'documents': self.object.documents.all()}
        )

        return context

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if 'attach_documents' in request.POST:
            form = DocumentAttachmentForm(
                request.POST,
                employee_id=self.object.employee.id
            )

            if form.is_valid():
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                self.object.documents.clear()
                selected_docs = form.cleaned_data['documents']
                self.object.documents.add(*selected_docs)
                messages.success(request, _(f'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(selected_docs)}'))
                return redirect('directory:hiring:hiring_detail', pk=self.object.pk)

        return self.get(request, *args, **kwargs)


class HiringCreateView(LoginRequiredMixin, CreateView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    model = EmployeeHiring
    # form_class = EmployeeHiringRecordForm  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —ç—Ç–æ–π —Ñ–æ—Ä–º—ã
    fields = [
        'employee', 'hiring_date', 'start_date', 'hiring_type',
        'organization', 'subdivision', 'department', 'position',
        'notes', 'is_active'
    ]  # –í–º–µ—Å—Ç–æ form_class –∏—Å–ø–æ–ª—å–∑—É–µ–º fields
    template_name = 'directory/hiring/form.html'

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±—ã –≤ EmployeeHiringRecordForm
        form.helper = FormHelper()
        form.helper.form_method = 'post'

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        form.fields['hiring_date'].widget = forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
        form.fields['start_date'].widget = forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            form.fields['organization'].queryset = self.request.user.profile.organizations.all()

        return form

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ù–æ–≤—ã–π –ø—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É')
        return context

    def form_valid(self, form):
        form.instance.created_by = self.request.user
        messages.success(self.request, _('–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'))
        return super().form_valid(form)

    def get_success_url(self):
        return reverse_lazy('directory:hiring:hiring_detail', kwargs={'pk': self.object.pk})


class HiringUpdateView(LoginRequiredMixin, UpdateView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    model = EmployeeHiring
    # form_class = EmployeeHiringRecordForm  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —ç—Ç–æ–π —Ñ–æ—Ä–º—ã
    fields = [
        'employee', 'hiring_date', 'start_date', 'hiring_type',
        'organization', 'subdivision', 'department', 'position',
        'notes', 'is_active'
    ]  # –í–º–µ—Å—Ç–æ form_class –∏—Å–ø–æ–ª—å–∑—É–µ–º fields
    template_name = 'directory/hiring/form.html'

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±—ã –≤ EmployeeHiringRecordForm
        form.helper = FormHelper()
        form.helper.form_method = 'post'

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        form.fields['hiring_date'].widget = forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
        form.fields['start_date'].widget = forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            form.fields['organization'].queryset = self.request.user.profile.organizations.all()

        return form

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É')
        return context

    def form_valid(self, form):
        messages.success(self.request, _('–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'))
        return super().form_valid(form)

    def get_success_url(self):
        return reverse_lazy('directory:hiring:hiring_detail', kwargs={'pk': self.object.pk})


class HiringDeleteView(LoginRequiredMixin, DeleteView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    model = EmployeeHiring
    template_name = 'directory/hiring/confirm_delete.html'
    success_url = reverse_lazy('directory:hiring:hiring_list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É')
        return context

    def delete(self, request, *args, **kwargs):
        messages.success(request, _('–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'))
        return super().delete(request, *args, **kwargs)


class CreateHiringFromEmployeeView(LoginRequiredMixin, FormView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    template_name = 'directory/hiring/create_from_employee.html'
    form_class = forms.Form  # –ü—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        employee_id = self.kwargs.get('employee_id')
        employee = get_object_or_404(Employee, id=employee_id)
        context['employee'] = employee
        context['title'] = _('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        return context

    def form_valid(self, form):
        employee_id = self.kwargs.get('employee_id')
        employee = get_object_or_404(Employee, id=employee_id)

        try:
            hiring = create_hiring_from_employee(employee, self.request.user)
            messages.success(
                self.request,
                _('–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            )
            return redirect('directory:hiring:hiring_detail', pk=hiring.pk)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ: {e}")
            messages.error(self.request, _('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ'))
            return self.form_invalid(form)