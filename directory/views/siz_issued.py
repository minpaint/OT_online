# üìÅ directory/views/siz_issued.py
import re
import random
from django.views.generic import CreateView, DetailView, FormView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.template.loader import get_template
from io import BytesIO
from xhtml2pdf import pisa
from django.contrib.auth.decorators import login_required

from directory.models import Employee, SIZIssued
from directory.forms.siz_issued import SIZIssueForm, SIZIssueMassForm, SIZIssueReturnForm
from directory.utils.pdf import render_to_pdf


def determine_gender_from_patronymic(full_name):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É –≤ –ø–æ–ª–Ω–æ–º –∏–º–µ–Ω–∏.

    Args:
        full_name (str): –ü–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"

    Returns:
        str: "–ú—É–∂—Å–∫–æ–π" –∏–ª–∏ "–ñ–µ–Ω—Å–∫–∏–π"
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏
    name_parts = full_name.split()

    # –ï—Å–ª–∏ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏ –±–æ–ª–µ–µ —á–∞—Å—Ç–µ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ç—á–µ—Å—Ç–≤–æ - —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å
    if len(name_parts) >= 3:
        patronymic = name_parts[2]
    else:
        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –º–µ–Ω—å—à–µ 3, –≤–µ—Ä–Ω–µ–º –º—É–∂—Å–∫–æ–π –ø–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "–ú—É–∂—Å–∫–æ–π"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞
    # –†—É—Å—Å–∫–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞
    if re.search(r'(–∏—á|—ã—á)$', patronymic, re.IGNORECASE):
        return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–Ω–∞|–≤–Ω–∞|—á–Ω–∞)$', patronymic, re.IGNORECASE):
        return "–ñ–µ–Ω—Å–∫–∏–π"
    # –¢—é—Ä–∫—Å–∫–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞
    elif re.search(r'(–æ–≥–ª—ã|—É–ª—ã|–ª—ã)$', patronymic, re.IGNORECASE):
        return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–∫—ã–∑—ã|–∑—ã)$', patronymic, re.IGNORECASE):
        return "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º—É–∂—Å–∫–æ–π –ø–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "–ú—É–∂—Å–∫–æ–π"


def get_random_siz_sizes(gender):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –°–ò–ó –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞.

    Args:
        gender (str): –ü–æ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ("–ú—É–∂—Å–∫–æ–π" –∏–ª–∏ "–ñ–µ–Ω—Å–∫–∏–π")

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –°–ò–ó (–≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä, –ø–µ—Ä—á–∞—Ç–∫–∏, —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä, –ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑)
    """
    if gender == "–ú—É–∂—Å–∫–æ–π":
        # –ú—É–∂—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
        headgear = random.randint(55, 59)  # –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç 55 –¥–æ 59
        gloves = random.randint(15, 19) / 2  # –ü–µ—Ä—á–∞—Ç–∫–∏ –æ—Ç 7.5 –¥–æ 9.5, –∫—Ä–∞—Ç–Ω—ã–µ 0.5
        respirator = random.choice(["1", "2", "3"])  # –†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä—ã 1, 2, 3
    else:
        # –ñ–µ–Ω—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
        headgear = random.randint(53, 57)  # –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç 53 –¥–æ 57
        gloves = random.randint(13, 17) / 2  # –ü–µ—Ä—á–∞—Ç–∫–∏ –æ—Ç 6.5 –¥–æ 8.5, –∫—Ä–∞—Ç–Ω—ã–µ 0.5
        respirator = random.choice(["1", "2", "3"])  # –†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä—ã 1, 2, 3

    # –ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞, –∫–∞–∫ –∏ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä
    gas_mask = respirator

    return {
        'headgear': headgear,
        'gloves': gloves,
        'respirator': respirator,
        'gas_mask': gas_mask
    }


class SIZIssueFormView(LoginRequiredMixin, CreateView):
    """
    üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    """
    model = SIZIssued
    form_class = SIZIssueForm
    template_name = 'directory/siz_issued/issue_form.html'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–∏ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_form_kwargs(self):
        """
        üìã –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º—É
        """
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user

        # –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä employee_id, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            kwargs['employee_id'] = employee_id

        return kwargs

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í—ã–¥–∞—á–∞ –°–ò–ó'

        # –ï—Å–ª–∏ –µ—Å—Ç—å employee_id –≤ URL, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            employee = get_object_or_404(Employee, id=employee_id)
            context['employee'] = employee

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if employee.position:
                from directory.models.siz import SIZNorm
                norms = SIZNorm.objects.filter(
                    position=employee.position
                ).select_related('siz')

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
                context['base_norms'] = norms.filter(condition='')

                condition_groups = {}
                for norm in norms.exclude(condition=''):
                    if norm.condition not in condition_groups:
                        condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)

                context['condition_groups'] = [
                    {'name': condition, 'norms': norms}
                    for condition, norms in condition_groups.items()
                ]

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {self.object.employee.full_name_nominative}"
        )

        return response


@login_required
def issue_selected_siz(request, employee_id):
    """
    üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    if request.method == 'POST':
        employee = get_object_or_404(Employee, id=employee_id)
        selected_norm_ids = request.POST.getlist('selected_norms')

        if not selected_norm_ids:
            messages.warning(request, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –°–ò–ó –¥–ª—è –≤—ã–¥–∞—á–∏")
            return redirect('directory:siz:siz_personal_card', employee_id=employee_id)

        from directory.models.siz import SIZNorm
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã
        norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –≤—ã–¥–∞—á–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–ò–ó
        issued_count = 0
        for norm in norms:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–∫–æ–µ –°–ò–ó –µ—â–µ –Ω–µ –≤—ã–¥–∞–Ω–æ –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            existing_issued = SIZIssued.objects.filter(
                employee=employee,
                siz=norm.siz,
                is_returned=False
            ).exists()

            if not existing_issued:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
                SIZIssued.objects.create(
                    employee=employee,
                    siz=norm.siz,
                    quantity=norm.quantity,
                    issue_date=timezone.now().date(),
                    condition=norm.condition,
                    received_signature=True
                )
                issued_count += 1

        if issued_count > 0:
            messages.success(
                request,
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {issued_count} –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.full_name_nominative}"
            )
        else:
            messages.info(
                request,
                "‚ÑπÔ∏è –ù–∏ –æ–¥–Ω–æ –°–ò–ó –Ω–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ò–ó —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
            )

    return redirect('directory:siz:siz_personal_card', employee_id=employee_id)


class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    """
    üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    model = Employee
    template_name = 'directory/siz_issued/personal_card.html'
    context_object_name = 'employee'

    def get_object(self):
        """
        üîç –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –µ–≥–æ ID
        """
        return get_object_or_404(Employee, id=self.kwargs.get('employee_id'))

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {self.object.full_name_nominative}'

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –°–ò–ó
        issued_items = SIZIssued.objects.filter(
            employee=self.object
        ).select_related('siz').order_by('-issue_date')

        context['issued_items'] = issued_items

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if self.object.position:
            from directory.models.siz import SIZNorm
            norms = SIZNorm.objects.filter(
                position=self.object.position
            ).select_related('siz')

            # –ë–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã (–±–µ–∑ —É—Å–ª–æ–≤–∏–π)
            context['base_norms'] = norms.filter(condition='')

            # –ù–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
            conditions = list(set(norm.condition for norm in norms if norm.condition))
            condition_groups = []

            for condition in conditions:
                condition_norms = [norm for norm in norms if norm.condition == condition]
                if condition_norms:
                    condition_groups.append({
                        'name': condition,
                        'norms': condition_norms
                    })

            context['condition_groups'] = condition_groups

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        gender = determine_gender_from_patronymic(self.object.full_name_nominative)
        context['gender'] = gender

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –°–ò–ó –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['siz_sizes'] = get_random_siz_sizes(gender)

        return context


class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    """
    üîÑ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    model = SIZIssued
    form_class = SIZIssueReturnForm
    template_name = 'directory/siz_issued/return_form.html'
    pk_url_kwarg = 'siz_issued_id'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó'
        context['employee'] = self.object.employee
        context['siz_name'] = self.object.siz.name
        context['issue_date'] = self.object.issue_date

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        )

        return response


@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    """
    üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    """
    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –°–ò–ó, –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    result = {
        'employee_id': employee.id,
        'employee_name': employee.full_name_nominative,
        'position': employee.position.position_name if employee.position else "",
        'organization': employee.organization.short_name_ru,
        'issued_items': []
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–¥–∞–Ω–Ω–æ–º –°–ò–ó
    for item in issued_items:
        item_data = {
            'id': item.id,
            'siz_name': item.siz.name,
            'siz_classification': item.siz.classification,
            'issue_date': item.issue_date.strftime('%d.%m.%Y'),
            'quantity': item.quantity,
            'wear_percentage': item.wear_percentage,
            'is_returned': item.is_returned,
            'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None,
            'notes': item.notes,
            'condition': item.condition
        }
        result['issued_items'].append(item_data)

    return JsonResponse(result)


# directory/views/siz_issued.py

def export_personal_card_pdf(request, employee_id):
    """
    üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF —Å –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π
    """
    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –°–ò–ó
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó
    selected_norm_ids = request.GET.getlist('selected_norms')

    # üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if not selected_norm_ids and employee.position:
        from directory.models.siz import SIZNorm
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        all_norms = SIZNorm.objects.filter(
            position=employee.position
        ).values_list('id', flat=True)
        selected_norm_ids = list(map(str, all_norms))

    selected_items = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
    if selected_norm_ids:
        from directory.models.siz import SIZNorm
        selected_norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        for norm in selected_norms:
            selected_items.append({
                'siz': norm.siz,
                'classification': norm.siz.classification,
                'quantity': norm.quantity,
            })

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    base_norms = []
    condition_groups = []

    if employee.position:
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(
            position=employee.position
        ).select_related('siz')

        # üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        base_norms = list(norms.filter(condition=''))

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
        conditions = list(set(norm.condition for norm in norms if norm.condition))

        for condition in conditions:
            condition_norms = [norm for norm in norms if norm.condition == condition]
            if condition_norms:
                condition_groups.append({
                    'name': condition,
                    'norms': condition_norms
                })

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'employee': employee,
        'issued_items': issued_items,
        'base_norms': base_norms,
        'condition_groups': condition_groups,
        'today': timezone.now().date(),
        'gender': determine_gender_from_patronymic(employee.full_name_nominative),
        'siz_sizes': get_random_siz_sizes(determine_gender_from_patronymic(employee.full_name_nominative)),
        'selected_items': selected_items,
    }

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    filename = f"personal_card_{employee.full_name_nominative.replace(' ', '_')}.pdf"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è PDF
    template_path = 'directory/siz_issued/personal_card_pdf_landscape.html'

    try:
        # üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PDF
        pdf_options = {
            'page-size': 'A4',
            'margin-top': '0.5cm',
            'margin-right': '0.5cm',
            'margin-bottom': '0.5cm',
            'margin-left': '0.5cm',
            'encoding': "UTF-8",
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        return render_to_pdf(
            template_path=template_path,
            context=context,
            filename=filename,
            as_attachment=True,
            pdf_options=pdf_options
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

        messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return redirect('directory:siz:siz_personal_card', employee_id=employee_id)