from django.views.generic import FormView, DetailView, UpdateView, ListView
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.urls import reverse_lazy, reverse
from django.http import JsonResponse, HttpResponse
from django.contrib import messages
from django.utils import timezone
from django.db.models import Q, F, Sum, Case, When, Value, IntegerField
from django.views.decorators.http import require_GET

from directory.models.siz import SIZ, SIZNorm
from directory.models.siz_issued import SIZIssued
from directory.models.employee import Employee
from directory.models.position import Position
from directory.forms.siz_issued import SIZIssueMassForm, SIZIssueReturnForm


class SIZIssueFormView(LoginRequiredMixin, FormView):
    """
    üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    """
    template_name = 'directory/siz_issued/issue_form.html'
    form_class = SIZIssueMassForm
    success_url = reverse_lazy('directory:siz:siz_list')

    def get_form_kwargs(self):
        """
        üîë –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
        """
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ kwargs
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            kwargs['employee_id'] = employee_id

        return kwargs

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ò–ó
        issued_items = form.save()

        if issued_items:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            employee = form.cleaned_data['employee']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
            success_message = f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.full_name_dative} –≤—ã–¥–∞–Ω–æ {len(issued_items)} –°–ò–ó"
            messages.success(self.request, success_message)

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            return redirect('directory:siz:siz_personal_card', employee_id=employee.pk)
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            messages.warning(self.request, "‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –°–ò–ó –¥–ª—è –≤—ã–¥–∞—á–∏")

        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        """
        context = super().get_context_data(**kwargs)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context['title'] = "–í—ã–¥–∞—á–∞ –°–ò–ó"

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            try:
                employee = Employee.objects.get(pk=employee_id)
                context['employee'] = employee
                context['title'] = f"–í—ã–¥–∞—á–∞ –°–ò–ó –¥–ª—è {employee.full_name_nominative}"
            except Employee.DoesNotExist:
                pass

        return context


class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    """
    üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó
    """
    model = Employee
    template_name = 'directory/siz_issued/personal_card.html'
    context_object_name = 'employee'

    def get_object(self, queryset=None):
        """
        üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
        """
        employee_id = self.kwargs.get('employee_id')
        return get_object_or_404(
            Employee.objects.select_related('position', 'organization', 'subdivision', 'department'),
            pk=employee_id
        )

    def get_context_data(self, **kwargs):
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        """
        context = super().get_context_data(**kwargs)
        employee = self.object

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context['title'] = f"–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {employee.full_name_nominative}"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if employee.position:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
            norms = SIZNorm.objects.filter(
                position=employee.position
            ).select_related('siz').order_by('condition', 'order', 'siz__name')

            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–æ—Ä–º—ã –Ω–∞ –±–∞–∑–æ–≤—ã–µ (–±–µ–∑ —É—Å–ª–æ–≤–∏–π) –∏ –ø–æ —É—Å–ª–æ–≤–∏—è–º
            base_norms = norms.filter(condition='')

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            conditions = norms.exclude(condition='').values_list('condition', flat=True).distinct()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –Ω–æ—Ä–º –ø–æ —É—Å–ª–æ–≤–∏—è–º
            condition_groups = []
            for condition in conditions:
                condition_norms = norms.filter(condition=condition)
                condition_groups.append({
                    'name': condition,
                    'norms': condition_norms
                })

            context['base_norms'] = base_norms
            context['condition_groups'] = condition_groups

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        issued_items = SIZIssued.objects.filter(
            employee=employee
        ).select_related('siz').order_by('-issue_date')

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ) –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ
        active_items = issued_items.filter(is_returned=False)
        returned_items = issued_items.filter(is_returned=True)

        context['issued_items'] = issued_items
        context['active_items'] = active_items
        context['returned_items'] = returned_items

        return context


class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    """
    üîô –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    model = SIZIssued
    form_class = SIZIssueReturnForm
    template_name = 'directory/siz_issued/return_form.html'

    def get_success_url(self):
        """
        üîÑ URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        """
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.pk})

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
        """
        response = super().form_valid(form)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
        employee = self.object.employee
        siz = self.object.siz
        success_message = f"‚úÖ –°–ò–ó '{siz.name}' –æ—Ç {self.object.issue_date.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        messages.success(self.request, success_message)

        return response

    def get_context_data(self, **kwargs):
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        """
        context = super().get_context_data(**kwargs)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º –°–ò–ó
        issued_item = self.object
        context['title'] = f"–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó"
        context['siz_name'] = issued_item.siz.name
        context['issue_date'] = issued_item.issue_date
        context['employee'] = issued_item.employee

        return context


@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    """
    üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    """
    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –°–ò–ó, –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    result = {
        'employee_id': employee.id,
        'employee_name': employee.full_name_nominative,
        'position': employee.position.position_name if employee.position else "",
        'organization': employee.organization.short_name_ru,
        'issued_items': []
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–¥–∞–Ω–Ω–æ–º –°–ò–ó
    for item in issued_items:
        item_data = {
            'id': item.id,
            'siz_name': item.siz.name,
            'siz_classification': item.siz.classification,
            'issue_date': item.issue_date.strftime('%d.%m.%Y'),
            'quantity': item.quantity,
            'wear_percentage': item.wear_percentage,
            'is_returned': item.is_returned,
            'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None,
            'notes': item.notes,
            'condition': item.condition
        }
        result['issued_items'].append(item_data)

    return JsonResponse(result)