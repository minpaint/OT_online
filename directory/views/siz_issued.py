# üìÅ directory/views/siz_issued.py
from django.views.generic import CreateView, DetailView, FormView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse_lazy, reverse
from django.http import JsonResponse, HttpResponse
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required
from django.db.models import Q, Count
from django.template.loader import get_template
from django.utils import timezone
from xhtml2pdf import pisa
from io import BytesIO

from django.contrib.staticfiles import finders
import os

from directory.models import Employee, SIZ, SIZNorm, SIZIssued, Position
from directory.forms.siz_issued import SIZIssueForm, SIZIssueMassForm, SIZIssueReturnForm


class SIZIssueFormView(LoginRequiredMixin, CreateView):
    """
    üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    """
    model = SIZIssued
    form_class = SIZIssueForm
    template_name = 'directory/siz_issued/issue_form.html'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–∏ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_form_kwargs(self):
        """
        üìã –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º—É
        """
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user

        # –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä employee_id, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            kwargs['employee_id'] = employee_id

        return kwargs

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í—ã–¥–∞—á–∞ –°–ò–ó'

        # –ï—Å–ª–∏ –µ—Å—Ç—å employee_id –≤ URL, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            employee = get_object_or_404(Employee, id=employee_id)
            context['employee'] = employee

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if employee.position:
                norms = SIZNorm.objects.filter(
                    position=employee.position
                ).select_related('siz')

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
                context['base_norms'] = norms.filter(condition='')

                condition_groups = {}
                for norm in norms.exclude(condition=''):
                    if norm.condition not in condition_groups:
                        condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)

                context['condition_groups'] = [
                    {'name': condition, 'norms': norms}
                    for condition, norms in condition_groups.items()
                ]

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {self.object.employee.full_name_nominative}"
        )

        return response


class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    """
    üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    model = Employee
    template_name = 'directory/siz_issued/personal_card.html'
    context_object_name = 'employee'

    def get_object(self):
        """
        üîç –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –µ–≥–æ ID
        """
        return get_object_or_404(Employee, id=self.kwargs.get('employee_id'))

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç

        –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:
        1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ –ø—Ä—è–º—ã–µ –Ω–æ—Ä–º—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ
        2. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä—è–º—ã–º –Ω–æ—Ä–º–∞–º
        3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Å–ª–æ–≤–∏—è–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        """
        context = super().get_context_data(**kwargs)
        context['title'] = f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {self.object.full_name_nominative}'

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –°–ò–ó
        issued_items = SIZIssued.objects.filter(
            employee=self.object
        ).select_related('siz').order_by('-issue_date')

        context['issued_items'] = issued_items

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if self.object.position:
            # üÜï –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ—Ä–º: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ
            position = self.object.position

            # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            direct_norms = SIZNorm.objects.filter(
                position=position
            ).select_related('siz')

            # 2. –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            reference_norms = Position.find_reference_norms(position.position_name)

            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–æ—Ä–º, –≥–¥–µ –∫–ª—é—á - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è siz_id + condition
            norm_dict = {}

            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä—è–º—ã–º–∏ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏)
            for norm in reference_norms:
                key = f"{norm.siz_id}_{norm.condition}"
                norm_dict[key] = norm

            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –Ω–æ—Ä–º—ã —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            for norm in direct_norms:
                key = f"{norm.siz_id}_{norm.condition}"
                norm_dict[key] = norm

            # 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
            base_norms = []
            condition_groups = {}

            for key, norm in norm_dict.items():
                if not norm.condition:
                    base_norms.append(norm)
                else:
                    if norm.condition not in condition_groups:
                        condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)

            # 5. –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (order) –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –°–ò–ó
            base_norms.sort(key=lambda x: (x.order, x.siz.name))

            context['base_norms'] = base_norms
            context['condition_groups'] = [
                {'name': condition, 'norms': sorted(norms, key=lambda x: (x.order, x.siz.name))}
                for condition, norms in condition_groups.items()
            ]

        return context


class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    """
    üîÑ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    model = SIZIssued
    form_class = SIZIssueReturnForm
    template_name = 'directory/siz_issued/return_form.html'
    pk_url_kwarg = 'siz_issued_id'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó'
        context['employee'] = self.object.employee
        context['siz_name'] = self.object.siz.name
        context['issue_date'] = self.object.issue_date

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        )

        return response


@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    """
    üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    """
    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –°–ò–ó, –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    result = {
        'employee_id': employee.id,
        'employee_name': employee.full_name_nominative,
        'position': employee.position.position_name if employee.position else "",
        'organization': employee.organization.short_name_ru,
        'issued_items': []
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–¥–∞–Ω–Ω–æ–º –°–ò–ó
    for item in issued_items:
        item_data = {
            'id': item.id,
            'siz_name': item.siz.name,
            'siz_classification': item.siz.classification,
            'issue_date': item.issue_date.strftime('%d.%m.%Y'),
            'quantity': item.quantity,
            'wear_percentage': item.wear_percentage,
            'is_returned': item.is_returned,
            'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None,
            'notes': item.notes,
            'condition': item.condition
        }
        result['issued_items'].append(item_data)

    return JsonResponse(result)


@login_required
@require_GET
def position_siz_norms(request, position_id):
    """
    üìã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ—Ä–º –°–ò–ó –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        position_id: ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–æ—Ä–º–∞—Ö –°–ò–ó
    """
    position = get_object_or_404(Position, pk=position_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    norms = SIZNorm.objects.filter(
        position=position
    ).select_related('siz')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    result = {
        'position_id': position.id,
        'position_name': position.position_name,
        'norms': []
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –Ω–æ—Ä–º–µ –°–ò–ó
    for norm in norms:
        norm_data = {
            'id': norm.id,
            'siz_id': norm.siz.id,
            'siz_name': norm.siz.name,
            'classification': norm.siz.classification,
            'quantity': norm.quantity,
            'condition': norm.condition,
            'unit': norm.siz.unit,
            'wear_period': norm.siz.wear_period
        }
        result['norms'].append(norm_data)

    return JsonResponse(result)


@login_required
def export_personal_card_pdf(request, employee_id):
    """
    üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ A4
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç xhtml2pdf –≤–º–µ—Å—Ç–æ WeasyPrint –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        HttpResponse —Å PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = get_object_or_404(Employee, id=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ—Ç–æ–¥—É get_context_data –≤ SIZPersonalCardView)
    # üìä –î–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # üìä –î–∞–Ω–Ω—ã–µ –æ –Ω–æ—Ä–º–∞—Ö –°–ò–ó
    base_norms = []
    condition_groups = []

    if employee.position:
        # üÜï –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ—Ä–º (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ SIZPersonalCardView)
        position = employee.position

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        direct_norms = SIZNorm.objects.filter(
            position=position
        ).select_related('siz')

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        reference_norms = Position.find_reference_norms(position.position_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–æ—Ä–º, –≥–¥–µ –∫–ª—é—á - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è siz_id + condition
        norm_dict = {}

        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã
        for norm in reference_norms:
            key = f"{norm.siz_id}_{norm.condition}"
            norm_dict[key] = norm

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –Ω–æ—Ä–º—ã —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        for norm in direct_norms:
            key = f"{norm.siz_id}_{norm.condition}"
            norm_dict[key] = norm

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
        condition_groups_dict = {}

        for key, norm in norm_dict.items():
            if not norm.condition:
                base_norms.append(norm)
            else:
                if norm.condition not in condition_groups_dict:
                    condition_groups_dict[norm.condition] = []
                condition_groups_dict[norm.condition].append(norm)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã
        base_norms.sort(key=lambda x: (x.order, x.siz.name))

        condition_groups = [
            {'name': condition, 'norms': sorted(norms, key=lambda x: (x.order, x.siz.name))}
            for condition, norms in condition_groups_dict.items()
        ]

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'employee': employee,
        'issued_items': issued_items,
        'base_norms': base_norms,
        'condition_groups': condition_groups,
        'title': f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {employee.full_name_nominative}',
        'is_pdf': True,  # –§–ª–∞–≥ –¥–ª—è —à–∞–±–ª–æ–Ω–∞, —á—Ç–æ —ç—Ç–æ PDF-–≤–µ—Ä—Å–∏—è
        'now': timezone.now(),  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    template = get_template('directory/siz_issued/personal_card_pdf.html')
    html_content = template.render(context)

    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
    result = BytesIO()

    # –°–æ–∑–¥–∞–µ–º PDF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º xhtml2pdf
    pdf = pisa.pisaDocument(
        BytesIO(html_content.encode("UTF-8")),
        result,
        encoding='UTF-8'
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
    if not pdf.err:
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTTP-–æ—Ç–≤–µ—Ç —Å PDF
        response = HttpResponse(result.getvalue(), content_type='application/pdf')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Content-Disposition
        employee_name = employee.full_name_nominative.replace(' ', '_')
        filename = f"siz_card_{employee.id}_{employee_name}.pdf"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        response['Content-Disposition'] = f'attachment; filename="{filename}"'

        return response

    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return HttpResponse("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF", status=500)