# üìÅ directory/views/siz_issued.py
from django.views.generic import CreateView, DetailView, FormView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse  # üÜï –î–æ–±–∞–≤–ª–µ–Ω HttpResponse
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required
from django.utils import timezone  # üÜï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç timezone
from django.template.loader import get_template  # üÜï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç get_template
from io import BytesIO  # üÜï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç BytesIO
from xhtml2pdf import pisa  # üÜï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç pisa

from directory.models import Employee, SIZIssued
from directory.forms.siz_issued import SIZIssueForm, SIZIssueMassForm, SIZIssueReturnForm


class SIZIssueFormView(LoginRequiredMixin, CreateView):
    """
    üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    """
    model = SIZIssued
    form_class = SIZIssueForm
    template_name = 'directory/siz_issued/issue_form.html'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–∏ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_form_kwargs(self):
        """
        üìã –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º—É
        """
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user

        # –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä employee_id, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            kwargs['employee_id'] = employee_id

        return kwargs

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í—ã–¥–∞—á–∞ –°–ò–ó'

        # –ï—Å–ª–∏ –µ—Å—Ç—å employee_id –≤ URL, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            employee = get_object_or_404(Employee, id=employee_id)
            context['employee'] = employee

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if employee.position:
                from directory.models.siz import SIZNorm
                norms = SIZNorm.objects.filter(
                    position=employee.position
                ).select_related('siz')

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
                context['base_norms'] = norms.filter(condition='')

                condition_groups = {}
                for norm in norms.exclude(condition=''):
                    if norm.condition not in condition_groups:
                        condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)

                context['condition_groups'] = [
                    {'name': condition, 'norms': norms}
                    for condition, norms in condition_groups.items()
                ]

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {self.object.employee.full_name_nominative}"
        )

        return response


class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    """
    üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    model = Employee
    template_name = 'directory/siz_issued/personal_card.html'
    context_object_name = 'employee'

    def get_object(self):
        """
        üîç –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –µ–≥–æ ID
        """
        return get_object_or_404(Employee, id=self.kwargs.get('employee_id'))

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {self.object.full_name_nominative}'

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –°–ò–ó
        issued_items = SIZIssued.objects.filter(
            employee=self.object
        ).select_related('siz').order_by('-issue_date')

        context['issued_items'] = issued_items

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if self.object.position:
            from directory.models.siz import SIZNorm
            norms = SIZNorm.objects.filter(
                position=self.object.position
            ).select_related('siz')

            # –ë–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã (–±–µ–∑ —É—Å–ª–æ–≤–∏–π)
            context['base_norms'] = norms.filter(condition='')

            # –ù–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
            conditions = list(set(norm.condition for norm in norms if norm.condition))
            condition_groups = []

            for condition in conditions:
                condition_norms = [norm for norm in norms if norm.condition == condition]
                if condition_norms:
                    condition_groups.append({
                        'name': condition,
                        'norms': condition_norms
                    })

            context['condition_groups'] = condition_groups

        return context


class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    """
    üîÑ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    model = SIZIssued
    form_class = SIZIssueReturnForm
    template_name = 'directory/siz_issued/return_form.html'
    pk_url_kwarg = 'siz_issued_id'

    def get_success_url(self):
        """
        üîó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –°–ò–ó
        """
        return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})

    def get_context_data(self, **kwargs):
        """
        üìä –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        context = super().get_context_data(**kwargs)
        context['title'] = '–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó'
        context['employee'] = self.object.employee
        context['siz_name'] = self.object.siz.name
        context['issue_date'] = self.object.issue_date

        return context

    def form_valid(self, form):
        """
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        response = super().form_valid(form)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
        messages.success(
            self.request,
            f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        )

        return response


@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    """
    üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    """
    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –°–ò–ó, –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    result = {
        'employee_id': employee.id,
        'employee_name': employee.full_name_nominative,
        'position': employee.position.position_name if employee.position else "",
        'organization': employee.organization.short_name_ru,
        'issued_items': []
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–¥–∞–Ω–Ω–æ–º –°–ò–ó
    for item in issued_items:
        item_data = {
            'id': item.id,
            'siz_name': item.siz.name,
            'siz_classification': item.siz.classification,
            'issue_date': item.issue_date.strftime('%d.%m.%Y'),
            'quantity': item.quantity,
            'wear_percentage': item.wear_percentage,
            'is_returned': item.is_returned,
            'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None,
            'notes': item.notes,
            'condition': item.condition
        }
        result['issued_items'].append(item_data)

    return JsonResponse(result)


@login_required
def export_personal_card_pdf(request, employee_id):
    """
    üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF

    Args:
        request: HttpRequest –æ–±—ä–µ–∫—Ç
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        HttpResponse —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º PDF-—Ñ–∞–π–ª–æ–º
    """
    from directory.utils.pdf import render_to_pdf

    employee = get_object_or_404(Employee, pk=employee_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –°–ò–ó
    issued_items = SIZIssued.objects.filter(
        employee=employee
    ).select_related('siz').order_by('-issue_date')

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    base_norms = []
    condition_groups = []

    if employee.position:
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(
            position=employee.position
        ).select_related('siz')

        # –ë–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã (–±–µ–∑ —É—Å–ª–æ–≤–∏–π)
        base_norms = list(norms.filter(condition=''))

        # –ù–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
        conditions = list(set(norm.condition for norm in norms if norm.condition))

        for condition in conditions:
            condition_norms = [norm for norm in norms if norm.condition == condition]
            if condition_norms:
                condition_groups.append({
                    'name': condition,
                    'norms': condition_norms
                })

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'employee': employee,
        'issued_items': issued_items,
        'base_norms': base_norms,
        'condition_groups': condition_groups,
        'today': timezone.now().date(),
    }

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    filename = f"personal_card_{employee.full_name_nominative.replace(' ', '_')}.pdf"

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ PDF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–π —É—Ç–∏–ª–∏—Ç—ã
    return render_to_pdf(
        template_path='directory/siz_issued/personal_card_pdf.html',
        context=context,
        filename=filename,
        as_attachment=True
    )