from django.contrib import admin
from django.urls import reverse
from django.utils.html import format_html
from directory.models.siz import SIZ, SIZNorm
from directory.models.position import Position
from directory.forms.siz import SIZForm, SIZNormForm
from import_export import resources
from import_export.admin import ImportExportModelAdmin
from django.db.models import Count, Case, When, Value, IntegerField, Q
from django.utils.translation import ngettext
from django.contrib import messages
from django.db.models.functions import Lower


class SIZResource(resources.ModelResource):
    """üîÑ –†–µ—Å—É—Ä—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –°–ò–ó"""

    class Meta:
        model = SIZ
        fields = ('name', 'classification', 'unit', 'wear_period')
        export_order = ('name', 'classification', 'unit', 'wear_period')
        import_id_fields = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏"


@admin.register(SIZ)
class SIZAdmin(ImportExportModelAdmin):
    """üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –°–ò–ó"""
    resource_class = SIZResource
    form = SIZForm
    list_display = ('name', 'classification', 'unit', 'get_wear_period', 'norms_count')
    list_filter = ('classification', 'unit')
    search_fields = ('name', 'classification')
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'classification', 'unit', 'wear_period')
        }),
    )

    def get_wear_period(self, obj):
        """üïí –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –Ω–æ—Å–∫–∏"""
        return "–î–æ –∏–∑–Ω–æ—Å–∞" if obj.wear_period == 0 else f"{obj.wear_period} –º–µ—Å."

    get_wear_period.short_description = "–°—Ä–æ–∫ –Ω–æ—Å–∫–∏"

    def norms_count(self, obj):
        """üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –°–ò–ó"""
        count = obj.norms.count()
        if count > 0:
            url = reverse('admin:directory_siznorm_changelist') + f'?siz__id__exact={obj.id}'
            return format_html('<a href="{}">{} –Ω–æ—Ä–º</a>', url, count)
        return "0 –Ω–æ—Ä–º"

    norms_count.short_description = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"


class SIZNormInline(admin.TabularInline):
    """üìã –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–æ—Ä–º –≤—ã–¥–∞—á–∏ –°–ò–ó"""
    model = SIZNorm
    extra = 1
    fields = ('siz', 'classification_display', 'unit_display', 'quantity', 'condition', 'wear_period_display')
    readonly_fields = ('classification_display', 'unit_display', 'wear_period_display')
    autocomplete_fields = ['siz']

    def classification_display(self, obj):
        """üè∑Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–ò–ó"""
        return obj.siz.classification if obj.siz else '-'

    classification_display.short_description = "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"

    def unit_display(self, obj):
        """üìè –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –°–ò–ó"""
        return obj.siz.unit if obj.siz else '-'

    unit_display.short_description = "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"

    def wear_period_display(self, obj):
        """üïí –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –Ω–æ—Å–∫–∏ –°–ò–ó"""
        if not obj.siz:
            return '-'
        return "–î–æ –∏–∑–Ω–æ—Å–∞" if obj.siz.wear_period == 0 else f"{obj.siz.wear_period} –º–µ—Å."

    wear_period_display.short_description = "–°—Ä–æ–∫ –Ω–æ—Å–∫–∏"


class SIZNormInlineForPosition(admin.TabularInline):
    """üìã –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º"""
    model = SIZNorm
    extra = 1
    fields = ('siz', 'quantity', 'condition', 'order')
    verbose_name = "–ù–æ—Ä–º–∞ –°–ò–ó"
    verbose_name_plural = "–ù–æ—Ä–º—ã –°–ò–ó"
    autocomplete_fields = ['siz']

    def get_queryset(self, request):
        """üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–æ—Ä–º –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        return super().get_queryset(request)


@admin.register(SIZNorm)
class SIZNormAdmin(admin.ModelAdmin):
    """üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–æ—Ä–º –≤—ã–¥–∞—á–∏ –°–ò–ó"""
    form = SIZNormForm
    list_display = ('position', 'siz', 'quantity', 'get_condition', 'order')
    list_filter = ('position', 'condition', 'siz')
    search_fields = ('position__position_name', 'siz__name', 'condition')
    autocomplete_fields = ['siz']
    # –£–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    change_list_template = "admin/directory/siznorm/change_list_tree.html"

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('unique_position_name', 'siz', 'quantity', 'order')
        }),
        ('–£—Å–ª–æ–≤–∏—è –≤—ã–¥–∞—á–∏', {
            'fields': ('condition',),
            'description': '–£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –≤—ã–¥–∞—á–∏ –°–ò–ó (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ –∑–∏–º–Ω–µ–µ –≤—Ä–µ–º—è", "–ü—Ä–∏ –≤–ª–∞–∂–Ω–æ–π —É–±–æ—Ä–∫–µ" –∏ —Ç.–¥.)'
        }),
    )

    def get_condition(self, obj):
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –≤—ã–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
        return obj.condition if obj.condition else "–û—Å–Ω–æ–≤–Ω–∞—è –Ω–æ—Ä–º–∞"

    get_condition.short_description = "–£—Å–ª–æ–≤–∏–µ –≤—ã–¥–∞—á–∏"

    def get_form(self, request, obj=None, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        position_id = request.GET.get('position')
        Form = super().get_form(request, obj, **kwargs)

        if position_id:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ —Å position_id
            class FormWithPosition(Form):
                def __new__(cls, *args, **kwargs):
                    kwargs['position_id'] = position_id
                    return Form(*args, **kwargs)

            return FormWithPosition
        return Form

    def changelist_view(self, request, extra_context=None):
        """
        üìã –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ—Ä–º –°–ò–ó —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏ —É—Å–ª–æ–≤–∏—è–º

        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞, –≥–¥–µ –Ω–æ—Ä–º—ã –°–ò–ó –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è:
        1. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–π/–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        2. –ü–æ —É—Å–ª–æ–≤–∏—è–º –≤—ã–¥–∞—á–∏ –°–ò–ó –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        """
        extra_context = extra_context or {}

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –Ω–æ—Ä–º—ã –°–ò–ó
        position_names = Position.objects.filter(
            siz_norms__isnull=False
        ).values_list('position_name', flat=True).distinct().order_by(Lower('position_name'))

        # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        professions_data = []

        for position_name in position_names:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            positions = Position.objects.filter(position_name=position_name)

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω–Ω—É—é (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π)
            reference_position = positions.order_by('organization__full_name_ru').first()

            if not reference_position:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            all_norms = SIZNorm.objects.filter(position=reference_position).select_related('siz', 'position')

            # –ë–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã (–±–µ–∑ —É—Å–ª–æ–≤–∏–π)
            base_norms = all_norms.filter(condition='').order_by('order', 'siz__name')

            # üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            grouped_norms = {}

            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏
            condition_norms = all_norms.exclude(condition='')

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å–ª–æ–≤–∏—è
            for norm in condition_norms:
                condition_name = norm.condition

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if condition_name not in grouped_norms:
                    grouped_norms[condition_name] = []

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º—É –≤ –≥—Ä—É–ø–ø—É, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –°–ò–ó+—É—Å–ª–æ–≤–∏–µ
                norm_key = f"{norm.siz_id}_{norm.condition}"
                exists = False
                for existing_norm in grouped_norms[condition_name]:
                    existing_key = f"{existing_norm.siz_id}_{existing_norm.condition}"
                    if existing_key == norm_key:
                        exists = True
                        break

                if not exists:
                    grouped_norms[condition_name].append(norm)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            group_norms = []
            for condition_name, norms in grouped_norms.items():
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
                sorted_norms = sorted(norms, key=lambda x: (x.order, x.siz.name))
                group_norms.append({
                    'name': condition_name,
                    'norms': sorted_norms
                })

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            profession_data = {
                'name': position_name,
                'positions': positions,
                'base_norms': base_norms,
                'group_norms': group_norms,
            }

            professions_data.append(profession_data)

        extra_context['professions'] = professions_data

        return super().changelist_view(request, extra_context)