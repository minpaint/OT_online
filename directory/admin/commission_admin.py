# directory/admin/commission_admin.py

from django.contrib import admin
from django.utils.html import format_html
from dal import autocomplete
from django.core.exceptions import ValidationError
from directory.models import Commission, CommissionMember, Employee
from directory.admin.mixins.tree_view import TreeViewMixin


class CommissionMemberInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    model = CommissionMember
    extra = 1
    fields = ['employee', 'role', 'is_active']

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è employee
        if db_field.name == 'employee':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=['commission', 'organization', 'subdivision', 'department']
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def get_formset(self, request, obj=None, **kwargs):
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ inline-—Ñ–æ—Ä–º—É
        formset = super().get_formset(request, obj, **kwargs)
        if obj:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            formset.form.base_fields['employee'].widget.forward = [
                ('commission', obj.pk),
                ('organization', obj.organization_id or ''),
                ('subdivision', obj.subdivision_id or ''),
                ('department', obj.department_id or '')
            ]
        return formset


class CommissionTreeViewMixin(TreeViewMixin):
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
    """
    change_list_template = "admin/directory/commission/change_list_tree.html"

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
    tree_settings = {
        'icons': {
            'organization': 'üè¢',
            'subdivision': 'üè≠',
            'department': 'üìÇ',
            'item': 'üõ°Ô∏è',  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'ot': 'üõ°Ô∏è',  # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∏—Å—Å–∏–π
            'eb': '‚ö°',
            'pb': 'üî•',
            'other': 'üìã'
        },
        'fields': {
            'name_field': 'name',
            'organization_field': 'organization',
            'subdivision_field': 'subdivision',
            'department_field': 'department',
        },
        'display_rules': {
            'hide_empty_branches': False,
            'hide_no_subdivision_no_department': False
        }
    }

    def get_tree_data(self, request):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–æ–º–∏—Å—Å–∏–∏.
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
        tree = super().get_tree_data(request)

        # –û–±–æ–≥–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–æ–º–∏—Å—Å–∏–π
        self._enrich_tree_with_members(tree)

        return tree

    def _enrich_tree_with_members(self, tree):
        """
        –î–æ–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∏—Å—Å–∏–π.
        """
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –≤ –¥–µ—Ä–µ–≤–µ
        for org_data in tree.values():
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            for item in org_data['items']:
                self._add_members_to_item(item)

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º
            for sub_data in org_data['subdivisions'].values():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                for item in sub_data['items']:
                    self._add_members_to_item(item)

                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
                for dept_data in sub_data['departments'].values():
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–¥–µ–ª–∞
                    for item in dept_data['items']:
                        self._add_members_to_item(item)

    def _add_members_to_item(self, item):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫ –∫–æ–º–∏—Å—Å–∏–∏.
        """
        obj = item['object']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏–µ–π
        if hasattr(obj, 'members'):
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ —Å prefetch_related
            members = obj.members.filter(is_active=True).select_related('employee')

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º
            roles = {
                'chairman': [],
                'secretary': [],
                'member': []
            }

            for member in members:
                roles[member.role].append({
                    'name': getattr(member.employee, 'full_name_nominative', str(member.employee)),
                    'position': getattr(member.employee, 'position_name', ''),
                    'role': member.get_role_display(),
                    'role_code': member.role
                })

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≤ —ç–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞
            item['members'] = {
                'chairman': roles['chairman'],
                'secretary': roles['secretary'],
                'members': roles['member'],
                'total': len(members)
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            item['commission_type'] = obj.commission_type
            item['is_active'] = obj.is_active

    def _optimize_queryset(self, queryset):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è—è prefetch_related –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        """
        qs = super()._optimize_queryset(queryset)
        return qs.prefetch_related('members', 'members__employee')


@admin.register(Commission)
class CommissionAdmin(CommissionTreeViewMixin, admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π"""
    list_display = ['name', 'commission_type_display', 'level_display', 'members_count', 'is_active', 'created_at']
    list_filter = ['is_active', 'commission_type', 'created_at']
    search_fields = ['name']
    inlines = [CommissionMemberInline]

    fieldsets = [
        (None, {'fields': ['name', 'commission_type', 'is_active']}),
        ('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ', {'fields': ['organization', 'subdivision', 'department']}),
    ]

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    autocomplete_fields = ['organization']

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        form.base_fields['subdivision'].widget = autocomplete.ModelSelect2(
            url='directory:subdivision-autocomplete',
            forward=['organization']
        )

        form.base_fields['department'].widget = autocomplete.ModelSelect2(
            url='directory:department-autocomplete',
            forward=['subdivision']
        )

        return form

    def save_formset(self, request, form, formset, change):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        instances = formset.save(commit=False)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏
        parent_obj = form.instance
        parent_obj.save()

        # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for instance in instances:
            instance.commission = parent_obj  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
            instance.save()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        for obj in formset.deleted_objects:
            obj.delete()

        formset.save_m2m()

    def commission_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'ot': 'üõ°Ô∏è',
            'eb': '‚ö°',
            'pb': 'üî•',
            'other': 'üìã'
        }
        icon = icons.get(obj.commission_type, 'üìã')
        return format_html('{} {}', icon, obj.get_commission_type_display())

    commission_type_display.short_description = '–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏'

    def level_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∏—Å—Å–∏–∏"""
        return obj.get_level_display()

    level_display.short_description = '–£—Ä–æ–≤–µ–Ω—å'

    def members_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
        count = obj.members.filter(is_active=True).count()
        return count

    members_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'

    class Media:
        js = (
            'admin/js/commission_admin.js',  # JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            'admin/js/tree_view.js',  # JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
        )
        css = {
            'all': ('admin/css/tree_view.css',)
        }


@admin.register(CommissionMember)
class CommissionMemberAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    list_display = ['employee', 'role_display', 'commission', 'is_active']
    list_filter = ['is_active', 'role', 'commission']
    search_fields = ['employee__full_name_nominative', 'commission__name']

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–µ–π
        if db_field.name == 'commission':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:commission-autocomplete',  # URL –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é...'}
            )
        elif db_field.name == 'employee':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=['commission'],
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...'}
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def role_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'chairman': 'üëë',
            'member': 'üë§',
            'secretary': 'üìù'
        }
        icon = icons.get(obj.role, 'üë§')
        return format_html('{} {}', icon, obj.get_role_display())

    role_display.short_description = '–†–æ–ª—å'

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)

        if obj and obj.commission:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            existing_roles = list(obj.commission.members.filter(
                is_active=True
            ).exclude(
                id=obj.id if obj and obj.id else None
            ).values_list('role', flat=True))

            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ñ–æ—Ä–º—ã
            form.role_choices = []
            for value, label in form.base_fields['role'].choices:
                disabled = False
                tooltip = ""
                if value in ['chairman', 'secretary'] and value in existing_roles:
                    disabled = True
                    tooltip = f"–†–æ–ª—å {label} —É–∂–µ –∑–∞–Ω—è—Ç–∞"
                form.role_choices.append((value, label, disabled, tooltip))

        return form

    def clean_form(self, request, obj=None):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        form = super().clean_form(request, obj)

        if obj and obj.is_active and obj.role in ['chairman', 'secretary']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–æ–ª–µ–π –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
            existing = CommissionMember.objects.filter(
                commission=obj.commission,
                role=obj.role,
                is_active=True
            )

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if obj.pk:
                existing = existing.exclude(id=obj.pk)

            if existing.exists():
                role_display = dict(CommissionMember.ROLE_CHOICES)[obj.role]
                self.message_user(
                    request,
                    f'–í –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π {role_display.lower()}. '
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.',
                    level='ERROR'
                )

        return form