from django.contrib import admin
from django.utils.html import format_html
from dal import autocomplete
from directory.models import Commission, CommissionMember, Employee


class CommissionMemberInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    model = CommissionMember
    extra = 1
    fields = ['employee', 'role', 'is_active']

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è employee
        if db_field.name == 'employee':
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ request
            obj = getattr(request, '_obj_', None)
            forward = []

            # –ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º forward –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if obj and obj.pk:
                forward = [
                    ('commission', obj.pk),
                    ('organization', obj.organization_id or ''),
                    ('subdivision', obj.subdivision_id or ''),
                    ('department', obj.department_id or '')
                ]

            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=forward,
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...'}
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def get_formset(self, request, obj=None, **kwargs):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ inline-—Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        formset = super().get_formset(request, obj, **kwargs)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã forward —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        if obj and obj.pk:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            if 'employee' in formset.form.base_fields:
                formset.form.base_fields['employee'].widget.forward = [
                    ('commission', obj.pk),
                    ('organization', obj.organization_id or ''),
                    ('subdivision', obj.subdivision_id or ''),
                    ('department', obj.department_id or '')
                ]
        else:
            # –î–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º forward –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 'employee' in formset.form.base_fields:
                formset.form.base_fields['employee'].widget.forward = []

        return formset


@admin.register(Commission)
class CommissionAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π"""
    list_display = ['name', 'commission_type_display', 'level_display', 'members_count', 'is_active', 'created_at']
    list_filter = ['is_active', 'commission_type', 'created_at']
    search_fields = ['name']
    inlines = [CommissionMemberInline]

    fieldsets = [
        (None, {'fields': ['name', 'commission_type', 'is_active']}),
        ('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ', {'fields': ['organization', 'subdivision', 'department']}),
    ]

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    autocomplete_fields = ['organization']

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ request –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ inline —Ñ–æ—Ä–º–∞—Ö
    def get_form(self, request, obj=None, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ request, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ inline —Ñ–æ—Ä–º–∞—Ö
        request._obj_ = obj
        return super().get_form(request, obj, **kwargs)

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        form.base_fields['subdivision'].widget = autocomplete.ModelSelect2(
            url='directory:subdivision-autocomplete',
            forward=['organization']
        )

        form.base_fields['department'].widget = autocomplete.ModelSelect2(
            url='directory:department-autocomplete',
            forward=['subdivision']
        )

        return form

    def save_formset(self, request, form, formset, change):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        instances = formset.save(commit=False)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏
        parent_obj = form.instance
        parent_obj.save()

        # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for instance in instances:
            instance.commission = parent_obj  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
            instance.save()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        for obj in formset.deleted_objects:
            obj.delete()

        formset.save_m2m()

    def commission_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'ot': 'üõ°Ô∏è',
            'eb': '‚ö°',
            'pb': 'üî•',
            'other': 'üìã'
        }
        icon = icons.get(obj.commission_type, 'üìã')
        return format_html('{} {}', icon, obj.get_commission_type_display())

    commission_type_display.short_description = '–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏'

    def level_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∏—Å—Å–∏–∏"""
        return obj.get_level_display()

    level_display.short_description = '–£—Ä–æ–≤–µ–Ω—å'

    def members_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
        count = obj.members.filter(is_active=True).count()
        return count

    members_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'

    class Media:
        js = (
            'admin/js/commission_admin.js',  # JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        )


@admin.register(CommissionMember)
class CommissionMemberAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    list_display = ['employee', 'role_display', 'commission', 'is_active']
    list_filter = ['is_active', 'role', 'commission']
    search_fields = ['employee__full_name_nominative', 'commission__name']

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–µ–π
        if db_field.name == 'commission':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:commission-autocomplete',  # URL –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é...'}
            )
        elif db_field.name == 'employee':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=['commission'],
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...'}
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def role_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'chairman': 'üëë',
            'member': 'üë§',
            'secretary': 'üìù'
        }
        icon = icons.get(obj.role, 'üë§')
        return format_html('{} {}', icon, obj.get_role_display())

    role_display.short_description = '–†–æ–ª—å'