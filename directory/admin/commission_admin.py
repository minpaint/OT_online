from django.contrib import admin
from django.utils.html import format_html
from dal import autocomplete
from django.core.exceptions import ValidationError
from directory.models import Commission, CommissionMember, Employee
from directory.admin.mixins.commission_tree_view import CommissionTreeViewMixin


class CommissionMemberInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    model = CommissionMember
    extra = 1
    fields = ['employee', 'role', 'is_active']

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª—è employee
        if db_field.name == 'employee':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=['commission', 'organization', 'subdivision', 'department']
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def get_formset(self, request, obj=None, **kwargs):
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ inline-—Ñ–æ—Ä–º—É
        formset = super().get_formset(request, obj, **kwargs)
        if obj:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            formset.form.base_fields['employee'].widget.forward = [
                ('commission', obj.pk),
                ('organization', obj.organization_id or ''),
                ('subdivision', obj.subdivision_id or ''),
                ('department', obj.department_id or '')
            ]
        return formset


@admin.register(Commission)
class CommissionAdmin(CommissionTreeViewMixin, admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π"""
    list_display = ['name', 'commission_type_display', 'level_display', 'members_count', 'is_active', 'created_at']
    list_filter = ['is_active', 'commission_type', 'created_at']
    search_fields = ['name']
    inlines = [CommissionMemberInline]

    # –¢–µ–ø–µ—Ä—å –∫–æ–º–∏—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–º –∏–∑ —Ç—Ä—ë—Ö —É—Ä–æ–≤–Ω–µ–π:
    # –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è / –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ / –æ—Ç–¥–µ–ª
    # (–ø—Ä–∏ —ç—Ç–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–¥–∞)
    fieldsets = [
        (None, {
            'fields': ['name', 'commission_type', 'is_active']
        }),
        ('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ', {
            'fields': ['organization', 'subdivision', 'department'],
            'description': (
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ / –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è / –æ—Ç–¥–µ–ª–∞. "
                "–ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ 'organization' –∏ 'subdivision'. "
                "–ï—Å–ª–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–¥–µ–ª–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ 'department'."
            )
        }),
    ]

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    autocomplete_fields = ['organization']

    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (ModelSelect2):
        form.base_fields['subdivision'].widget = autocomplete.ModelSelect2(
            url='directory:subdivision-autocomplete',
            forward=['organization']
        )
        form.base_fields['department'].widget = autocomplete.ModelSelect2(
            url='directory:department-autocomplete',
            forward=['subdivision']
        )
        return form

    def save_formset(self, request, form, formset, change):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        (–∫–æ–º–∏—Å—Å–∏—è -> —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏).
        """
        instances = formset.save(commit=False)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—É –∫–æ–º–∏—Å—Å–∏—é
        parent_obj = form.instance
        parent_obj.save()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
        for instance in instances:
            instance.commission = parent_obj
            instance.save()

        # –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        for obj in formset.deleted_objects:
            obj.delete()

        formset.save_m2m()

    def commission_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'ot': 'üõ°Ô∏è',
            'eb': '‚ö°',
            'pb': 'üî•',
            'other': 'üìã'
        }
        icon = icons.get(obj.commission_type, 'üìã')
        return format_html('{} {}', icon, obj.get_commission_type_display())
    commission_type_display.short_description = '–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏'

    def level_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–æ–º–∏—Å—Å–∏–∏"""
        return obj.get_level_display()
    level_display.short_description = '–£—Ä–æ–≤–µ–Ω—å'

    def members_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
        return obj.members.filter(is_active=True).count()
    members_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'

    class Media:
        js = (
            'directory/js/main.js',  # –∏–ª–∏ –≤–∞—à —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ä–µ–≤–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å)
        )
        css = {
            'all': ('admin/css/tree_view.css',)
        }


@admin.register(CommissionMember)
class CommissionMemberAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏"""
    list_display = ['employee', 'role_display', 'commission', 'is_active']
    list_filter = ['is_active', 'role', 'commission']
    search_fields = ['employee__full_name_nominative', 'commission__name']

    def get_model_perms(self, request):
        """
        –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ URL
        """
        return {}

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if db_field.name == 'commission':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:commission-autocomplete',
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é...'}
            )
        elif db_field.name == 'employee':
            kwargs['widget'] = autocomplete.ModelSelect2(
                url='directory:employee-for-commission-autocomplete',
                forward=['commission'],
                attrs={'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...'}
            )
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    def role_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'chairman': 'üëë',
            'member': 'üë§',
            'secretary': 'üìù'
        }
        icon = icons.get(obj.role, 'üë§')
        return format_html('{} {}', icon, obj.get_role_display())
    role_display.short_description = '–†–æ–ª—å'

    def get_form(self, request, obj=None, **kwargs):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∑–∞–Ω—è—Ç—ã–º —Ä–æ–ª—è–º
        form = super().get_form(request, obj, **kwargs)

        if obj and obj.commission:
            existing_roles = list(
                obj.commission.members.filter(is_active=True)
                .exclude(id=obj.id if obj.id else None)
                .values_list('role', flat=True)
            )

            form.role_choices = []
            for value, label in form.base_fields['role'].choices:
                disabled = False
                tooltip = ""
                # –ï—Å–ª–∏ 'chairman' –∏–ª–∏ 'secretary' —É–∂–µ –∑–∞–Ω—è—Ç—ã, –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
                if value in ['chairman', 'secretary'] and value in existing_roles:
                    disabled = True
                    tooltip = f"–†–æ–ª—å {label} —É–∂–µ –∑–∞–Ω—è—Ç–∞."
                form.role_choices.append((value, label, disabled, tooltip))
        return form

    def clean_form(self, request, obj=None):
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∏–Ω–ª–∞–π–Ω–∞.
        –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ .clean() –º–æ–¥–µ–ª–∏ CommissionMember.
        """
        return super().clean_form(request, obj)
