# üìÅ directory/admin/position.py
from django.contrib import admin  # üõ†Ô∏è –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∫–∏ Django
from directory.models.position import Position  # üëî –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ Position

@admin.register(Position)
class PositionAdmin(admin.ModelAdmin):
    """
    ‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Position (–î–æ–ª–∂–Ω–æ—Å—Ç—å).
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É.
    –ù–æ–≤–æ–µ –ø–æ–ª–µ: "–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏".
    """
    list_display = [
        'position_name',
        'organization',
        'subdivision',
        'department',
        'electrical_safety_group',
        'is_responsible_for_safety',
        'is_electrical_personnel',
        'can_be_internship_leader'
    ]
    list_filter = [
        'organization',
        'subdivision',
        'department',
        'electrical_safety_group',
        'is_responsible_for_safety',
        'is_electrical_personnel',
        'can_be_internship_leader'
    ]
    search_fields = ['position_name', 'safety_instructions_numbers']
    filter_horizontal = ['documents', 'equipment']

    fieldsets = (
        (None, {'fields': ('position_name',)}),
        ('–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å', {'fields': ('organization', 'subdivision', 'department')}),
        ('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', {'fields': (
            'safety_instructions_numbers',
            'electrical_safety_group',
            'internship_period_days',
            'is_responsible_for_safety',
            'is_electrical_personnel',
            'can_be_internship_leader'
        )}),
        ('–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', {'fields': ('documents', 'equipment'), 'classes': ('collapse',)}),
    )

    def get_queryset(self, request):
        """
        ‚ö°Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é select_related –∏ prefetch_related.
        """
        qs = super().get_queryset(request)
        return qs.select_related('organization', 'subdivision', 'department')\
                 .prefetch_related('documents', 'equipment')
