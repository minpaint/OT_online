# D:\YandexDisk\OT_online\directory\admin\position.py
"""
üëî –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Position —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ change list –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.
–õ–æ–≥–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º (–µ—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
"""

from django.contrib import admin
from django.contrib.admin.widgets import FilteredSelectMultiple
from django.utils.translation import ngettext
from django.contrib import messages
from django.shortcuts import redirect, render
from django.urls import path, reverse
from directory.models import Position
from directory.forms.position import PositionForm
from directory.admin.mixins.tree_view import TreeViewMixin
from directory.models.siz import SIZNorm, SIZ
from directory.models.medical_norm import PositionMedicalFactor
from directory.models.medical_examination import HarmfulFactor


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–ª–∞–π–Ω –¥–ª—è –°–ò–ó
class SIZNormInlineForPosition(admin.TabularInline):
    """üìã –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
    model = SIZNorm
    extra = 0  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 1 –Ω–∞ 0, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    fields = ('siz', 'classification', 'unit', 'quantity', 'wear_period', 'condition', 'order')
    readonly_fields = ('classification', 'unit', 'wear_period')
    verbose_name = "–ù–æ—Ä–º–∞ –°–ò–ó"
    verbose_name_plural = "–ù–æ—Ä–º—ã –°–ò–ó"
    autocomplete_fields = ['siz']

    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ñ–æ—Ä–º
    def get_extra(self, request, obj=None, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤, 1 –¥–ª—è –Ω–æ–≤—ã—Ö"""
        return 0 if obj else 1

    # –£–ª—É—á—à–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
    def get_queryset(self, request):
        # –í—Å–µ –Ω–æ—Ä–º—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª–æ–≤–∏—é –∏ –ø–æ—Ä—è–¥–∫—É
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–æ—Ä–º—ã (–±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –°–ò–ó)
        return super().get_queryset(request).select_related('siz').filter(
            siz__isnull=False
        ).order_by('condition', 'order')

    def classification(self, obj):
        """üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–ò–ó"""
        return obj.siz.classification if obj.siz else ""

    classification.short_description = "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"

    def unit(self, obj):
        """üìè –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –°–ò–ó"""
        return obj.siz.unit if obj.siz else ""

    unit.short_description = "–ï–¥. –∏–∑–º."

    def wear_period(self, obj):
        """‚åõ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –Ω–æ—Å–∫–∏ –°–ò–ó"""
        if obj.siz:
            if obj.siz.wear_period == 0:
                return "–î–æ –∏–∑–Ω–æ—Å–∞"
            return f"{obj.siz.wear_period} –º–µ—Å."
        return ""

    wear_period.short_description = "–°—Ä–æ–∫ –Ω–æ—Å–∫–∏"

    def formfield_for_dbfield(self, db_field, **kwargs):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
        form_field = super().formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == 'quantity':
            form_field.widget.attrs['style'] = 'width: 80px;'
        if db_field.name == 'condition':
            form_field.widget.attrs['style'] = 'width: 200px;'
        if db_field.name == 'order':
            form_field.widget.attrs['style'] = 'width: 60px;'
        return form_field


# –ù–æ–≤—ã–π –∏–Ω–ª–∞–π–Ω –¥–ª—è –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤
class PositionMedicalFactorInline(admin.TabularInline):
    """üè• –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    model = PositionMedicalFactor
    extra = 0
    fields = ('harmful_factor', 'examination_type', 'periodicity', 'periodicity_override', 'is_disabled', 'notes')
    readonly_fields = ('examination_type', 'periodicity')
    verbose_name = "–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    verbose_name_plural = "–í—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤"
    autocomplete_fields = ['harmful_factor']

    def get_extra(self, request, obj=None, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤, 1 –¥–ª—è –Ω–æ–≤—ã—Ö"""
        return 0 if obj else 1

    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        return super().get_queryset(request).select_related(
            'harmful_factor', 'harmful_factor__examination_type'
        ).filter(
            harmful_factor__isnull=False
        ).order_by('harmful_factor__short_name')

    def examination_type(self, obj):
        """üè• –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"""
        return obj.harmful_factor.examination_type.name if obj.harmful_factor and obj.harmful_factor.examination_type else ""

    examination_type.short_description = "–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"

    def periodicity(self, obj):
        """‚è±Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        if obj.harmful_factor:
            return f"{obj.harmful_factor.periodicity} –º–µ—Å."
        return ""

    periodicity.short_description = "–ë–∞–∑–æ–≤–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"

    def formfield_for_dbfield(self, db_field, **kwargs):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
        form_field = super().formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == 'periodicity_override':
            form_field.widget.attrs['style'] = 'width: 80px;'
        if db_field.name == 'notes':
            form_field.widget.attrs['style'] = 'width: 200px;'
        return form_field


@admin.register(Position)
class PositionAdmin(TreeViewMixin, admin.ModelAdmin):
    form = PositionForm
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    change_list_template = "admin/directory/position/change_list_tree.html"
    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–æ—Ä–º
    change_form_template = "admin/directory/position/change_form.html"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'position_name',
                'organization',
                'subdivision',
                'department',
                'commission_role',
                'is_responsible_for_safety',
                'can_be_internship_leader',
                'can_sign_orders',
                'is_electrical_personnel',
            )
        }),
        ('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', {
            'fields': (
                'contract_work_name',
                'safety_instructions_numbers',
                'contract_safety_instructions',
                'electrical_safety_group',
                'internship_period_days',
            )
        }),
        ('–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', {
            'fields': ('documents', 'equipment'),
            'description': 'üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
            'classes': ('collapse',)
        }),
    )

    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    list_filter = ['organization', 'subdivision', 'department']
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    list_display = []
    search_fields = [
        'position_name',
        'safety_instructions_numbers'
    ]

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    tree_settings = {
        'icons': {
            'organization': 'üè¢',
            'subdivision': 'üè≠',
            'department': 'üìÇ',
            'position': 'üëî',  # –ë–∞–∑–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é)
            'employee': 'üë§',
            'no_subdivision': 'üèóÔ∏è',
            'no_department': 'üìÅ'
        },
        'fields': {
            'name_field': 'position_name',
            'organization_field': 'organization',
            'subdivision_field': 'subdivision',
            'department_field': 'department'
        },
        'display_rules': {
            'hide_empty_branches': False,
            'hide_no_subdivision_no_department': False
        }
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω—ã –¥–ª—è –°–ò–ó –∏ –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤
    inlines = [
        SIZNormInlineForPosition,
        PositionMedicalFactorInline,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –¥–ª—è –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    ]

    class Media:
        css = {
            'all': ('admin/css/widgets.css', 'admin/css/position_siz_norms.css',)
        }
        js = [
            'admin/js/jquery.init.js',
            'admin/js/core.js',
            'admin/js/SelectBox.js',
            'admin/js/SelectFilter2.js',
            'admin/js/position_siz_norms.js',  # JS —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–º–∏ –°–ò–ó
        ]

    def get_profession_icon(self, position_name):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ–¥–∂–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—è
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ—Ç–æ–¥—É –≤ MedicalExaminationNormAdmin
        """
        position_name_lower = position_name.lower()

        # –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        profession_icons = {
            '–¥–∏—Ä–µ–∫—Ç–æ—Ä': 'üë®‚Äçüíº',
            '–¥–∏—Ä–µ–∫—Ç—Ä': 'üë®‚Äçüíº',  # –î–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
            '–Ω–∞—á–∞–ª—å–Ω–∏–∫': 'üë®‚Äçüíº',
            '–∑–∞–º': 'üë®‚Äçüíº',
            '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª': 'üë®‚Äçüíº',
            '–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π': 'üëî',
            '–≥–ª–∞–≤–Ω—ã–π': 'üëî',
            '–±—É—Ö–≥–∞–ª—Ç–µ—Ä': 'üíº',
            '—ç–∫–æ–Ω–æ–º–∏—Å—Ç': 'üìä',
            '—Ñ–∏–Ω–∞–Ω—Å': 'üí∞',
            '—é—Ä–∏—Å—Ç': '‚öñÔ∏è',
            '–∞–¥–≤–æ–∫–∞—Ç': '‚öñÔ∏è',
            '–∏–Ω–∂–µ–Ω–µ—Ä': 'üë∑‚Äç‚ôÇÔ∏è',
            '—Ç–µ—Ö–Ω–∏–∫': 'üîß',
            '–º–µ—Ö–∞–Ω–∏–∫': 'üîß',
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª': 'üèóÔ∏è',
            '—ç–ª–µ–∫—Ç—Ä–∏–∫': '‚ö°',
            '—ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–µ—Ä': '‚ö°',
            '—Å–≤–∞—Ä—â–∏–∫': 'üî•',
            '—Å–ª–µ—Å–∞—Ä—å': 'üî®',
            '–≤–æ–¥–∏—Ç–µ–ª—å': 'üöó',
            '—à–æ—Ñ–µ—Ä': 'üöó',
            '—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç': 'üöú',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': 'üíª',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': 'üíª',
            'it': 'üíª',
            '–≤—Ä–∞—á': 'üë®‚Äç‚öïÔ∏è',
            '–º–µ–¥—Å–µ—Å—Ç—Ä–∞': 'üë©‚Äç‚öïÔ∏è',
            '—Ñ–µ–ª—å–¥—à–µ—Ä': 'ü©∫',
            '—É—á–∏—Ç–µ–ª—å': 'üë®‚Äçüè´',
            '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 'üë®‚Äçüè´',
            '–ø–æ–≤–∞—Ä': 'üë®‚Äçüç≥',
            '–∫–æ–Ω–¥–∏—Ç–µ—Ä': 'üç∞',
            '–ø–µ–∫–∞—Ä—å': 'üçû',
            '–æ—Ö—Ä–∞–Ω–Ω–∏–∫': 'üëÆ',
            '—Å–µ–∫—Ä–µ—Ç–∞—Ä': 'üìù',
            '–º–µ–Ω–µ–¥–∂–µ—Ä': 'üìã',
            '–∫–ª–∞–¥–æ–≤—â–∏–∫': 'üì¶',
            '—É–±–æ—Ä—â–∏': 'üßπ',
            '–≥—Ä—É–∑—á–∏–∫': 'üì¶',
            '—Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π': 'üõ†Ô∏è',
        }

        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for key, icon in profession_icons.items():
            if key in position_name_lower:
                return icon

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        return 'üëî'

    def get_urls(self):
        """üîó –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π URL –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–æ—Ä–º –°–ò–ó"""
        urls = super().get_urls()
        custom_urls = [
            path(
                '<path:object_id>/copy_reference_norms/',
                self.admin_site.admin_view(self.copy_reference_norms_view),
                name='position_copy_reference_norms',
            ),
        ]
        return custom_urls + urls

    def copy_reference_norms_view(self, request, object_id):
        """üë• View –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –≤ —Ç–µ–∫—É—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å

        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        –∏ —Ç–æ–ª—å–∫–æ –≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
        –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤—ã–¥–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –°–ò–ó.
        """
        position = self.get_object(request, object_id)
        if not position:
            messages.error(request, "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return redirect('admin:directory_position_change', object_id)

        # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        reference_norms = Position.find_reference_norms(position.position_name)

        if not reference_norms.exists():
            messages.warning(request,
                             f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{position.position_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —É –Ω–∏—Ö –µ—Å—Ç—å –Ω–æ—Ä–º—ã –°–ò–ó.")
            return redirect('admin:directory_position_change', object_id)

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –Ω–æ—Ä–º—ã —É —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        SIZNorm.objects.filter(position=position, siz__isnull=True).delete()

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ—Ä–º
        added_norms = set()
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        created_count = 0
        updated_count = 0
        errors_count = 0

        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã
        for norm in reference_norms:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ—Ä–º—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –°–ò–ó
            if not norm.siz:
                continue

            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ siz.id –∏ condition
            norm_key = (norm.siz.id, norm.condition)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Ç–∞–∫—É—é –Ω–æ—Ä–º—É
            if norm_key not in added_norms:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–æ—Ä–º–∞
                    existing_norm = SIZNorm.objects.filter(
                        position=position,
                        siz=norm.siz,
                        condition=norm.condition
                    ).first()

                    if existing_norm:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ—Ä–º—É
                        existing_norm.quantity = norm.quantity
                        existing_norm.order = norm.order
                        existing_norm.save()
                        updated_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–æ—Ä–º—É
                        SIZNorm.objects.create(
                            position=position,
                            siz=norm.siz,
                            quantity=norm.quantity,
                            condition=norm.condition,
                            order=norm.order
                        )
                        created_count += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –Ω–∞–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ—Ä–º
                    added_norms.add(norm_key)
                except Exception as e:
                    errors_count += 1
                    messages.error(
                        request,
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ—Ä–º—ã –¥–ª—è {norm.siz.name}: {str(e)}"
                    )

        # –ü–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –Ω–æ—Ä–º—ã
        SIZNorm.objects.filter(position=position, siz__isnull=True).delete()

        if created_count > 0 or updated_count > 0:
            messages.success(
                request,
                f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}." +
                (f" –û—à–∏–±–æ–∫: {errors_count}." if errors_count > 0 else "")
            )
        else:
            messages.info(
                request,
                "–ù–µ –±—ã–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ—Ä–º—ã –°–ò–ó. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –Ω–æ—Ä–º—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ —É —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –Ω–æ—Ä–º—ã." +
                (f" –û—à–∏–±–æ–∫: {errors_count}." if errors_count > 0 else "")
            )

        # –ü–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–æ—Ä–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        return redirect('admin:directory_position_change', object_id)

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–µ–π many-to-many —Å FilteredSelectMultiple
        """
        if db_field.name == "documents":
            kwargs["widget"] = FilteredSelectMultiple(
                verbose_name="–î–û–°–¢–£–ü–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´",
                is_stacked=False
            )
        if db_field.name == "equipment":
            kwargs["widget"] = FilteredSelectMultiple(
                verbose_name="–î–û–°–¢–£–ü–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï",
                is_stacked=False
            )
        return super().formfield_for_manytomany(db_field, request, **kwargs)

    def get_queryset(self, request):
        """
        üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        qs = super().get_queryset(request).select_related(
            'organization',
            'subdivision',
            'department'
        ).prefetch_related(
            'documents',
            'equipment',
            'siz_norms',  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –°–ò–ó –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            'medical_factors'  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        )
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)
        return qs

    def get_form(self, request, obj=None, **kwargs):
        """
        üîë –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º get_form –¥–ª—è:
        1) –ü–µ—Ä–µ–¥–∞—á–∏ request.user –≤ —Ñ–æ—Ä–º—É
        2) –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ M2M-–ø–æ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        """
        Form = super().get_form(request, obj, **kwargs)

        class PositionFormWithUser(Form):
            def __init__(self, *args, **kwargs):
                self.user = request.user
                super().__init__(*args, **kwargs)
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º labels –∏ help_text –¥–ª—è –ø–æ–ª–µ–π
                self.fields['documents'].label = "–î–û–°–¢–£–ü–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´"
                self.fields['equipment'].label = "–î–û–°–¢–£–ü–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï"
                self.fields[
                    'documents'].help_text = "–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ 'Control' (–∏–ª–∏ 'Command' –Ω–∞ Mac), —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π."
                self.fields[
                    'equipment'].help_text = "–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ 'Control' (–∏–ª–∏ 'Command' –Ω–∞ Mac), —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π."
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
                if hasattr(request.user, 'profile'):
                    allowed_orgs = request.user.profile.organizations.all()
                    # –ë–∞–∑–æ–≤—ã–µ queryset
                    docs_qs = self.fields['documents'].queryset
                    equip_qs = self.fields['equipment'].queryset
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
                    if obj:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
                        docs_qs = docs_qs.filter(organization=obj.organization)
                        equip_qs = equip_qs.filter(organization=obj.organization)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
                    docs_qs = docs_qs.filter(organization__in=allowed_orgs).distinct().order_by('name')
                    equip_qs = equip_qs.filter(
                        organization__in=allowed_orgs).distinct().order_by('equipment_name')
                    self.fields['documents'].queryset = docs_qs
                    self.fields['equipment'].queryset = equip_qs

        return PositionFormWithUser

    def get_additional_node_data(self, obj):
        """
        ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        profession_icon = self.get_profession_icon(obj.position_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º
        has_reference_norms = Position.find_reference_norms(obj.position_name).exists()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º, –Ω–æ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —É—Å–ª–æ–≤–∏—è–º
        total_norms_count = obj.siz_norms.count()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤
        medical_factors_count = obj.medical_factors.count()

        return {
            # –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–Ω–æ–≤–æ–µ!)
            'profession_icon': profession_icon,

            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'is_responsible_for_safety': obj.is_responsible_for_safety,
            'can_be_internship_leader': obj.can_be_internship_leader,
            'is_electrical_personnel': obj.is_electrical_personnel,

            # –°—á–µ—Ç—á–∏–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            'documents_count': obj.documents.count(),
            'equipment_count': obj.equipment.count(),

            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°–ò–ó
            'total_siz_norms': total_norms_count,
            'has_reference_norms': has_reference_norms,

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞—Ö
            'medical_factors_count': medical_factors_count,
        }

    def has_module_permission(self, request):
        """
        üëÆ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
        """
        if request.user.is_superuser:
            return True
        if hasattr(request.user, 'profile'):
            return request.user.profile.organizations.exists()
        return False

    def has_view_permission(self, request, obj=None):
        """
        üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
        """
        if request.user.is_superuser:
            return True
        if not obj:
            return True
        if hasattr(request.user, 'profile'):
            return obj.organization in request.user.profile.organizations.all()
        return False

    def has_change_permission(self, request, obj=None):
        """
        ‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        return self.has_view_permission(request, obj)

    def has_delete_permission(self, request, obj=None):
        """
        üóëÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        """
        return self.has_view_permission(request, obj)