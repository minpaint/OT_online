# directory/admin/position.py

from django.contrib import admin
from django.db.models import Q
from directory.models import Position
from directory.forms import PositionForm


@admin.register(Position)
class PositionAdmin(admin.ModelAdmin):
    """
    üëî –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Position.
    """
    form = PositionForm

    # –¢–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è:
    list_display = [
        'position_name',   # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        'organization',    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        'subdivision',     # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        'department',      # –û—Ç–¥–µ–ª
    ]

    # –£–±–µ—Ä—ë–º –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è; –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ:
    list_filter = [
        'organization',
        'subdivision',
        'department',
    ]

    # –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–≤–∏–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –Ω–æ–º–µ—Ä–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
    search_fields = [
        'position_name',
        'safety_instructions_numbers'
    ]

    # –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ filter_horizontal
    filter_horizontal = ['documents', 'equipment']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É fieldsets, —á—Ç–æ–±—ã –ø–æ–ª—è –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–æ—Ä–º–µ
    fieldsets = (
        (None, {
            'fields': ('position_name', 'commission_role')
        }),
        ('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', {
            'fields': ('organization', 'subdivision', 'department')
        }),
        ('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', {
            'fields': (
                'safety_instructions_numbers',
                'electrical_safety_group',
                'internship_period_days',
                'is_responsible_for_safety',
                'is_electrical_personnel',
                'can_be_internship_leader'
            ),
            'description': 'üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ø—É—Å–∫–æ–≤'
        }),
        ('üìã –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞', {
            'fields': (
                'contract_work_name',
                'contract_safety_instructions'
            ),
            'description': 'üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–∞—Ö –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞',
            'classes': ('collapse',)
        }),
        ('–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', {
            'fields': ('documents', 'equipment'),
            'description': 'üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
            'classes': ('collapse',)
        }),
    )

    def get_form(self, request, obj=None, **kwargs):
        """
        üîë –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º get_form, —á—Ç–æ–±—ã:
         1) –ü–µ—Ä–µ–¥–∞—Ç—å request.user –≤ —Ñ–æ—Ä–º—É (–¥–ª—è –º–∏–∫—Å–∏–Ω–∞).
         2) –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å M2M-–ø–æ–ª—è (documents –∏ equipment) –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            –∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        OriginalForm = super().get_form(request, obj, **kwargs)

        class PositionFormWithUser(OriginalForm):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['user'] = request.user
                super().__init__(*args, **inner_kwargs)

                if hasattr(request.user, 'profile'):
                    allowed_orgs = request.user.profile.organizations.all()

                    # –ë–∞–∑–æ–≤—ã–µ queryset –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                    docs_qs = self2.fields['documents'].queryset
                    equip_qs = self2.fields['equipment'].queryset

                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
                    if obj:
                        docs_qs = docs_qs.filter(organization=obj.organization)
                        equip_qs = equip_qs.filter(organization=obj.organization)

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    docs_qs = docs_qs.filter(organization__in=allowed_orgs).order_by('name')
                    equip_qs = equip_qs.filter(organization__in=allowed_orgs).order_by('equipment_name')

                    self2.fields['documents'].queryset = docs_qs
                    self2.fields['equipment'].queryset = equip_qs

        return PositionFormWithUser

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ many-to-many —Å FilteredSelectMultiple."""
        if db_field.name == "documents":
            kwargs["widget"] = admin.widgets.FilteredSelectMultiple(
                "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
                is_stacked=False
            )
        if db_field.name == "equipment":
            kwargs["widget"] = admin.widgets.FilteredSelectMultiple(
                "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                is_stacked=False
            )
        return super().formfield_for_manytomany(db_field, request, **kwargs)

    def get_queryset(self, request):
        """
        üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
        """
        qs = super().get_queryset(request)
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)
        return qs

    class Media:
        css = {
            'all': [
                'admin/css/widgets.css',
            ]
        }
        js = [
            'admin/js/jquery.init.js',
            'admin/js/SelectFilter2.js',
        ]
