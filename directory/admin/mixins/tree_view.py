from django.contrib import admin
from django.db.models import Q
from typing import Dict, Any, List


class TreeViewMixin:
    """
    üå≥ –ú–∏–∫—Å–∏–Ω –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
    """

    def get_tree_data(self, request) -> Dict[str, Any]:
        """
        üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        """
        # –ü–æ–ª—É—á–∞–µ–º queryset —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        queryset = self.get_queryset(request)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        queryset = self._optimize_queryset(queryset)

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞
        tree = {}

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π
        fields = self.tree_settings['fields']
        org_field = fields['organization_field']
        sub_field = fields['subdivision_field']
        dept_field = fields['department_field']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        organizations = set(getattr(obj, org_field) for obj in queryset if getattr(obj, org_field))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
        for org in organizations:
            if org not in tree:
                tree[org] = {
                    'items': [],
                    'subdivisions': {}
                }

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            org_objects = [obj for obj in queryset if getattr(obj, org_field) == org]

            for obj in org_objects:
                sub = getattr(obj, sub_field)
                dept = getattr(obj, dept_field)

                # –û–±—ä–µ–∫—Ç—ã –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ç–¥–µ–ª–∞
                if not sub and not dept:
                    if not self.tree_settings['display_rules']['hide_no_subdivision_no_department']:
                        tree[org]['items'].append(obj)
                    continue

                # –û–±—ä–µ–∫—Ç—ã —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
                if sub:
                    if sub not in tree[org]['subdivisions']:
                        tree[org]['subdivisions'][sub] = {
                            'items': [],
                            'departments': {}
                        }

                    if dept:
                        # –û–±—ä–µ–∫—Ç—ã —Å –æ—Ç–¥–µ–ª–æ–º
                        if dept not in tree[org]['subdivisions'][sub]['departments']:
                            tree[org]['subdivisions'][sub]['departments'][dept] = []
                        tree[org]['subdivisions'][sub]['departments'][dept].append(obj)
                    else:
                        # –û–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
                        tree[org]['subdivisions'][sub]['items'].append(obj)
                else:
                    # –û–±—ä–µ–∫—Ç—ã –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –Ω–æ —Å –æ—Ç–¥–µ–ª–æ–º
                    if 'no_subdivision' not in tree[org]['subdivisions']:
                        tree[org]['subdivisions']['no_subdivision'] = {
                            'items': [],
                            'departments': {}
                        }
                    if dept:
                        if dept not in tree[org]['subdivisions']['no_subdivision']['departments']:
                            tree[org]['subdivisions']['no_subdivision']['departments'][dept] = []
                        tree[org]['subdivisions']['no_subdivision']['departments'][dept].append(obj)

        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –≤–µ—Ç–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if self.tree_settings['display_rules']['hide_empty_branches']:
            tree = self._remove_empty_branches(tree)

        return tree

    def _remove_empty_branches(self, tree):
        """
        üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –≤–µ—Ç–æ–∫ –¥–µ—Ä–µ–≤–∞
        """
        result = {}
        for org, org_data in tree.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            has_items = bool(org_data['items'])
            has_subdivisions = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            subdivisions = {}
            for sub, sub_data in org_data['subdivisions'].items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
                if sub_data['items'] or sub_data['departments']:
                    has_subdivisions = True
                    subdivisions[sub] = sub_data

            if has_items or has_subdivisions:
                result[org] = {
                    'items': org_data['items'],
                    'subdivisions': subdivisions
                }

        return result

    def _optimize_queryset(self, queryset):
        """
        üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ select_related
        """
        fields = self.tree_settings['fields']
        related_fields = [
            fields['organization_field'],
            fields['subdivision_field'],
            fields['department_field']
        ]
        return queryset.select_related(*related_fields)

    def changelist_view(self, request, extra_context=None):
        """
        üëÅÔ∏è –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        """
        extra_context = extra_context or {}
        extra_context.update({
            'tree': self.get_tree_data(request),
            'tree_settings': self.tree_settings
        })
        return super().changelist_view(request, extra_context)