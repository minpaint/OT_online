# directory/admin/employee.py
from django.contrib import admin
from django.contrib import messages
from django.shortcuts import redirect, render
from django.urls import path
from django.http import HttpResponse
from tablib import Dataset

from directory.models import Employee
from directory.models.commission import CommissionMember
from directory.forms.employee import EmployeeForm
from directory.admin.mixins.tree_view import TreeViewMixin
from directory.resources.employee import EmployeeResource


@admin.register(Employee)
class EmployeeAdmin(TreeViewMixin, admin.ModelAdmin):
    """
    üë§ –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Employee —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –û–¢, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å 
    —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏, –†–æ–ª—å –≤ –∫–æ–º–∏—Å—Å–∏–∏, –°—Ç–∞—Ç—É—Å.
    """
    form = EmployeeForm

    change_list_template = "admin/directory/employee/change_list_tree.html"

    tree_settings = {
        'icons': {
            'organization': 'üè¢',
            'subdivision': 'üè≠',
            'department': 'üìÇ',
            'employee': 'üë§',
            'no_subdivision': 'üèóÔ∏è',
            'no_department': 'üìÅ'
        },
        'fields': {
            'name_field': 'name_with_position',
            'organization_field': 'organization',
            'subdivision_field': 'subdivision',
            'department_field': 'department'
        },
        'display_rules': {
            'hide_empty_branches': False,
            'hide_no_subdivision_no_department': False
        }
    }

    list_display = [
        'full_name_nominative',
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
    ]
    list_filter = [
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
    ]
    search_fields = [
        'full_name_nominative',
        'position__position_name'
    ]

    fields = [
        'full_name_nominative',
        'date_of_birth',
        'place_of_residence',
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
        'hire_date',
        'start_date',
        'height',
        'clothing_size',
        'shoe_size',
        'is_contractor',
    ]

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)
        return qs.select_related(
            'organization',
            'subdivision',
            'department',
            'position'
        ).prefetch_related(
            'commission_roles',
            'commission_roles__commission'
        )

    def get_form(self, request, obj=None, **kwargs):
        Form = super().get_form(request, obj, **kwargs)

        class FormWithUser(Form):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['user'] = request.user
                super().__init__(*args, **inner_kwargs)

        return FormWithUser

    def get_urls(self):
        """üîó –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
        urls = super().get_urls()
        custom_urls = [
            path('import/', self.admin_site.admin_view(self.import_view), name='directory_employee_import'),
            path('export/', self.admin_site.admin_view(self.export_view), name='directory_employee_export'),
        ]
        return custom_urls + urls

    def get_node_additional_data(self, obj):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–µ.
        –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö.
        """
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        additional_data = {
            'status': obj.status,
            'status_display': obj.get_status_display(),
            'status_emoji': self._get_status_emoji(obj.status),
        }

        # –ê—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
        if obj.position:
            additional_data['is_responsible_for_safety'] = getattr(obj.position, 'is_responsible_for_safety', False)
            additional_data['can_be_internship_leader'] = getattr(obj.position, 'can_be_internship_leader', False)

        # –†–æ–ª–∏ –≤ –∫–æ–º–∏—Å—Å–∏—è—Ö
        commission_roles = CommissionMember.objects.filter(
            employee=obj,
            is_active=True
        ).select_related('commission')

        # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏
        additional_data['commission_roles'] = []
        for role in commission_roles:
            additional_data['commission_roles'].append({
                'commission_name': role.commission.name,
                'role': role.role,
                'role_display': role.get_role_display(),
                'role_emoji': self._get_commission_role_emoji(role.role)
            })

        return additional_data

    def _get_status_emoji(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        status_emojis = {
            'candidate': 'üìù',
            'active': '‚úÖ',
            'maternity_leave': 'üë∂',
            'part_time': '‚åõ',
            'fired': 'üö´',
        }
        return status_emojis.get(status, '‚ùì')

    def _get_commission_role_emoji(self, role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏ –≤ –∫–æ–º–∏—Å—Å–∏–∏"""
        role_emojis = {
            'chairman': 'üó≥Ô∏è',
            'secretary': 'üìù',
            'member': 'üë•'
        }
        return role_emojis.get(role, '‚ùì')

    def import_view(self, request):
        """üì• –ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        context = self.admin_site.each_context(request)

        if request.method == 'POST':
            if 'confirm' in request.POST:
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
                dataset_data = request.session.get('employee_dataset')
                if not dataset_data:
                    messages.error(request, '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.')
                    return redirect('admin:directory_employee_import')

                dataset = Dataset().load(dataset_data)
                resource = EmployeeResource()
                result = resource.import_data(dataset, dry_run=False)

                del request.session['employee_dataset']

                if result.has_errors():
                    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print("="*80)
                    print("–û–®–ò–ë–ö–ò –ò–ú–ü–û–†–¢–ê –°–û–¢–†–£–î–ù–ò–ö–û–í:")
                    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {result.totals['error']}")
                    print(f"Invalid rows count: {len(result.invalid_rows)}")

                    for idx, row in enumerate(result.invalid_rows[:5]):
                        print(f"\n--- –°—Ç—Ä–æ–∫–∞ {idx+1} ---")
                        print(f"Row object: {row}")
                        print(f"Row.__dict__: {row.__dict__ if hasattr(row, '__dict__') else 'N/A'}")
                        if hasattr(row, 'errors'):
                            for error in row.errors:
                                print(f"Error: {error.error}")
                                print(f"Traceback: {error.traceback}")

                    print(f"\nRow errors dict: {result.row_errors()}")
                    print("="*80)

                    messages.error(request, f'‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏! –°–æ–∑–¥–∞–Ω–æ: {result.totals["new"]}, –æ—à–∏–±–æ–∫: {result.totals["error"]}. –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
                else:
                    messages.success(request, f'‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: {result.totals["new"]}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result.totals["update"]}')
                return redirect('admin:directory_employee_changelist')
            else:
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞
                import_file = request.FILES.get('import_file')
                if not import_file:
                    messages.error(request, '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω')
                    return redirect('admin:directory_employee_import')

                file_format = import_file.name.split('.')[-1].lower()
                if file_format not in ['xlsx', 'xls']:
                    messages.error(request, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã XLSX –∏ XLS')
                    return redirect('admin:directory_employee_import')

                try:
                    dataset = Dataset().load(import_file.read(), format=file_format)
                    resource = EmployeeResource()
                    result = resource.import_data(dataset, dry_run=True)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                    request.session['employee_dataset'] = dataset.export('json')

                    context.update({
                        'title': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
                        'result': result,
                        'dataset': dataset,
                    })
                    return render(request, 'admin/directory/employee/import_preview.html', context)
                except Exception as e:
                    messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}')
                    return redirect('admin:directory_employee_import')

        context.update({
            'title': '–ò–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
            'subtitle': None,
        })
        return render(request, 'admin/directory/employee/import.html', context)

    def export_view(self, request):
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        from directory.models import Employee

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        organization_id = request.GET.get('organization_id')

        if organization_id:
            queryset = Employee.objects.filter(organization_id=organization_id)
        else:
            queryset = Employee.objects.all()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            queryset = queryset.filter(organization__in=allowed_orgs)

        queryset = queryset.select_related('organization', 'subdivision', 'department', 'position')

        resource = EmployeeResource()
        dataset = resource.export(queryset)

        response = HttpResponse(
            dataset.export('xlsx'),
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        response['Content-Disposition'] = 'attachment; filename="employees.xlsx"'
        return response