# directory/admin/employee.py
from django.contrib import admin
from directory.models import Employee
from directory.models.commission import CommissionMember
from directory.forms.employee import EmployeeForm
from directory.admin.mixins.tree_view import TreeViewMixin


@admin.register(Employee)
class EmployeeAdmin(TreeViewMixin, admin.ModelAdmin):
    """
    üë§ –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Employee —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –û–¢, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å 
    —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏, –†–æ–ª—å –≤ –∫–æ–º–∏—Å—Å–∏–∏, –°—Ç–∞—Ç—É—Å.
    """
    form = EmployeeForm

    change_list_template = "admin/directory/employee/change_list_tree.html"

    tree_settings = {
        'icons': {
            'organization': 'üè¢',
            'subdivision': 'üè≠',
            'department': 'üìÇ',
            'employee': 'üë§',
            'no_subdivision': 'üèóÔ∏è',
            'no_department': 'üìÅ'
        },
        'fields': {
            'name_field': 'name_with_position',
            'organization_field': 'organization',
            'subdivision_field': 'subdivision',
            'department_field': 'department'
        },
        'display_rules': {
            'hide_empty_branches': False,
            'hide_no_subdivision_no_department': False
        }
    }

    list_display = [
        'full_name_nominative',
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
    ]
    list_filter = [
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
    ]
    search_fields = [
        'full_name_nominative',
        'full_name_dative',
        'position__position_name'
    ]

    fields = [
        'full_name_nominative',
        'full_name_dative',
        'date_of_birth',
        'place_of_residence',
        'organization',
        'subdivision',
        'department',
        'position',
        'contract_type',
        'status',
        'hire_date',
        'start_date',
        'height',
        'clothing_size',
        'shoe_size',
        'is_contractor',
    ]

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)
        return qs.select_related(
            'organization',
            'subdivision',
            'department',
            'position'
        ).prefetch_related(
            'commission_roles',
            'commission_roles__commission'
        )

    def get_form(self, request, obj=None, **kwargs):
        Form = super().get_form(request, obj, **kwargs)

        class FormWithUser(Form):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['user'] = request.user
                super().__init__(*args, **inner_kwargs)

        return FormWithUser

    def get_node_additional_data(self, obj):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–µ.
        –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö.
        """
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        additional_data = {
            'status': obj.status,
            'status_display': obj.get_status_display(),
            'status_emoji': self._get_status_emoji(obj.status),
        }

        # –ê—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
        if obj.position:
            additional_data['is_responsible_for_safety'] = getattr(obj.position, 'is_responsible_for_safety', False)
            additional_data['can_be_internship_leader'] = getattr(obj.position, 'can_be_internship_leader', False)

        # –†–æ–ª–∏ –≤ –∫–æ–º–∏—Å—Å–∏—è—Ö
        commission_roles = CommissionMember.objects.filter(
            employee=obj,
            is_active=True
        ).select_related('commission')

        # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏
        additional_data['commission_roles'] = []
        for role in commission_roles:
            additional_data['commission_roles'].append({
                'commission_name': role.commission.name,
                'role': role.role,
                'role_display': role.get_role_display(),
                'role_emoji': self._get_commission_role_emoji(role.role)
            })

        return additional_data

    def _get_status_emoji(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        status_emojis = {
            'candidate': 'üìù',
            'active': '‚úÖ',
            'maternity_leave': 'üë∂',
            'part_time': '‚åõ',
            'fired': 'üö´',
        }
        return status_emojis.get(status, '‚ùì')

    def _get_commission_role_emoji(self, role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏ –≤ –∫–æ–º–∏—Å—Å–∏–∏"""
        role_emojis = {
            'chairman': 'üó≥Ô∏è',
            'secretary': 'üìù',
            'member': 'üë•'
        }
        return role_emojis.get(role, '‚ùì')