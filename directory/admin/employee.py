from django.contrib import admin
from directory.models import Employee
from directory.forms.employee import EmployeeForm

# üëá –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à –º–∏–∫—Å–∏–Ω
from directory.admin.mixins.tree_view import TreeViewMixin

@admin.register(Employee)
class EmployeeAdmin(TreeViewMixin, admin.ModelAdmin):
    """
    üë§ –ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Employee.
    –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º TreeViewMixin, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    (–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Üí –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ ‚Üí –û—Ç–¥–µ–ª ‚Üí –°–æ—Ç—Ä—É–¥–Ω–∏–∫)
    –∏ –ø—Ä–∏ —ç—Ç–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å '–§–ò–û ‚Äì –¥–æ–ª–∂–Ω–æ—Å—Ç—å' –≤ –∫–æ–ª–æ–Ω–∫–µ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ".
    """
    form = EmployeeForm

    # –®–∞–±–ª–æ–Ω –¥–ª—è –¥–µ—Ä–µ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "change_list_tree.html")
    change_list_template = "admin/directory/employee/change_list_tree.html"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ä–µ–≤–∞
    tree_settings = {
        'icons': {
            'organization': 'üè¢',
            'subdivision': 'üè≠',
            'department': 'üìÇ',
            'employee': 'üë§',  # –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∏–º tree_settings.icons.item
            'no_subdivision': 'üèóÔ∏è',
            'no_department': 'üìÅ'
        },
        'fields': {
            # –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º 'name_with_position' –≤–º–µ—Å—Ç–æ 'full_name_nominative'
            'name_field': 'name_with_position',
            'organization_field': 'organization',
            'subdivision_field': 'subdivision',
            'department_field': 'department'
        },
        'display_rules': {
            'hide_empty_branches': False,
            'hide_no_subdivision_no_department': False
        }
    }

    # –û–±—ã—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    list_display = [
        'full_name_nominative',
        'organization',
        'subdivision',
        'department',
        'position',
        'is_contractor'
    ]
    list_filter = [
        'organization',
        'subdivision',
        'department',
        'position',
        'is_contractor'
    ]
    search_fields = [
        'full_name_nominative',
        'full_name_dative',
        'position__position_name'
    ]

    def get_queryset(self, request):
        """
        üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
        """
        qs = super().get_queryset(request)
        if not request.user.is_superuser and hasattr(request.user, 'profile'):
            allowed_orgs = request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)
        return qs

    def get_form(self, request, obj=None, **kwargs):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º get_form, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å request.user –≤ —Ñ–æ—Ä–º—É (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç).
        """
        Form = super().get_form(request, obj, **kwargs)

        class FormWithUser(Form):
            def __init__(self2, *args, **inner_kwargs):
                inner_kwargs['user'] = request.user
                super().__init__(*args, **inner_kwargs)

        return FormWithUser
