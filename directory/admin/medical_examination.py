# üìÇ directory/admin/medical_examination.py

import logging
from django.contrib import admin
from django.db.models import Exists, OuterRef
from django.utils.html import format_html
from django.http import HttpResponseRedirect

from directory.models.medical_examination import (
    MedicalExaminationType,
    HarmfulFactor,
    MedicalSettings,
)
from directory.models.medical_norm import (
    MedicalExaminationNorm,
    PositionMedicalFactor,
    EmployeeMedicalExamination,
)
from directory.forms.medical_examination import (
    PositionNormForm,
    HarmfulFactorNormFormSet,
)
from directory.models.position import Position

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# ------------------------------------------------------------------
# üîß –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ------------------------------------------------------------------

# MedicalExaminationType –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ

@admin.register(HarmfulFactor)
class HarmfulFactorAdmin(admin.ModelAdmin):
    list_display = ("short_name", "full_name", "periodicity")
    search_fields = ("short_name", "full_name",)

    change_list_template = "admin/directory/harmful_factor/change_list.html"

    def get_urls(self):
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            path('import/', self.import_view, name='directory_harmfulfactor_import'),
            path('export/', self.export_view, name='directory_harmfulfactor_export'),
        ]
        return custom_urls + urls

    def import_view(self, request):
        """üì• –ò–º–ø–æ—Ä—Ç –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        from django.shortcuts import render, redirect
        from django.contrib import messages
        from tablib import Dataset
        from directory.resources.harmful_factor import HarmfulFactorResource

        context = self.admin_site.each_context(request)

        if request.method == 'POST':
            if 'confirm' in request.POST:
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
                dataset_data = request.session.get('harmful_factor_dataset')
                if not dataset_data:
                    messages.error(request, '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.')
                    return redirect('admin:directory_harmfulfactor_import')

                dataset = Dataset().load(dataset_data)
                resource = HarmfulFactorResource()
                result = resource.import_data(dataset, dry_run=False)

                del request.session['harmful_factor_dataset']

                if result.has_errors():
                    messages.error(request, f'‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏! –°–æ–∑–¥–∞–Ω–æ: {result.totals["new"]}, –æ—à–∏–±–æ–∫: {result.totals["error"]}')
                else:
                    messages.success(request, f'‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: {result.totals["new"]}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result.totals["update"]}')
                return redirect('admin:directory_harmfulfactor_changelist')
            else:
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞
                import_file = request.FILES.get('import_file')
                if not import_file:
                    messages.error(request, '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω')
                    return redirect('admin:directory_harmfulfactor_import')

                file_format = import_file.name.split('.')[-1].lower()
                if file_format not in ['xlsx', 'xls']:
                    messages.error(request, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã XLSX –∏ XLS')
                    return redirect('admin:directory_harmfulfactor_import')

                try:
                    dataset = Dataset().load(import_file.read(), format=file_format)
                    resource = HarmfulFactorResource()
                    result = resource.import_data(dataset, dry_run=True)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                    request.session['harmful_factor_dataset'] = dataset.export('json')

                    context.update({
                        'title': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞ –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤',
                        'result': result,
                        'dataset': dataset,
                    })
                    return render(request, 'admin/directory/harmful_factor/import_preview.html', context)
                except Exception as e:
                    messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}')
                    return redirect('admin:directory_harmfulfactor_import')

        context.update({
            'title': '–ò–º–ø–æ—Ä—Ç –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤',
            'subtitle': None,
        })
        return render(request, 'admin/directory/harmful_factor/import.html', context)

    def export_view(self, request):
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        from django.http import HttpResponse
        from directory.resources.harmful_factor import HarmfulFactorResource

        resource = HarmfulFactorResource()
        dataset = resource.export()
        response = HttpResponse(dataset.xlsx, content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename="harmful_factors.xlsx"'
        return response


@admin.register(MedicalSettings)
class MedicalSettingsAdmin(admin.ModelAdmin):
    list_display = ("days_before_issue", "days_before_email")
    list_editable = ("days_before_issue", "days_before_email")
    list_display_links = None


# ------------------------------------------------------------------
# üìë –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã ‚Äî –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# ------------------------------------------------------------------

@admin.register(MedicalExaminationNorm)
class MedicalExaminationNormAdmin(admin.ModelAdmin):
    change_list_template = "admin/directory/medicalnorm/change_list_tree.html"

    list_display = ("position_name", "harmful_factor", "periodicity")
    list_filter = ("harmful_factor",)
    search_fields = ("position_name",)

    # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ add_multiple
    def has_add_permission(self, request):
        return False

    def get_urls(self):
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            path('add-multiple/', self.add_multiple_view, name='directory_medicalexaminationnorm_add_multiple'),
        ]
        return custom_urls + urls

    def add_multiple_view(self, request):
        """
        View –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        """
        from django.shortcuts import render, redirect
        from django.contrib import messages

        context = self.admin_site.each_context(request)

        if request.method == 'POST':
            position_form = PositionNormForm(request.POST)
            formset = HarmfulFactorNormFormSet(request.POST)

            if position_form.is_valid() and formset.is_valid():
                position_name = position_form.cleaned_data['position_name']
                created_count = 0

                for form in formset:
                    if form.cleaned_data and not form.cleaned_data.get('DELETE', False):
                        harmful_factor = form.cleaned_data.get('harmful_factor')
                        if harmful_factor:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–æ—Ä–º–∞
                            existing = MedicalExaminationNorm.objects.filter(
                                position_name=position_name,
                                harmful_factor=harmful_factor
                            ).first()

                            if not existing:
                                MedicalExaminationNorm.objects.create(
                                    position_name=position_name,
                                    harmful_factor=harmful_factor,
                                    periodicity_override=form.cleaned_data.get('periodicity_override'),
                                    notes=form.cleaned_data.get('notes', '')
                                )
                                created_count += 1

                if created_count > 0:
                    messages.success(request, f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ—Ä–º: {created_count}')
                else:
                    messages.warning(request, '–ù–æ—Ä–º—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)')

                return redirect('admin:directory_medicalexaminationnorm_changelist')
        else:
            position_form = PositionNormForm()
            formset = HarmfulFactorNormFormSet()

        context.update({
            'title': '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
            'position_form': position_form,
            'formset': formset,
            'opts': self.model._meta,
        })

        return render(request, 'admin/directory/medicalnorm/add_multiple.html', context)

    def changelist_view(self, request, extra_context=None):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç professions = [{ name, norms, has_overrides }, ...],
        —á—Ç–æ–±—ã —à–∞–±–ª–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª –¥–µ—Ä–µ–≤–æ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.
        """
        extra_context = extra_context or {}

        # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ –Ω–æ—Ä–º
        names = MedicalExaminationNorm.objects.values_list(
            "position_name", flat=True
        ).distinct().order_by("position_name")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
        overridden_professions = set(
            PositionMedicalFactor.objects.values_list(
                "position__position_name", flat=True
            ).distinct()
        )

        professions = []
        for name in names:
            # –ù–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            norms = MedicalExaminationNorm.objects.filter(
                position_name=name
            ).select_related("harmful_factor")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            has_overrides = name in overridden_professions

            # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é (–ø–µ—Ä–≤—É—é) –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            reference_position = Position.objects.filter(position_name=name).first()

            professions.append({
                "name": name,
                "norms": norms,
                "has_overrides": has_overrides,
                "reference_position": reference_position  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            })

        extra_context["professions"] = professions
        return super().changelist_view(request, extra_context)


# ------------------------------------------------------------------
# üë®‚Äç‚öïÔ∏è –ñ—É—Ä–Ω–∞–ª –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
# ------------------------------------------------------------------

@admin.register(EmployeeMedicalExamination)
class EmployeeMedicalExaminationAdmin(admin.ModelAdmin):
    list_display = (
        "employee", "harmful_factor",
        "date_completed", "next_date", "status"
    )
    list_filter = ("status", "harmful_factor")
    search_fields = ("employee__full_name_nominative",)
    date_hierarchy = "date_completed"