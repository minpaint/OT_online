# D:\YandexDisk\OT_online\directory\admin\medical_examination.py

from django.contrib import admin
from django.urls import reverse
from django.utils.html import format_html

from directory.models.medical_examination import (
    MedicalExaminationType,
    HarmfulFactor,
    MedicalSettings,
)
from directory.models.medical_norm import (
    MedicalExaminationNorm,
    PositionMedicalFactor,
    EmployeeMedicalExamination,
)
from directory.models.position import Position
from directory.forms.medical_examination import UniquePositionMedicalNormForm


# ------------------------------------------------------------------
# üîß –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ------------------------------------------------------------------

@admin.register(MedicalExaminationType)
class MedicalExaminationTypeAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)


@admin.register(HarmfulFactor)
class HarmfulFactorAdmin(admin.ModelAdmin):
    list_display = ("short_name", "full_name", "examination_type", "periodicity")
    list_filter = ("examination_type",)
    search_fields = ("short_name", "full_name",)


@admin.register(MedicalSettings)
class MedicalSettingsAdmin(admin.ModelAdmin):
    list_display = ("days_before_issue", "days_before_email")
    list_editable = ("days_before_issue", "days_before_email")
    list_display_links = None


# ------------------------------------------------------------------
# üìë –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã ‚Äî –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# ------------------------------------------------------------------

@admin.register(MedicalExaminationNorm)
class MedicalExaminationNormAdmin(admin.ModelAdmin):
    form = UniquePositionMedicalNormForm
    change_form_template = "admin/directory/medicalnorm/change_form.html"
    change_list_template = "admin/directory/medicalnorm/change_list_tree.html"

    list_display = ("position_name", "harmful_factor", "periodicity")
    list_filter = ("harmful_factor__examination_type",)
    search_fields = ("position_name",)

    def get_form(self, request, obj=None, **kwargs):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: position –∏–ª–∏ position_name
        """
        base_form = super().get_form(request, obj, **kwargs)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        position_id = request.GET.get("position")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ –∏–º—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        position_name = request.GET.get("position_name")

        if position_id or position_name:
            class FormWithPosition(base_form):
                def __new__(cls, *args, **kw):
                    if position_id:
                        kw["position_id"] = position_id
                    elif position_name:
                        # –ò—â–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏–º–µ–Ω–∏
                        try:
                            reference_position = Position.objects.filter(
                                position_name=position_name
                            ).order_by('organization__full_name_ru').first()

                            if reference_position:
                                kw["position_id"] = reference_position.id
                        except:
                            pass

                    return base_form(*args, **kw)

            return FormWithPosition

        return base_form

    def _get_profession_icon(self, position_name):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ–¥–∂–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—è
        """
        position_name_lower = position_name.lower()

        # –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        profession_icons = {
            '–¥–∏—Ä–µ–∫—Ç–æ—Ä': 'üë®‚Äçüíº',
            '–¥–∏—Ä–µ–∫—Ç—Ä': 'üë®‚Äçüíº',  # –î–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
            '–Ω–∞—á–∞–ª—å–Ω–∏–∫': 'üë®‚Äçüíº',
            '–∑–∞–º': 'üë®‚Äçüíº',
            '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª': 'üë®‚Äçüíº',
            '–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π': 'üëî',
            '–≥–ª–∞–≤–Ω—ã–π': 'üëî',
            '–±—É—Ö–≥–∞–ª—Ç–µ—Ä': 'üíº',
            '—ç–∫–æ–Ω–æ–º–∏—Å—Ç': 'üìä',
            '—Ñ–∏–Ω–∞–Ω—Å': 'üí∞',
            '—é—Ä–∏—Å—Ç': '‚öñÔ∏è',
            '–∞–¥–≤–æ–∫–∞—Ç': '‚öñÔ∏è',
            '–∏–Ω–∂–µ–Ω–µ—Ä': 'üë∑‚Äç‚ôÇÔ∏è',
            '—Ç–µ—Ö–Ω–∏–∫': 'üîß',
            '–º–µ—Ö–∞–Ω–∏–∫': 'üîß',
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª': 'üèóÔ∏è',
            '—ç–ª–µ–∫—Ç—Ä–∏–∫': '‚ö°',
            '—ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–µ—Ä': '‚ö°',
            '—Å–≤–∞—Ä—â–∏–∫': 'üî•',
            '—Å–ª–µ—Å–∞—Ä—å': 'üî®',
            '–≤–æ–¥–∏—Ç–µ–ª—å': 'üöó',
            '—à–æ—Ñ–µ—Ä': 'üöó',
            '—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç': 'üöú',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': 'üíª',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': 'üíª',
            'it': 'üíª',
            '–≤—Ä–∞—á': 'üë®‚Äç‚öïÔ∏è',
            '–º–µ–¥—Å–µ—Å—Ç—Ä–∞': 'üë©‚Äç‚öïÔ∏è',
            '—Ñ–µ–ª—å–¥—à–µ—Ä': 'ü©∫',
            '—É—á–∏—Ç–µ–ª—å': 'üë®‚Äçüè´',
            '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 'üë®‚Äçüè´',
            '–ø–æ–≤–∞—Ä': 'üë®‚Äçüç≥',
            '–∫–æ–Ω–¥–∏—Ç–µ—Ä': 'üç∞',
            '–ø–µ–∫–∞—Ä—å': 'üçû',
            '–æ—Ö—Ä–∞–Ω–Ω–∏–∫': 'üëÆ',
            '—Å–µ–∫—Ä–µ—Ç–∞—Ä': 'üìù',
            '–º–µ–Ω–µ–¥–∂–µ—Ä': 'üìã',
            '–∫–ª–∞–¥–æ–≤—â–∏–∫': 'üì¶',
            '—É–±–æ—Ä—â–∏': 'üßπ',
            '–≥—Ä—É–∑—á–∏–∫': 'üì¶',
            '—Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π': 'üõ†Ô∏è',
        }

        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for key, icon in profession_icons.items():
            if key in position_name_lower:
                return icon

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        return 'üëî'

    def changelist_view(self, request, extra_context=None):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç professions = [{ name, reference_position, norms, icon }, ...],
        —á—Ç–æ–±—ã —à–∞–±–ª–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª –¥–µ—Ä–µ–≤–æ —Å —ç–º–æ–¥–∂–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤.
        """
        extra_context = extra_context or {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –≠–¢–ê–õ–û–ù–ù–´–• –Ω–æ—Ä–º
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –Ω–µ –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã
        names = MedicalExaminationNorm.objects.values_list(
            "position_name", flat=True
        ).distinct().order_by("position_name")

        professions = []
        for name in names:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            norms = MedicalExaminationNorm.objects.filter(
                position_name=name
            ).select_related("harmful_factor", "harmful_factor__examination_type")

            # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
            reference_position = Position.objects.filter(
                position_name=name
            ).order_by('organization__full_name_ru').first()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            icon = self._get_profession_icon(name)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
            professions.append({
                "name": name,
                "reference_position": reference_position,
                "norms": norms,
                "icon": icon
            })

        extra_context["professions"] = professions
        return super().changelist_view(request, extra_context)


# ------------------------------------------------------------------
# üîÑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π ‚Äî –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# ------------------------------------------------------------------

@admin.register(PositionMedicalFactor)
class PositionMedicalFactorAdmin(admin.ModelAdmin):
    change_list_template = "admin/directory/medicalnorm/change_list_tree.html"

    list_display = ("position", "harmful_factor", "periodicity", "is_disabled")
    list_filter = ("is_disabled", "harmful_factor__examination_type")
    search_fields = ("position__position_name",)

    def get_form(self, request, obj=None, **kwargs):
        """
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –Ω–æ—Ä–º–∞–º –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å ?position=<id>,
        –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã dropdown ¬´–¥–æ–ª–∂–Ω–æ—Å—Ç—å¬ª –±—ã–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω.
        """
        base_form = super().get_form(request, obj, **kwargs)
        position_id = request.GET.get("position")

        if position_id:
            class FormWithPosition(base_form):
                def __new__(cls, *args, **kw):
                    kw["position_id"] = position_id
                    return base_form(*args, **kw)

            return FormWithPosition

        return base_form

    def changelist_view(self, request, extra_context=None):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º professions = [{ name, reference_position, norms, icon }, ...],
        –≥–¥–µ norms ‚Äî –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (PositionMedicalFactor) –¥–ª—è —ç—Ç–æ–π –æ–±—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
        """
        extra_context = extra_context or {}

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–æ—Ä–º
        names = PositionMedicalFactor.objects.values_list(
            "position__position_name", flat=True
        ).distinct().order_by("position__position_name")

        professions = []
        for name in names:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            factors = PositionMedicalFactor.objects.filter(
                position__position_name=name
            ).select_related("position", "harmful_factor", "harmful_factor__examination_type")

            # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏
            reference_position = Position.objects.filter(
                position_name=name
            ).order_by('organization__full_name_ru').first()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏, —á—Ç–æ –∏ –≤ MedicalExaminationNormAdmin
            icon = MedicalExaminationNormAdmin._get_profession_icon(
                MedicalExaminationNormAdmin, name
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
            professions.append({
                "name": name,
                "reference_position": reference_position,
                "norms": factors,
                "icon": icon
            })

        extra_context["professions"] = professions
        return super().changelist_view(request, extra_context)


# ------------------------------------------------------------------
# üë®‚Äç‚öïÔ∏è –ñ—É—Ä–Ω–∞–ª –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
# ------------------------------------------------------------------

@admin.register(EmployeeMedicalExamination)
class EmployeeMedicalExaminationAdmin(admin.ModelAdmin):
    list_display = (
        "employee", "examination_type", "harmful_factor",
        "date_completed", "next_date", "status"
    )
    list_filter = ("status", "examination_type")
    search_fields = ("employee__full_name_nominative",)
    date_hierarchy = "date_completed"