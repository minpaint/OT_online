# üìÇ directory/admin/medical_examination.py

import logging
from django.contrib import admin
from django.db.models import Exists, OuterRef
from django.utils.html import format_html
from django.http import HttpResponseRedirect

from directory.models.medical_examination import (
    MedicalExaminationType,
    HarmfulFactor,
    MedicalSettings,
)
from directory.models.medical_norm import (
    MedicalExaminationNorm,
    PositionMedicalFactor,
    EmployeeMedicalExamination,
)
from directory.forms.medical_examination import UniquePositionMedicalNormForm
from directory.models.position import Position

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# ------------------------------------------------------------------
# üîß –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ------------------------------------------------------------------

@admin.register(MedicalExaminationType)
class MedicalExaminationTypeAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)


@admin.register(HarmfulFactor)
class HarmfulFactorAdmin(admin.ModelAdmin):
    list_display = ("short_name", "full_name", "examination_type", "periodicity")
    list_filter = ("examination_type",)
    search_fields = ("short_name", "full_name",)


@admin.register(MedicalSettings)
class MedicalSettingsAdmin(admin.ModelAdmin):
    list_display = ("days_before_issue", "days_before_email")
    list_editable = ("days_before_issue", "days_before_email")
    list_display_links = None


# ------------------------------------------------------------------
# üìë –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã ‚Äî –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# ------------------------------------------------------------------

@admin.register(MedicalExaminationNorm)
class MedicalExaminationNormAdmin(admin.ModelAdmin):
    form = UniquePositionMedicalNormForm
    change_form_template = "admin/directory/medicalnorm/change_form.html"
    change_list_template = "admin/directory/medicalnorm/change_list_tree.html"

    list_display = ("position_name", "harmful_factor", "periodicity")
    list_filter = ("harmful_factor__examination_type",)
    search_fields = ("position_name",)

    def get_form(self, request, obj=None, **kwargs):
        """
        –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –Ω–æ—Ä–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.
        """
        base_form = super().get_form(request, obj, **kwargs)
        position_id = request.GET.get("position")

        logger.debug(f"MedicalExaminationNormAdmin.get_form: position_id –∏–∑ request.GET = {position_id}")

        if position_id:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ position_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
                position_id = int(position_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                position = Position.objects.get(pk=position_id)
                position_name = position.position_name

                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position_name} (id={position_id})")

                # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å position_id –≤ —Ñ–æ—Ä–º—É
                class _Wrapper(base_form):
                    def __new__(cls, *args, **kw):
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º initial values, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                        kw.setdefault("initial", {})

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º initial –¥–ª—è unique_position_name
                        kw["initial"]["unique_position_name"] = position_name

                        # –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º position_id –≤ —Ñ–æ—Ä–º—É
                        kw["position_id"] = position_id

                        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å position_id={position_id} –∏ initial={kw['initial']}")

                        return base_form(*args, **kw)

                return _Wrapper

            except (ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è position_id='{position_id}': {str(e)}")
            except Position.DoesNotExist:
                logger.error(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å position_id={position_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return base_form

    def changelist_view(self, request, extra_context=None):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç professions = [{ name, norms, has_overrides }, ...],
        —á—Ç–æ–±—ã —à–∞–±–ª–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª –¥–µ—Ä–µ–≤–æ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.
        """
        extra_context = extra_context or {}

        # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ –Ω–æ—Ä–º
        names = MedicalExaminationNorm.objects.values_list(
            "position_name", flat=True
        ).distinct().order_by("position_name")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
        overridden_professions = set(
            PositionMedicalFactor.objects.values_list(
                "position__position_name", flat=True
            ).distinct()
        )

        professions = []
        for name in names:
            # –ù–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            norms = MedicalExaminationNorm.objects.filter(
                position_name=name
            ).select_related("harmful_factor__examination_type")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            has_overrides = name in overridden_professions

            # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é (–ø–µ—Ä–≤—É—é) –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            reference_position = Position.objects.filter(position_name=name).first()

            professions.append({
                "name": name,
                "norms": norms,
                "has_overrides": has_overrides,
                "reference_position": reference_position  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            })

        extra_context["professions"] = professions
        return super().changelist_view(request, extra_context)

    def response_add(self, request, obj, post_url_continue=None):
        """
        –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—ë–º—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –Ω–æ—Ä–º—ã –¥–ª—è —Ç–æ–π –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.
        """
        if "_addanother" in request.POST:
            url = request.path
            if "position" in request.GET:
                url += f"?position={request.GET['position']}"
            return HttpResponseRedirect(url)
        return super().response_add(request, obj, post_url_continue)


# ------------------------------------------------------------------
# üë®‚Äç‚öïÔ∏è –ñ—É—Ä–Ω–∞–ª –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
# ------------------------------------------------------------------

@admin.register(EmployeeMedicalExamination)
class EmployeeMedicalExaminationAdmin(admin.ModelAdmin):
    list_display = (
        "employee", "examination_type", "harmful_factor",
        "date_completed", "next_date", "status"
    )
    list_filter = ("status", "examination_type")
    search_fields = ("employee__full_name_nominative",)
    date_hierarchy = "date_completed"