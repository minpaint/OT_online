# D:\YandexDisk\OT_online\directory\utils\docx_generator.py
"""
üìÑ –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Word

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ DOCX –∏
–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
"""
import os
import uuid
from typing import Dict, Any, Optional, Tuple, List
import datetime
from docxtpl import DocxTemplate
from django.conf import settings
from django.core.files.base import ContentFile

from directory.models.document_template import DocumentTemplate, GeneratedDocument
from directory.utils.declension import decline_full_name, decline_phrase, get_initials_from_name


def get_template_path(template_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞.
    Args:
        template_id (int): ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    Returns:
        str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        template = DocumentTemplate.objects.get(id=template_id)
        return os.path.join(settings.MEDIA_ROOT, str(template.template_file))
    except DocumentTemplate.DoesNotExist:
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def prepare_employee_context(employee) -> Dict[str, Any]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö.

    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
    Returns:
        Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    now = datetime.datetime.now()
    date_str = now.strftime("%d.%m.%Y")
    day = now.strftime("%d")
    month = now.strftime("%m")
    year = now.strftime("%Y")
    year_short = now.strftime("%y")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    missing_data = []

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    context = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        'employee': employee,
        # –§–ò–û –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–¥–µ–∂–∞—Ö
        'fio_nominative': employee.full_name_nominative,
        'fio_genitive': decline_full_name(employee.full_name_nominative, 'gent'),
        'fio_dative': decline_full_name(employee.full_name_nominative, 'datv'),
        'fio_accusative': decline_full_name(employee.full_name_nominative, 'accs'),
        'fio_instrumental': decline_full_name(employee.full_name_nominative, 'ablt'),
        'fio_prepositional': decline_full_name(employee.full_name_nominative, 'loct'),
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò.–û.)
        'fio_initials': get_initials_from_name(employee.full_name_nominative),
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if not employee.position:
        missing_data.append("–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    else:
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–¥–µ–∂–∞—Ö
        context.update({
            'position_nominative': employee.position.position_name,
            'position_genitive': decline_phrase(employee.position.position_name, 'gent'),
            'position_dative': decline_phrase(employee.position.position_name, 'datv'),
            'position_accusative': decline_phrase(employee.position.position_name, 'accs'),
            'position_instrumental': decline_phrase(employee.position.position_name, 'ablt'),
            'position_prepositional': decline_phrase(employee.position.position_name, 'loct'),
        })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–¥–µ–ª–∞ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if employee.department:
        context.update({
            'department': employee.department.name,
            'department_genitive': decline_phrase(employee.department.name, 'gent'),
            'department_dative': decline_phrase(employee.department.name, 'datv'),
        })
    elif employee.subdivision:  # –ï—Å—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ—Ç –æ—Ç–¥–µ–ª–∞
        context['department'] = ""
        context['department_genitive'] = ""
        context['department_dative'] = ""
    else:  # –ù–µ—Ç –Ω–∏ –æ—Ç–¥–µ–ª–∞, –Ω–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        missing_data.append("–û—Ç–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
        context['department'] = ""
        context['department_genitive'] = ""
        context['department_dative'] = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if employee.subdivision:
        context.update({
            'subdivision': employee.subdivision.name,
            'subdivision_genitive': decline_phrase(employee.subdivision.name, 'gent'),
            'subdivision_dative': decline_phrase(employee.subdivision.name, 'datv'),
        })
    else:
        context['subdivision'] = ""
        context['subdivision_genitive'] = ""
        context['subdivision_dative'] = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if not employee.organization:
        missing_data.append("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
        context['organization_name'] = ""
        context['organization_full_name'] = ""
    else:
        context.update({
            'organization_name': employee.organization.short_name_ru,
            'organization_full_name': employee.organization.full_name_ru,
        })

    # –î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    context.update({
        'current_date': date_str,
        'current_day': day,
        'current_month': month,
        'current_year': year,
        'current_year_short': year_short,
        'order_date': date_str,
        # –ü–æ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        'order_number': "",
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        'internship_duration': "2",  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –¥–Ω—è—Ö
    })

    # –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è (–∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
    if employee.organization and hasattr(employee.organization, 'location') and employee.organization.location:
        context['location'] = employee.organization.location
    else:
        context['location'] = "–≥. –ú–∏–Ω—Å–∫"
        missing_data.append("–ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–π
    from directory.views.documents.utils import get_document_signer

    signer, level, found = get_document_signer(employee)
    if found:
        context.update({
            'director_position': signer.position.position_name,
            'director_name': get_initials_from_name(signer.full_name_nominative),
            'director_level': level,  # –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        })
    else:
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        missing_data.append("–ü–æ–¥–ø–∏—Å–∞–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        context.update({
            'director_position': "",
            'director_name': "",
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context['missing_data'] = missing_data
    context['has_missing_data'] = len(missing_data) > 0

    return context


def generate_docx_from_template(template_id: int, context: Dict[str, Any],
                               employee, user=None) -> Optional[GeneratedDocument]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç DOCX –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
    Args:
        template_id (int): ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        context (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = DocumentTemplate.objects.get(id=template_id)
        template_path = os.path.join(settings.MEDIA_ROOT, str(template.template_file))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        doc = DocxTemplate(template_path)

        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
        clean_context = {k: v for k, v in context.items() if k not in ['missing_data', 'has_missing_data']}

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        doc.render(clean_context)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"{template.document_type}_{employee.full_name_nominative}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        file_content = ContentFile(b'')
        doc.save(file_content)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        generated_doc = GeneratedDocument()
        generated_doc.template = template
        generated_doc.employee = employee
        generated_doc.created_by = user
        generated_doc.document_data = context
        generated_doc.document_file.save(filename, file_content)
        generated_doc.save()

        return generated_doc

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        return None


def generate_all_orders(employee, user=None, custom_context=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∑–∞–º–µ–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è).
    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        custom_context: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–π –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ
    try:
        template = DocumentTemplate.objects.get(document_type='all_orders', is_active=True)
    except DocumentTemplate.DoesNotExist:
        raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–π –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = prepare_employee_context(employee)

    # –ò—â–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
    from directory.views.documents.utils import get_internship_leader

    internship_leader, level, success = get_internship_leader(employee)
    if success and internship_leader:
        context.update({
            'head_of_internship_name': internship_leader.full_name_nominative,
            'head_of_internship_name_initials': get_initials_from_name(internship_leader.full_name_nominative),
            'head_of_internship_position': internship_leader.position.position_name if internship_leader.position else "",
            'internship_leader_level': level,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        })
    else:
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        context['missing_data'].append("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if custom_context:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ missing_data –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if 'missing_data' in custom_context:
            custom_missing_data = custom_context.pop('missing_data')
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            context['missing_data'].extend(custom_missing_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            context['has_missing_data'] = len(context['missing_data']) > 0

        context.update(custom_context)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    return generate_docx_from_template(template.id, context, employee, user)


def generate_siz_card(employee, user=None, custom_context=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ—Ç–∞ –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        custom_context: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó
    try:
        template = DocumentTemplate.objects.get(document_type='siz_card', is_active=True)
    except DocumentTemplate.DoesNotExist:
        raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = prepare_employee_context(employee)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó
    from directory.models import SIZNorm, SIZIssued

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if employee.position:
        base_norms = SIZNorm.objects.filter(position=employee.position, condition='').select_related('siz')
        context['base_norms'] = list(base_norms)

        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó
        condition_norms = SIZNorm.objects.filter(position=employee.position).exclude(condition='').select_related('siz')
        condition_groups = {}
        for norm in condition_norms:
            if norm.condition not in condition_groups:
                condition_groups[norm.condition] = []
            condition_groups[norm.condition].append(norm)

        context['condition_groups'] = [{'name': name, 'norms': norms} for name, norms in condition_groups.items()]
    else:
        context['missing_data'].append("–ù–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ –°–ò–ó")
        context['base_norms'] = []
        context['condition_groups'] = []

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –°–ò–ó
    issued_items = SIZIssued.objects.filter(employee=employee).select_related('siz').order_by('-issue_date')
    context['issued_items'] = list(issued_items)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –§–ò–û –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    from directory.utils.declension import get_gender_from_name
    gender = get_gender_from_name(employee.full_name_nominative)
    context['gender'] = "–ú—É–∂—Å–∫–æ–π" if gender == 'masc' else "–ñ–µ–Ω—Å–∫–∏–π"

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    context['siz_sizes'] = {
        'headgear': "",  # –†–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤–Ω–æ–≥–æ —É–±–æ—Ä–∞
        'respirator': "", # –†–∞–∑–º–µ—Ä –°–ò–ó–û–î
        'gloves': employee.clothing_size if hasattr(employee, 'clothing_size') else "",  # –†–∞–∑–º–µ—Ä –ø–µ—Ä—á–∞—Ç–æ–∫/—Ä—É–∫–∞–≤–∏—Ü
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if custom_context:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ missing_data –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if 'missing_data' in custom_context:
            custom_missing_data = custom_context.pop('missing_data')
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            context['missing_data'].extend(custom_missing_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            context['has_missing_data'] = len(context['missing_data']) > 0

        context.update(custom_context)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    return generate_docx_from_template(template.id, context, employee, user)


def get_document_template(document_type):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
    Args:
        document_type (str): –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ ('all_orders', 'knowledge_protocol', etc.)
    Returns:
        DocumentTemplate: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    Example:
        template = get_document_template('all_orders')
    """
    try:
        return DocumentTemplate.objects.get(document_type=document_type, is_active=True)
    except DocumentTemplate.DoesNotExist:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"–®–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{document_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None


def generate_document_from_template(template, employee, user=None, context=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    Args:
        template: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ DocumentTemplate
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        context: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not template:
        return None

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    base_context = prepare_employee_context(employee)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if context:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ missing_data –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if 'missing_data' in context:
            custom_missing_data = context.pop('missing_data')
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            base_context['missing_data'].extend(custom_missing_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            base_context['has_missing_data'] = len(base_context['missing_data']) > 0

        base_context.update(context)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    return generate_docx_from_template(template.id, base_context, employee, user)