"""
üî§ –ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–∞–∑
–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞–¥–µ–∂–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pymorphy2.
"""
import pymorphy2

# –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
morph = pymorphy2.MorphAnalyzer()

# –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –ø–∞–¥–µ–∂–µ–π –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
CASE_CODES = {
    'nomn': '–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π',  # –ö—Ç–æ? –ß—Ç–æ? (—Ä–∞–±–æ—Ç–∞–µ—Ç –ò–≤–∞–Ω–æ–≤)
    'gent': '—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π',   # –ö–æ–≥–æ? –ß–µ–≥–æ? (–Ω–µ—Ç –ò–≤–∞–Ω–æ–≤–∞)
    'datv': '–¥–∞—Ç–µ–ª—å–Ω—ã–π',     # –ö–æ–º—É? –ß–µ–º—É? (–¥–∞—Ç—å –ò–≤–∞–Ω–æ–≤—É)
    'accs': '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π',   # –ö–æ–≥–æ? –ß—Ç–æ? (–≤–∏–∂—É –ò–≤–∞–Ω–æ–≤–∞)
    'ablt': '—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π',  # –ö–µ–º? –ß–µ–º? (–¥–æ–≤–æ–ª–µ–Ω –ò–≤–∞–Ω–æ–≤—ã–º)
    'loct': '–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π'     # –û –∫–æ–º? –û —á–µ–º? (–¥—É–º–∞—é –æ–± –ò–≤–∞–Ω–æ–≤–µ)
}

def decline_word_to_case(word: str, target_case: str) -> str:
    """
    –°–∫–ª–æ–Ω—è–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ –Ω—É–∂–Ω—ã–π –ø–∞–¥–µ–∂.

    Args:
        word (str): –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        target_case (str): –ö–æ–¥ –ø–∞–¥–µ–∂–∞ ('nomn', 'gent', 'datv', 'accs', 'ablt', 'loct')

    Returns:
        str: –°–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    """
    # –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–æ
    parse = morph.parse(word)[0]

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É –ø–∞–¥–µ–∂—É
    form = parse.inflect({target_case})

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë, –∏–Ω–∞—á–µ - –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
    return form.word if form else word


def decline_full_name(full_name: str, target_case: str) -> str:
    """
    –°–∫–ª–æ–Ω—è–µ—Ç –§–ò–û –≤ –Ω—É–∂–Ω—ã–π –ø–∞–¥–µ–∂.

    Args:
        full_name (str): –§–ò–û –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
        target_case (str): –ö–æ–¥ –ø–∞–¥–µ–∂–∞ ('nomn', 'gent', 'datv', 'accs', 'ablt', 'loct')

    Returns:
        str: –°–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –§–ò–û
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏
    parts = full_name.split()

    # –°–∫–ª–æ–Ω—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    declined_parts = []
    for part in parts:
        declined_parts.append(decline_word_to_case(part, target_case))

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    return " ".join(declined_parts)


def decline_phrase(phrase: str, target_case: str) -> str:
    """
    –°–∫–ª–æ–Ω—è–µ—Ç —Ñ—Ä–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏) –≤ –Ω—É–∂–Ω—ã–π –ø–∞–¥–µ–∂.

    Args:
        phrase (str): –§—Ä–∞–∑–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
        target_case (str): –ö–æ–¥ –ø–∞–¥–µ–∂–∞ ('nomn', 'gent', 'datv', 'accs', 'ablt', 'loct')

    Returns:
        str: –°–∫–ª–æ–Ω–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ —Å–ª–æ–≤–∞
    parts = phrase.split()

    # –°–∫–ª–æ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    declined_parts = []
    for part in parts:
        declined_parts.append(decline_word_to_case(part, target_case))

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    return " ".join(declined_parts)


def get_all_cases(text: str, is_full_name: bool = False) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞–¥–µ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        is_full_name (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –§–ò–û

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞–¥–µ–∂–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
    """
    result = {}

    for case_code, case_name in CASE_CODES.items():
        if is_full_name:
            result[case_code] = decline_full_name(text, case_code)
        else:
            result[case_code] = decline_phrase(text, case_code)

    return result


def get_initials_from_name(full_name: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (–§–∞–º–∏–ª–∏—è –ò.–û.).

    Args:
        full_name (str): –ü–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'

    Returns:
        str: –ò–º—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ (–§–∞–º–∏–ª–∏—è –ò.–û.)
    """
    parts = full_name.split()

    if len(parts) < 2:
        return full_name

    surname = parts[0]
    initials = ""

    for part in parts[1:]:
        if part:
            initials += part[0] + "."

    return f"{surname} {initials}"