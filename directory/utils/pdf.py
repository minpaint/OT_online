# üìÅ directory/utils/pdf.py

import os
import logging
from io import BytesIO
from django.template.loader import get_template
from django.http import HttpResponse
from xhtml2pdf import pisa
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def render_to_pdf(template_path, context, filename=None, as_attachment=True):
    """
    üñ®Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML-—à–∞–±–ª–æ–Ω–∞ –≤ PDF-—Ñ–∞–π–ª

    Args:
        template_path (str): –ü—É—Ç—å –∫ HTML-—à–∞–±–ª–æ–Ω—É
        context (dict): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        as_attachment (bool): –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ (True) –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ (False)

    Returns:
        HttpResponse: HTTP-–æ—Ç–≤–µ—Ç —Å PDF-—Ñ–∞–π–ª–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º STATIC_URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'STATIC_URL' not in context:
            context['STATIC_URL'] = settings.STATIC_URL

        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML-—à–∞–±–ª–æ–Ω–∞
        template = get_template(template_path)
        html_string = template.render(context)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BytesIO –¥–ª—è –∑–∞–ø–∏—Å–∏ PDF
        result = BytesIO()

        # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º
        font_path = os.path.join(settings.BASE_DIR, 'static', 'fonts')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à—Ä–∏—Ñ—Ç–∞
        font_file = os.path.join(font_path, 'DejaVuSans.ttf')
        if os.path.exists(font_file):
            logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç –Ω–∞–π–¥–µ–Ω: {font_file}")
        else:
            logger.warning(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_file}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        pdf_options = {
            'font_path': font_path,
            'default_font': 'DejaVuSans',
            # –í–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            'embed_fonts': True,
            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            'font_map': {
                'sans-serif': 'DejaVuSans',
                'serif': 'DejaVuSerif',
                'monospace': 'DejaVuSansMono',
            }
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ PDF
        pdf = pisa.CreatePDF(
            BytesIO(html_string.encode('UTF-8')),
            dest=result,
            **pdf_options
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if pdf.err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf.err}")
            return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf.err}", status=500)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–æ—Ç–≤–µ—Ç–∞
        response = HttpResponse(result.getvalue(), content_type='application/pdf')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
        if filename:
            disposition = 'attachment' if as_attachment else 'inline'
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            response['Content-Disposition'] = f'{disposition}; filename="{filename}"'

        return response

    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return HttpResponse(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}",
            status=500
        )