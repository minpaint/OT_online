# üìÅ directory/utils/pdf.py

import os
import logging
from io import BytesIO
from django.template.loader import get_template
from django.http import HttpResponse
from xhtml2pdf import pisa
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º ASCII-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ —ç–º–æ–¥–∑–∏
logger = logging.getLogger(__name__)


def render_to_pdf(template_path, context, filename=None, as_attachment=True):
    """
    üñ®Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML-—à–∞–±–ª–æ–Ω–∞ –≤ PDF-—Ñ–∞–π–ª

    Args:
        template_path (str): –ü—É—Ç—å –∫ HTML-—à–∞–±–ª–æ–Ω—É
        context (dict): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        as_attachment (bool): –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ (True) –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ (False)

    Returns:
        HttpResponse: HTTP-–æ—Ç–≤–µ—Ç —Å PDF-—Ñ–∞–π–ª–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º STATIC_URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'STATIC_URL' not in context:
            context['STATIC_URL'] = settings.STATIC_URL

        # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º
        font_path = os.path.join(settings.BASE_DIR, 'static', 'fonts')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
        font_file = os.path.join(font_path, 'DejaVuSans.ttf')
        if os.path.exists(font_file):
            logger.info("[INFO] –®—Ä–∏—Ñ—Ç –Ω–∞–π–¥–µ–Ω: %s", font_file)
        else:
            logger.warning("[WARNING] –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", font_file)

        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML-—à–∞–±–ª–æ–Ω–∞
        template = get_template(template_path)
        html_string = template.render(context)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BytesIO –¥–ª—è –∑–∞–ø–∏—Å–∏ PDF
        result = BytesIO()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF
        pdf_options = {
            'encoding': 'UTF-8',  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
            'quiet': True,  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤ stdout
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç–∞–º, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(font_path):
            pdf_options['font_path'] = font_path

        # –°–æ–∑–¥–∞–Ω–∏–µ PDF
        pdf = pisa.CreatePDF(
            BytesIO(html_string.encode('UTF-8')),
            dest=result,
            **pdf_options
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if pdf.err:
            logger.error("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: %s", pdf.err)
            return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf.err}", status=500)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–æ—Ç–≤–µ—Ç–∞
        response = HttpResponse(result.getvalue(), content_type='application/pdf')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
        if filename:
            disposition = 'attachment' if as_attachment else 'inline'
            response['Content-Disposition'] = f'{disposition}; filename="{filename}"'

        logger.info("[INFO] PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s", filename or '–±–µ–∑ –∏–º–µ–Ω–∏')
        return response

    except Exception as e:
        logger.exception("[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: %s", str(e))
        return HttpResponse(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}",
            status=500
        )