# üìÅ directory/utils/pdf.py

import os
import logging
from io import BytesIO
from django.template.loader import get_template
from django.http import HttpResponse
from xhtml2pdf import pisa
from django.conf import settings
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–º–µ–Ω—ã —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ xhtml2pdf
from xhtml2pdf.default import DEFAULT_FONT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# üìå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç DejaVuSans –ø–æ–¥ –∏–º–µ–Ω–µ–º "helvetica"
try:
    font_path = os.path.join(settings.BASE_DIR, 'static', 'fonts', 'DejaVuSans.ttf')
    pdfmetrics.registerFont(TTFont('helvetica', font_path))

    # –ü–æ–¥–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã "helvetica" –∏ "times" –Ω–∞ –Ω–∞—à DejaVuSans
    DEFAULT_FONT['helvetica'] = 'helvetica'
    DEFAULT_FONT['times'] = 'helvetica'

    logger.info("‚úÖ –®—Ä–∏—Ñ—Ç DejaVuSans —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'helvetica'")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")


def fetch_resources(uri, rel):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (—à—Ä–∏—Ñ—Ç–æ–≤, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –¥–ª—è PDF

    Args:
        uri: URI —Ä–µ—Å—É—Ä—Å–∞
        rel: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

    Returns:
        –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É
    """
    logger.debug(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ—Å—É—Ä—Å: {uri}")

    if uri.startswith(settings.STATIC_URL):
        path = os.path.join(settings.BASE_DIR, 'static', uri.replace(settings.STATIC_URL, ""))
    elif uri.startswith('/static/'):
        path = os.path.join(settings.BASE_DIR, uri[1:])  # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª—ç—à
    else:
        path = os.path.join(settings.BASE_DIR, 'static', uri)

    if os.path.exists(path):
        logger.debug(f"–ù–∞–π–¥–µ–Ω —Ä–µ—Å—É—Ä—Å: {path}")
        return path
    else:
        logger.warning(f"–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return uri


def render_to_pdf(template_path, context, filename=None, as_attachment=True):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML-—à–∞–±–ª–æ–Ω–∞ –≤ PDF-—Ñ–∞–π–ª

    Args:
        template_path (str): –ü—É—Ç—å –∫ HTML-—à–∞–±–ª–æ–Ω—É
        context (dict): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        as_attachment (bool): –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ (True) –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ (False)

    Returns:
        HttpResponse: HTTP-–æ—Ç–≤–µ—Ç —Å PDF-—Ñ–∞–π–ª–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        context['STATIC_URL'] = settings.STATIC_URL
        context['BASE_DIR'] = settings.BASE_DIR

        template = get_template(template_path)
        html_string = template.render(context)

        result = BytesIO()

        pdf = pisa.pisaDocument(
            BytesIO(html_string.encode('UTF-8')),
            dest=result,
            encoding='UTF-8',
            link_callback=fetch_resources
        )

        if pdf.err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf.err}")
            return HttpResponse(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf.err}", status=500)

        response = HttpResponse(result.getvalue(), content_type='application/pdf')

        if filename:
            disposition = 'attachment' if as_attachment else 'inline'
            response['Content-Disposition'] = f'{disposition}; filename="{filename}"'

        return response

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return HttpResponse(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}",
            status=500
        )
