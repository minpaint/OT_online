# üìÅ directory/ajax.py

from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_GET
from django.core.cache import cache
from django.core.exceptions import ValidationError

from directory.models import (
    StructuralSubdivision,
    Department,
    Position,
    Document,
    Equipment
)


def validate_organization(organization_id):
    """
    üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    Args:
        organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    Raises:
        ValidationError: –ï—Å–ª–∏ ID –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    if not organization_id or organization_id.strip() == '':
        raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')


@login_required
@require_GET
def get_subdivisions(request):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º organization
    Returns:
        JsonResponse —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    """
    try:
        organization_id = request.GET.get('organization')
        validate_organization(organization_id)

        # üíæ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        cache_key = f'subdivisions_org_{organization_id}'
        subdivisions = cache.get(cache_key)

        if subdivisions is None:
            subdivisions = list(
                StructuralSubdivision.objects
                .filter(organization_id=organization_id)
                .values('id', 'name')
            )
            # üì¶ –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
            cache.set(cache_key, subdivisions, 300)

        return JsonResponse(subdivisions, safe=False)

    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_GET
def get_departments(request):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–¥–µ–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ organization –∏ subdivision
    Returns:
        JsonResponse —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–¥–µ–ª–æ–≤
    """
    try:
        organization_id = request.GET.get('organization')
        subdivision_id = request.GET.get('subdivision')

        validate_organization(organization_id)
        if not subdivision_id or subdivision_id.strip() == '':
            raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')

        cache_key = f'departments_org_{organization_id}_sub_{subdivision_id}'
        departments = cache.get(cache_key)

        if departments is None:
            departments = list(
                Department.objects
                .filter(
                    organization_id=organization_id,
                    subdivision_id=subdivision_id
                )
                .values('id', 'name')
            )
            cache.set(cache_key, departments, 300)

        return JsonResponse(departments, safe=False)

    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_GET
def get_positions(request):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ organization, subdivision –∏ department
    Returns:
        JsonResponse —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    """
    try:
        organization_id = request.GET.get('organization')
        validate_organization(organization_id)

        subdivision_id = request.GET.get('subdivision')
        department_id = request.GET.get('department')

        # üîç –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        positions = Position.objects.filter(organization_id=organization_id)

        # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if subdivision_id and subdivision_id.strip():
            positions = positions.filter(subdivision_id=subdivision_id)
        if department_id and department_id.strip():
            positions = positions.filter(department_id=department_id)

        positions_data = list(positions.values('id', 'position_name'))
        return JsonResponse(positions_data, safe=False)

    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_GET
def get_documents(request):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ organization, subdivision –∏ department
    Returns:
        JsonResponse —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    try:
        organization_id = request.GET.get('organization')
        validate_organization(organization_id)

        subdivision_id = request.GET.get('subdivision')
        department_id = request.GET.get('department')

        # üîç –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        documents = Document.objects.filter(organization_id=organization_id)

        # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if subdivision_id and subdivision_id.strip():
            documents = documents.filter(subdivision_id=subdivision_id)
        if department_id and department_id.strip():
            documents = documents.filter(department_id=department_id)

        documents_data = list(documents.values('id', 'name'))
        return JsonResponse(documents_data, safe=False)

    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_GET
def get_equipment(request):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ organization, subdivision –∏ department
    Returns:
        JsonResponse —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    try:
        organization_id = request.GET.get('organization')
        validate_organization(organization_id)

        subdivision_id = request.GET.get('subdivision')
        department_id = request.GET.get('department')

        # üîç –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        equipment = Equipment.objects.filter(organization_id=organization_id)

        # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if subdivision_id and subdivision_id.strip():
            equipment = equipment.filter(subdivision_id=subdivision_id)
        if department_id and department_id.strip():
            equipment = equipment.filter(department_id=department_id)

        equipment_data = list(equipment.values('id', 'equipment_name'))
        return JsonResponse(equipment_data, safe=False)

    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)