"""
üë• Resource –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""
from import_export import resources, fields, widgets
from directory.models import Employee, Organization, StructuralSubdivision, Department, Position
from django.core.exceptions import ValidationError
from datetime import datetime


class RussianDateWidget(widgets.DateWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"""

    def clean(self, value, row=None, *args, **kwargs):
        if not value:
            return None

        # –ï—Å–ª–∏ —É–∂–µ datetime
        if isinstance(value, datetime):
            return value.date()

        # –ï—Å–ª–∏ date
        from datetime import date
        if isinstance(value, date):
            return value

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–≤–∫–ª—é—á–∞—è ISO —Ñ–æ—Ä–º–∞—Ç –∏–∑ JSON)
        for fmt in ['%Y-%m-%dT%H:%M:%S', '%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y']:
            try:
                return datetime.strptime(str(value).strip(), fmt).date()
            except (ValueError, TypeError):
                continue

        return None


class EmployeeResource(resources.ModelResource):
    """
    üë• –†–µ—Å—É—Ä—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

    –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: —Å–æ–∑–¥–∞–µ–º organization/subdivision/department/position –≤ before_import_row.
    """

    hire_date = fields.Field(
        column_name='hire_date',
        attribute='hire_date',
        widget=RussianDateWidget(format='%d.%m.%Y')
    )

    full_name_nominative = fields.Field(
        column_name='full_name_nominative',
        attribute='full_name_nominative',
        widget=widgets.CharWidget()
    )

    class Meta:
        model = Employee
        fields = (
            'organization',
            'subdivision',
            'department',
            'position',
            'hire_date',
            'full_name_nominative',
            'date_of_birth',
            'place_of_residence',
        )
        import_id_fields = []
        skip_unchanged = False

    def before_import_row(self, row, **kwargs):
        """–°–æ–∑–¥–∞–µ–º organization/subdivision/department/position –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏"""

        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        org_short_name = row.get('org_short_name_ru', '').strip() if row.get('org_short_name_ru') else ''
        subdivision_name = row.get('subdivision_name', '').strip() if row.get('subdivision_name') else ''
        department_name = row.get('department_name', '').strip() if row.get('department_name') else ''
        position_name = row.get('position_name', '').strip() if row.get('position_name') else ''
        full_name = row.get('full_name_nominative', '').strip() if row.get('full_name_nominative') else ''

        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not org_short_name:
            raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
        if not position_name:
            raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å')
        if not full_name:
            raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        if not row.get('hire_date'):
            raise ValidationError('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—Ä–∏–µ–º–∞')
        if department_name and not subdivision_name:
            raise ValidationError('–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')

        # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        organization, _ = Organization.objects.get_or_create(
            short_name_ru=org_short_name,
            defaults={
                'full_name_ru': org_short_name,
                'short_name_by': org_short_name,
                'full_name_by': org_short_name,
                'location': '–≥. –ú–∏–Ω—Å–∫'
            }
        )

        # 4. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
        subdivision = None
        if subdivision_name:
            subdivision, _ = StructuralSubdivision.objects.get_or_create(
                name=subdivision_name,
                organization=organization,
                defaults={'short_name': subdivision_name}
            )

        # 5. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–¥–µ–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        department = None
        if department_name:
            department, _ = Department.objects.get_or_create(
                name=department_name,
                organization=organization,
                subdivision=subdivision,
                defaults={'short_name': department_name}
            )

        # 6. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        position, _ = Position.objects.get_or_create(
            position_name=position_name,
            organization=organization,
            subdivision=subdivision,
            department=department,
            defaults={'position_name': position_name}
        )

        # 7. –î–æ–±–∞–≤–ª—è–µ–º ID –≤ row –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
        row['organization'] = organization.id
        row['subdivision'] = subdivision.id if subdivision else None
        row['department'] = department.id if department else None
        row['position'] = position.id

        # 8. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not row.get('date_of_birth'):
            from datetime import date
            row['date_of_birth'] = date(1900, 1, 1)

        if not row.get('place_of_residence'):
            row['place_of_residence'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    def after_import_row(self, row, row_result, **kwargs):
        """
        –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        if row_result.object_id:
            employee = Employee.objects.get(pk=row_result.object_id)

            # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # start_date –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ hire_date
            if employee.hire_date:
                employee.start_date = employee.hire_date
            if not employee.contract_type:
                employee.contract_type = 'standard'
            if not employee.status:
                employee.status = 'active'

            employee.save()

    def get_instance(self, instance_loader, row):
        """–ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –§–ò–û"""
        full_name = row.get('full_name_nominative')
        if full_name:
            try:
                return Employee.objects.get(full_name_nominative=full_name)
            except Employee.DoesNotExist:
                pass
        return None

    def get_export_queryset(self, queryset=None):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        qs = super().get_export_queryset(queryset)
        return qs.select_related('organization', 'subdivision', 'department', 'position')
