from dal import autocomplete
from django.db.models import Q
from directory.models.siz import SIZ
from directory.models import (
    Organization,
    StructuralSubdivision,
    Department,
    Position,
    Document,
    Equipment
)

class OrganizationAutocomplete(autocomplete.Select2QuerySetView):
    """
    üè¢ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    """
    def get_queryset(self):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä
        if not self.request.user.is_authenticated:
            return Organization.objects.none()

        qs = Organization.objects.all()

        # üîí –ï—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(pk__in=allowed_orgs)

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if self.q:
            qs = qs.filter(
                Q(full_name_ru__icontains=self.q) |
                Q(short_name_ru__icontains=self.q)
            )

        return qs.order_by('full_name_ru')

    def get_result_label(self, item):
        return item.short_name_ru or item.full_name_ru


class SubdivisionAutocomplete(autocomplete.Select2QuerySetView):
    """
    üè≠ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    """
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return StructuralSubdivision.objects.none()

        qs = StructuralSubdivision.objects.all()

        # üîí –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ñ–∏–ª—é, –µ—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)

        # –ò–∑ forwarded-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º id –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        organization_id = self.forwarded.get('organization', None)
        if organization_id:
            qs = qs.filter(organization_id=organization_id)
        else:
            return StructuralSubdivision.objects.none()

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if self.q:
            qs = qs.filter(
                Q(name__icontains=self.q) |
                Q(short_name__icontains=self.q)
            )

        return qs.select_related('organization').order_by('name')

    def get_result_label(self, item):
        return f"{item.name} ({item.organization.short_name_ru})"


class DepartmentAutocomplete(autocomplete.Select2QuerySetView):
    """
    üìÇ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
    """
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return Department.objects.none()

        qs = Department.objects.all()

        # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)

        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ forwarded
        subdivision_id = self.forwarded.get('subdivision', None)
        if subdivision_id:
            qs = qs.filter(subdivision_id=subdivision_id)
        else:
            return Department.objects.none()

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if self.q:
            qs = qs.filter(
                Q(name__icontains=self.q) |
                Q(short_name__icontains=self.q)
            )

        return qs.select_related('subdivision', 'organization').order_by('name')

    def get_result_label(self, item):
        return (
            f"{item.name} ({item.subdivision.name})"
            if item.subdivision else item.name
        )


class PositionAutocomplete(autocomplete.Select2QuerySetView):
    """
    üëî –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    """
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return Position.objects.none()

        qs = Position.objects.all()

        # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)

        # –ß–∏—Ç–∞–µ–º forwarded: organization, subdivision, department
        organization_id = self.forwarded.get('organization', None)
        subdivision_id = self.forwarded.get('subdivision', None)
        department_id = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if organization_id:
            qs = qs.filter(organization_id=organization_id)
        else:
            return Position.objects.none()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if department_id:
            qs = qs.filter(department_id=department_id)
        elif subdivision_id:
            qs = qs.filter(
                Q(subdivision_id=subdivision_id, department__isnull=True) |
                Q(subdivision_id=subdivision_id)
            )
        else:
            qs = qs.filter(subdivision__isnull=True)

        if self.q:
            qs = qs.filter(position_name__icontains=self.q)

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('position_name')

    def get_result_label(self, item):
        parts = [item.position_name]
        if item.department:
            parts.append(f"({item.department.name})")
        elif item.subdivision:
            parts.append(f"({item.subdivision.name})")
        else:
            parts.append(f"({item.organization.short_name_ru})")
        return " ".join(parts)


class DocumentAutocomplete(autocomplete.Select2QuerySetView):
    """
    üìÑ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return Document.objects.none()

        qs = Document.objects.all()

        # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)

        # –°—á–∏—Ç—ã–≤–∞–µ–º forwarded
        organization_id = self.forwarded.get('organization', None)
        subdivision_id = self.forwarded.get('subdivision', None)
        department_id = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if organization_id:
            qs = qs.filter(organization_id=organization_id)
        else:
            return Document.objects.none()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ subdivision / department
        if department_id:
            qs = qs.filter(department_id=department_id)
        elif subdivision_id:
            qs = qs.filter(
                Q(subdivision_id=subdivision_id, department__isnull=True) |
                Q(subdivision_id=subdivision_id)
            )

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if self.q:
            qs = qs.filter(name__icontains=self.q)

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('name')

    def get_result_label(self, item):
        parts = [item.name]
        if item.department:
            parts.append(f"({item.department.name})")
        elif item.subdivision:
            parts.append(f"({item.subdivision.name})")
        else:
            parts.append(f"({item.organization.short_name_ru})")
        return " ".join(parts)


class EquipmentAutocomplete(autocomplete.Select2QuerySetView):
    """
    ‚öôÔ∏è –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return Equipment.objects.none()

        qs = Equipment.objects.all()

        # üîí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
        if not self.request.user.is_superuser and hasattr(self.request.user, 'profile'):
            allowed_orgs = self.request.user.profile.organizations.all()
            qs = qs.filter(organization__in=allowed_orgs)

        # –°—á–∏—Ç—ã–≤–∞–µ–º forwarded
        organization_id = self.forwarded.get('organization', None)
        subdivision_id = self.forwarded.get('subdivision', None)
        department_id = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ organization
        if organization_id:
            qs = qs.filter(organization_id=organization_id)
        else:
            return Equipment.objects.none()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if department_id:
            qs = qs.filter(department_id=department_id)
        elif subdivision_id:
            qs = qs.filter(
                Q(subdivision_id=subdivision_id, department__isnull=True) |
                Q(subdivision_id=subdivision_id)
            )

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∏–Ω–≤. –Ω–æ–º–µ—Ä—É
        if self.q:
            qs = qs.filter(
                Q(equipment_name__icontains=self.q) |
                Q(inventory_number__icontains=self.q)
            )

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('equipment_name')

    def get_result_label(self, item):
        parts = [f"{item.equipment_name} (–∏–Ω–≤.‚Ññ {item.inventory_number})"]
        if item.department:
            parts.append(f"- {item.department.name}")
        elif item.subdivision:
            parts.append(f"- {item.subdivision.name}")
        else:
            parts.append(f"- {item.organization.short_name_ru}")
        return " ".join(parts)


class SIZAutocomplete(autocomplete.Select2QuerySetView):
    """
    üõ°Ô∏è –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –°–ò–ó
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ö –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –°–ò–ó –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    def get_queryset(self):
        """
        üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –°–ò–ó
        –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        """
        qs = SIZ.objects.all()

        if self.q:
            qs = qs.filter(name__icontains=self.q)

        return qs.order_by('name')