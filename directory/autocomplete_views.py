from dal import autocomplete
from django.db.models import Q
from directory.models import (
    Organization,
    StructuralSubdivision,
    Department,
    Position,
    Document,
    Equipment
)


class OrganizationAutocomplete(autocomplete.Select2QuerySetView):
    """
    üè¢ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    """

    def get_queryset(self):
        qs = Organization.objects.all()
        if self.q:
            qs = qs.filter(
                Q(full_name_ru__icontains=self.q) |
                Q(short_name_ru__icontains=self.q)
            )
        return qs.order_by('full_name_ru')

    def get_result_label(self, item):
        return item.short_name_ru or item.full_name_ru


class SubdivisionAutocomplete(autocomplete.Select2QuerySetView):
    """
    üè≠ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
    """

    def get_queryset(self):
        qs = StructuralSubdivision.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º id –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ forwarded –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        organization = self.forwarded.get('organization', None)
        if organization:
            qs = qs.filter(organization_id=organization)
        else:
            return StructuralSubdivision.objects.none()

        if self.q:
            qs = qs.filter(
                Q(name__icontains=self.q) |
                Q(short_name__icontains=self.q)
            )
        return qs.select_related('organization').order_by('name')

    def get_result_label(self, item):
        return f"{item.name} ({item.organization.short_name_ru})"


class DepartmentAutocomplete(autocomplete.Select2QuerySetView):
    """
    üìÇ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
    """

    def get_queryset(self):
        qs = Department.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ forwarded –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        subdivision = self.forwarded.get('subdivision', None)
        if subdivision:
            qs = qs.filter(subdivision_id=subdivision)
        else:
            return Department.objects.none()

        if self.q:
            qs = qs.filter(
                Q(name__icontains=self.q) |
                Q(short_name__icontains=self.q)
            )
        return qs.select_related('subdivision', 'organization').order_by('name')

    def get_result_label(self, item):
        return f"{item.name} ({item.subdivision.name})"


class PositionAutocomplete(autocomplete.Select2QuerySetView):
    """
    üëî –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    """

    def get_queryset(self):
        qs = Position.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ forwarded
        organization = self.forwarded.get('organization', None)
        subdivision = self.forwarded.get('subdivision', None)
        department = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if organization:
            qs = qs.filter(organization_id=organization)
        else:
            return Position.objects.none()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if department:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª, –∏—â–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(department_id=department)
        elif subdivision:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –∏—â–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            # –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(
                Q(subdivision_id=subdivision, department__isnull=True) |
                Q(subdivision_id=subdivision)
            )
        else:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∏—â–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            qs = qs.filter(subdivision__isnull=True)

        if self.q:
            qs = qs.filter(position_name__icontains=self.q)

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('position_name')

    def get_result_label(self, item):
        parts = [item.position_name]
        if item.department:
            parts.append(f"({item.department.name})")
        elif item.subdivision:
            parts.append(f"({item.subdivision.name})")
        else:
            parts.append(f"({item.organization.short_name_ru})")
        return " ".join(parts)


class DocumentAutocomplete(autocomplete.Select2QuerySetView):
    """
    üìÑ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ:
    - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
    - –æ—Ç–¥–µ–ª—É
    """

    def get_queryset(self):
        qs = Document.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ forwarded
        organization = self.forwarded.get('organization', None)
        subdivision = self.forwarded.get('subdivision', None)
        department = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if organization:
            qs = qs.filter(organization_id=organization)
        else:
            return Document.objects.none()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É
        if department:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª, –∏—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(department_id=department)
        elif subdivision:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –∏—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            # –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(
                Q(subdivision_id=subdivision, department__isnull=True) |
                Q(subdivision_id=subdivision)
            )

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if self.q:
            qs = qs.filter(name__icontains=self.q)

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('name')

    def get_result_label(self, item):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        parts = [item.name]

        if item.department:
            parts.append(f"({item.department.name})")
        elif item.subdivision:
            parts.append(f"({item.subdivision.name})")
        else:
            parts.append(f"({item.organization.short_name_ru})")

        return " ".join(parts)


class EquipmentAutocomplete(autocomplete.Select2QuerySetView):
    """
    ‚öôÔ∏è –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

    –ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ:
    - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
    - –æ—Ç–¥–µ–ª—É
    """

    def get_queryset(self):
        qs = Equipment.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ forwarded
        organization = self.forwarded.get('organization', None)
        subdivision = self.forwarded.get('subdivision', None)
        department = self.forwarded.get('department', None)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if organization:
            qs = qs.filter(organization_id=organization)
        else:
            return Equipment.objects.none()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É
        if department:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª, –∏—â–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(department_id=department)
        elif subdivision:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –∏—â–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            # –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ—Ç–¥–µ–ª–∞
            qs = qs.filter(
                Q(subdivision_id=subdivision, department__isnull=True) |
                Q(subdivision_id=subdivision)
            )

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        if self.q:
            qs = qs.filter(
                Q(equipment_name__icontains=self.q) |
                Q(inventory_number__icontains=self.q)
            )

        return qs.select_related(
            'organization',
            'subdivision',
            'department'
        ).order_by('equipment_name')

    def get_result_label(self, item):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        parts = [f"{item.equipment_name} (–∏–Ω–≤.‚Ññ {item.inventory_number})"]

        if item.department:
            parts.append(f"- {item.department.name}")
        elif item.subdivision:
            parts.append(f"- {item.subdivision.name}")
        else:
            parts.append(f"- {item.organization.short_name_ru}")

        return " ".join(parts)