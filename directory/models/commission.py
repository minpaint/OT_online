# directory/models/commission.py

from django.db import models
from django.core.exceptions import ValidationError


class Commission(models.Model):
    """
    üîç –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π –û–¢.
    –ö–æ–º–∏—Å—Å–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–¥–µ–ª—É.
    """
    COMMISSION_TYPES = [
        ('ot', 'üõ°Ô∏è –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞'),
        ('eb', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('pb', 'üî• –ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('other', 'üìã –ò–Ω–∞—è'),
    ]

    name = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏', max_length=255)
    commission_type = models.CharField(
        '–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏',
        max_length=10,
        choices=COMMISSION_TYPES,
        default='ot'
    )
    organization = models.ForeignKey(
        'directory.Organization',
        on_delete=models.CASCADE,
        related_name='commissions',
        verbose_name='–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
        blank=True,
        null=True
    )
    subdivision = models.ForeignKey(
        'directory.StructuralSubdivision',
        on_delete=models.CASCADE,
        related_name='commissions',
        verbose_name='–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
        blank=True,
        null=True
    )
    department = models.ForeignKey(
        'directory.Department',
        on_delete=models.CASCADE,
        related_name='commissions',
        verbose_name='–û—Ç–¥–µ–ª',
        blank=True,
        null=True
    )
    is_active = models.BooleanField('–ê–∫—Ç–∏–≤–Ω–∞', default=True)
    created_at = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    updated_at = models.DateTimeField('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', auto_now=True)

    class Meta:
        verbose_name = '–ö–æ–º–∏—Å—Å–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π'
        verbose_name_plural = '–ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π'
        ordering = ['-is_active', 'name']

    def __str__(self):
        return self.name

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
        bindings = sum(1 for field in [self.department, self.subdivision, self.organization] if field is not None)
        if bindings != 1:
            raise ValidationError(
                '–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É —É—Ä–æ–≤–Ω—é: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, '
                '—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª.'
            )

    def get_level_display(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–æ–º–∏—Å—Å–∏–∏"""
        if self.department:
            return f"–£—Ä–æ–≤–µ–Ω—å –æ—Ç–¥–µ–ª–∞: {self.department.name}"
        elif self.subdivision:
            return f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {self.subdivision.name}"
        elif self.organization:
            return f"–£—Ä–æ–≤–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {self.organization.short_name_ru}"
        return "–£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"


class CommissionMember(models.Model):
    """
    üë§ –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏.
    """
    ROLE_CHOICES = [
        ('chairman', 'üëë –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏'),
        ('member', 'üë§ –ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏'),
        ('secretary', 'üìù –°–µ–∫—Ä–µ—Ç–∞—Ä—å –∫–æ–º–∏—Å—Å–∏–∏'),
    ]

    commission = models.ForeignKey(
        Commission,
        on_delete=models.CASCADE,
        related_name='members',
        verbose_name='–ö–æ–º–∏—Å—Å–∏—è'
    )
    employee = models.ForeignKey(
        'directory.Employee',
        on_delete=models.CASCADE,
        related_name='commission_roles',
        verbose_name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
    )
    role = models.CharField(
        '–†–æ–ª—å –≤ –∫–æ–º–∏—Å—Å–∏–∏',
        max_length=10,
        choices=ROLE_CHOICES,
        default='member'
    )
    is_active = models.BooleanField('–ê–∫—Ç–∏–≤–µ–Ω', default=True)

    class Meta:
        verbose_name = '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∏—Å—Å–∏–∏'
        verbose_name_plural = '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏'
        ordering = ['role', 'employee__full_name_nominative']
        unique_together = ['commission', 'employee', 'role']

    def __str__(self):
        return f"{self.get_role_display()}: {self.employee.full_name_nominative}"

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è —Ä–æ–ª–µ–π 'chairman' –∏ 'secretary' –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
        if self.is_active and self.role in ['chairman', 'secretary']:
            existing = CommissionMember.objects.filter(
                commission=self.commission,
                role=self.role,
                is_active=True
            ).exclude(id=self.id)

            if existing.exists():
                role_display = dict(self.ROLE_CHOICES)[self.role]
                raise ValidationError(
                    f'–í –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π {role_display.lower()}. '
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.'
                )