# directory/models/commission.py
from django.db import models


class Commission(models.Model):
    """
    üîç –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π –û–¢.

    –ö–æ–º–∏—Å—Å–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–¥–µ–ª—É.
    """
    COMMISSION_TYPE_CHOICES = [
        ('ot', 'üõ°Ô∏è –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞'),
        ('eb', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('pb', 'üî• –ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('other', 'üìã –ò–Ω–∞—è'),
    ]

    name = models.CharField("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏", max_length=255)
    commission_type = models.CharField(
        "–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏",
        max_length=10,
        choices=COMMISSION_TYPE_CHOICES,
        default='ot'
    )
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞", default=True)

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —É—Ä–æ–≤–Ω–µ–π)
    organization = models.ForeignKey(
        'directory.Organization',
        on_delete=models.CASCADE,
        related_name="commissions",
        verbose_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
        null=True,
        blank=True
    )
    subdivision = models.ForeignKey(
        'directory.StructuralSubdivision',
        on_delete=models.CASCADE,
        related_name="commissions",
        verbose_name="–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
        null=True,
        blank=True
    )
    department = models.ForeignKey(
        'directory.Department',
        on_delete=models.CASCADE,
        related_name="commissions",
        verbose_name="–û—Ç–¥–µ–ª",
        null=True,
        blank=True
    )

    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    class Meta:
        verbose_name = "–ö–æ–º–∏—Å—Å–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π"
        verbose_name_plural = "–ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞–Ω–∏–π"
        ordering = ['-is_active', 'name']

    def __str__(self):
        level = ""
        if self.department:
            level = f" ({self.department.name})"
        elif self.subdivision:
            level = f" ({self.subdivision.name})"
        elif self.organization:
            level = f" ({self.organization.short_name_ru})"
        return f"{self.name}{level}"

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: –∫–æ–º–∏—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É —É—Ä–æ–≤–Ω—é."""
        from django.core.exceptions import ValidationError
        levels = [
            self.organization is not None,
            self.subdivision is not None,
            self.department is not None
        ]
        if sum(levels) > 1:
            raise ValidationError(
                "–ö–æ–º–∏—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É —É—Ä–æ–≤–Ω—é: "
                "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        if self.department and not self.subdivision:
            raise ValidationError({
                'department': '–î–ª—è –æ—Ç–¥–µ–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        if self.subdivision and not self.organization:
            raise ValidationError({
                'subdivision': '–î–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª–∞ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–∞ —É–∫–∞–∑–∞–Ω—ã
        if self.department and self.subdivision and self.department.subdivision != self.subdivision:
            raise ValidationError({
                'department': '–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é'
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–±–∞ —É–∫–∞–∑–∞–Ω—ã
        if self.subdivision and self.organization and self.subdivision.organization != self.organization:
            raise ValidationError({
                'subdivision': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
            })

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—å –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω
        if sum(levels) == 0:
            raise ValidationError(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∏—Å—Å–∏–∏: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª"
            )

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)

    def get_members(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Ö —Ä–æ–ª–µ–π."""
        return self.members.select_related('employee', 'employee__position').order_by('role')

    def get_chairman(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–∏."""
        return self.members.filter(role='chairman').select_related(
            'employee', 'employee__position'
        ).first()

    def get_secretary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∫–æ–º–∏—Å—Å–∏–∏."""
        return self.members.filter(role='secretary').select_related(
            'employee', 'employee__position'
        ).first()

    def get_committee_members(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ (–±–µ–∑ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è)."""
        return self.members.filter(role='member').select_related(
            'employee', 'employee__position'
        ).all()


class CommissionMember(models.Model):
    """
    üë§ –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∏—Å—Å–∏–∏.

    –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ä–æ–ª—å (–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å, —á–ª–µ–Ω, —Å–µ–∫—Ä–µ—Ç–∞—Ä—å).
    """
    ROLE_CHOICES = [
        ('chairman', 'üëë –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏'),
        ('member', 'üë§ –ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏'),
        ('secretary', 'üìù –°–µ–∫—Ä–µ—Ç–∞—Ä—å –∫–æ–º–∏—Å—Å–∏–∏'),
    ]

    commission = models.ForeignKey(
        Commission,
        on_delete=models.CASCADE,
        related_name="members",
        verbose_name="–ö–æ–º–∏—Å—Å–∏—è"
    )
    employee = models.ForeignKey(
        'directory.Employee',
        on_delete=models.CASCADE,
        related_name="commission_roles",
        verbose_name="–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    )
    role = models.CharField(
        "–†–æ–ª—å –≤ –∫–æ–º–∏—Å—Å–∏–∏",
        max_length=10,
        choices=ROLE_CHOICES,
        default='member'
    )
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–µ–Ω", default=True)

    class Meta:
        verbose_name = "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∏—Å—Å–∏–∏"
        verbose_name_plural = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"
        ordering = ['role', 'employee__full_name_nominative']
        # –£—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        unique_together = [['commission', 'employee', 'role']]

    def __str__(self):
        role_display = dict(self.ROLE_CHOICES).get(self.role, self.role)
        return f"{self.employee.full_name_nominative} - {role_display} ({self.commission.name})"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    def get_formatted_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '–ò–≤–∞–Ω–æ–≤ –ò.–ò., –¥–∏—Ä–µ–∫—Ç–æ—Ä'"""
        from directory.utils.declension import get_initials_from_name

        name_initials = get_initials_from_name(self.employee.full_name_nominative)
        position = self.employee.position.position_name.lower() if self.employee.position else ""

        if position:
            return f"{name_initials}, {position}"
        return name_initials