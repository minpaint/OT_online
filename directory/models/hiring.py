# directory/models/hiring.py
from django.db import models
from django.utils.translation import gettext_lazy as _


class EmployeeHiring(models.Model):
    """
    üìù –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–µ–º–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É.
    """
    HIRING_TYPE_CHOICES = [
        ('new', 'üÜï –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'),
        ('transfer', '‚ÜîÔ∏è –ü–µ—Ä–µ–≤–æ–¥'),
        ('return', '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –æ—Ç–ø—É—Å–∫–∞'),
        ('contractor', 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞'),
        ('part_time', '‚åõ –°–æ–≤–º–µ—Å—Ç–∏—Ç–µ–ª—å—Å—Ç–≤–æ'),
    ]

    employee = models.ForeignKey(
        'directory.Employee',
        on_delete=models.CASCADE,
        related_name='hirings',
        verbose_name=_("–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    )

    hiring_date = models.DateField(
        verbose_name=_("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞"),
        help_text=_("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É")
    )

    start_date = models.DateField(
        verbose_name=_("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"),
        help_text=_("–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    )

    hiring_type = models.CharField(
        max_length=20,
        choices=HIRING_TYPE_CHOICES,
        default='new',
        verbose_name=_("–í–∏–¥ –ø—Ä–∏–µ–º–∞")
    )

    organization = models.ForeignKey(
        'directory.Organization',
        on_delete=models.CASCADE,
        verbose_name=_("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"),
        related_name='hirings'
    )

    subdivision = models.ForeignKey(
        'directory.StructuralSubdivision',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"),
        related_name='hirings'
    )

    department = models.ForeignKey(
        'directory.Department',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("–û—Ç–¥–µ–ª"),
        related_name='hirings'
    )

    position = models.ForeignKey(
        'directory.Position',
        on_delete=models.PROTECT,
        verbose_name=_("–î–æ–ª–∂–Ω–æ—Å—Ç—å"),
        related_name='hirings'
    )

    created_by = models.ForeignKey(
        'auth.User',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("–ö–µ–º —Å–æ–∑–¥–∞–Ω"),
        related_name='created_hirings'
    )

    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    )

    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    )

    notes = models.TextField(
        blank=True,
        verbose_name=_("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    )

    documents = models.ManyToManyField(
        'directory.GeneratedDocument',
        blank=True,
        related_name='hiring_records',
        verbose_name=_("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    )

    is_active = models.BooleanField(
        default=True,
        verbose_name=_("–ê–∫—Ç–∏–≤–µ–Ω")
    )

    class Meta:
        verbose_name = _("–ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É")
        verbose_name_plural = _("–ü—Ä–∏–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç—É")
        ordering = ['-hiring_date', 'employee__full_name_nominative']

    def __str__(self):
        return f"{self.employee.full_name_nominative} - {self.get_hiring_type_display()} ({self.hiring_date})"

    def get_hierarchy_path(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        parts = [self.organization.short_name_ru]
        if self.subdivision:
            parts.append(self.subdivision.name)
        if self.department:
            parts.append(self.department.name)
        return " ‚Üí ".join(parts)