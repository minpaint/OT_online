from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver


class SIZ(models.Model):
    """
    üõ°Ô∏è –ú–æ–¥–µ–ª—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã (–°–ò–ó)
    """
    name = models.CharField(
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –°–ò–ó",
        max_length=255
    )
    classification = models.CharField(
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞)",
        max_length=100,
        help_text="–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –°–ò–ó –ø–æ –∑–∞—â–∏—Ç–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º"
    )
    unit = models.CharField(
        "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
        max_length=50,
        default="—à—Ç."
    )
    wear_period = models.PositiveIntegerField(
        "–°—Ä–æ–∫ –Ω–æ—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö",
        default=12,
        help_text="0 –æ–∑–Ω–∞—á–∞–µ—Ç '–î–æ –∏–∑–Ω–æ—Å–∞'"
    )

    class Meta:
        verbose_name = "–°—Ä–µ–¥—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã"
        verbose_name_plural = "–°—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã"
        ordering = ['name']

    def __str__(self):
        return f"{self.name} ({self.classification})"

    @property
    def wear_period_display(self):
        """üïí –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –Ω–æ—Å–∫–∏ (—Å —É—á–µ—Ç–æ–º '–î–æ –∏–∑–Ω–æ—Å–∞')"""
        return "–î–æ –∏–∑–Ω–æ—Å–∞" if self.wear_period == 0 else f"{self.wear_period}"


class SIZNorm(models.Model):
    """
    üìã –ù–æ—Ä–º–∞ –≤—ã–¥–∞—á–∏ –°–ò–ó –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    """
    position = models.ForeignKey(
        'directory.Position',
        on_delete=models.CASCADE,
        related_name="siz_norms",
        verbose_name="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/–¥–æ–ª–∂–Ω–æ—Å—Ç—å"
    )
    siz = models.ForeignKey(
        SIZ,
        on_delete=models.CASCADE,
        related_name="norms",
        verbose_name="–°–ò–ó"
    )
    quantity = models.PositiveIntegerField(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        default=1
    )
    condition = models.CharField(
        "–£—Å–ª–æ–≤–∏–µ –≤—ã–¥–∞—á–∏",
        max_length=255,
        blank=True,
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏ –≤–ª–∞–∂–Ω–æ–π —É–±–æ—Ä–∫–µ –ø–æ–º–µ—â–µ–Ω–∏–π', '–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ' –∏ —Ç.–¥."
    )
    order = models.PositiveIntegerField(
        "–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        default=0
    )

    class Meta:
        verbose_name = "–ù–æ—Ä–º–∞ –≤—ã–¥–∞—á–∏ –°–ò–ó"
        verbose_name_plural = "–ù–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ –°–ò–ó"
        unique_together = [['position', 'siz', 'condition']]
        ordering = ['position', 'condition', 'order', 'siz__name']

    def __str__(self):
        if self.condition:
            return f"{self.position} - {self.siz} ({self.condition})"
        return f"{self.position} - {self.siz}"

    @property
    def get_condition_display(self):
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–¥–∞—á–∏"""
        return self.condition or "–û—Å–Ω–æ–≤–Ω–∞—è –Ω–æ—Ä–º–∞"


# –°–∏–≥–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ä–º –°–ò–ó
@receiver(post_save, sender='directory.Position')
def copy_reference_siz_norms(sender, instance, created, **kwargs):
    """
    üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    """
    from directory.models.position import Position

    # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    if created:
        # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        reference_norms = Position.find_reference_norms(instance.position_name)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö –¥–ª—è –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        for norm in reference_norms:
            SIZNorm.objects.create(
                position=instance,
                siz=norm.siz,
                quantity=norm.quantity,
                condition=norm.condition,
                order=norm.order
            )