from django.db import models
from django.core.exceptions import ValidationError


class Position(models.Model):
    """
    üëî –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è—Ö.
    """
    ELECTRICAL_GROUP_CHOICES = [
        ("I", "I"),
        ("II", "II"),
        ("III", "III"),
        ("IV", "IV"),
        ("V", "V"),
    ]
    COMMISSION_ROLE_CHOICES = [
        ('chairman', 'üëë –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏'),
        ('member', 'üë§ –ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏'),
        ('secretary', 'üìù –°–µ–∫—Ä–µ—Ç–∞—Ä—å –∫–æ–º–∏—Å—Å–∏–∏'),
        ('none', '‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–∏—Å—Å–∏–∏'),
    ]

    commission_role = models.CharField(
        "–†–æ–ª—å –≤ –∫–æ–º–∏—Å—Å–∏–∏",
        max_length=10,
        choices=COMMISSION_ROLE_CHOICES,
        default='none',
        help_text="–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–º–∏—Å—Å–∏–∏"
    )
    position_name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    organization = models.ForeignKey(
        'directory.Organization',
        on_delete=models.PROTECT,
        related_name="positions",
        verbose_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
    )
    subdivision = models.ForeignKey(
        'directory.StructuralSubdivision',
        on_delete=models.PROTECT,
        related_name="positions",
        verbose_name="–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
        null=True,
        blank=True
    )
    department = models.ForeignKey(
        'directory.Department',
        on_delete=models.PROTECT,
        related_name="positions",
        verbose_name="–û—Ç–¥–µ–ª",
        null=True,
        blank=True
    )

    safety_instructions_numbers = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="–ù–æ–º–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –û–¢"
    )
    electrical_safety_group = models.CharField(
        max_length=4,
        choices=ELECTRICAL_GROUP_CHOICES,
        blank=True,
        verbose_name="–ì—Ä—É–ø–ø–∞ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )
    internship_period_days = models.PositiveIntegerField(
        default=0,
        verbose_name="–°—Ä–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ (–¥–Ω–∏)"
    )

    is_responsible_for_safety = models.BooleanField(
        default=False,
        verbose_name="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –û–¢"
    )
    is_electrical_personnel = models.BooleanField(
        default=False,
        verbose_name="–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª"
    )
    can_be_internship_leader = models.BooleanField(
        default=False,
        verbose_name="–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"
    )

    documents = models.ManyToManyField(
        'directory.Document',
        blank=True,
        related_name="positions",
        verbose_name="–î–æ–∫—É–º–µ–Ω—Ç—ã"
    )
    equipment = models.ManyToManyField(
        'directory.Equipment',
        blank=True,
        related_name="positions",
        verbose_name="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
    )

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è/–¥–æ–ª–∂–Ω–æ—Å—Ç—å"
        verbose_name_plural = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏/–¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        ordering = ['position_name']
        unique_together = [
            ['position_name', 'organization', 'subdivision', 'department']
        ]

    def clean(self):
        if self.department:
            if not self.subdivision:
                raise ValidationError({
                    'department': '–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'
                })
            if self.department.organization != self.organization:
                raise ValidationError({
                    'department': '–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
                })
            if self.department.subdivision != self.subdivision:
                raise ValidationError({
                    'department': '–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é'
                })

        if self.subdivision and self.subdivision.organization != self.organization:
            raise ValidationError({
                'subdivision': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
            })

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)

    def __str__(self):
        parts = [self.position_name]
        if self.department:
            parts.append(f"({self.department.name})")
        elif self.subdivision:
            parts.append(f"({self.subdivision.name})")
        else:
            parts.append(f"({self.organization.short_name_ru})")
        return " ".join(parts)