from django.db import models
from django.core.validators import MinValueValidator, FileExtensionValidator
from django.utils import timezone
from directory.models.medical_examination import MedicalExaminationType, HarmfulFactor
from directory.models.position import Position
from directory.models.employee import Employee


class MedicalExaminationNorm(models.Model):
    """
    üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.

    –•—Ä–∞–Ω–∏—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –≤–∏–¥–∞–º–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤
    –∏ –≤—Ä–µ–¥–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏.
    """
    position_name = models.CharField(
        max_length=255,
        verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
        db_index=True,
        help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    harmful_factor = models.ForeignKey(
        HarmfulFactor,
        on_delete=models.CASCADE,
        related_name="medical_norms",
        verbose_name="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä",
        help_text="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    periodicity_override = models.PositiveIntegerField(
        verbose_name="–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (–º–µ—Å—è—Ü—ã)",
        validators=[MinValueValidator(1)],
        null=True,
        blank=True,
        help_text="–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)"
    )

    notes = models.TextField(
        verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–µ"
    )

    class Meta:
        verbose_name = "–ù–æ—Ä–º–∞ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
        verbose_name_plural = "–ù–æ—Ä–º—ã –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤"
        ordering = ['position_name', 'harmful_factor']
        unique_together = [['position_name', 'harmful_factor']]

    def __str__(self):
        return f"{self.position_name} - {self.harmful_factor}"

    @property
    def periodicity(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
        """
        if self.periodicity_override:
            return self.periodicity_override
        return self.harmful_factor.periodicity

    @property
    def examination_type(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        """
        return self.harmful_factor.examination_type


class PositionMedicalFactor(models.Model):
    """
    üîÑ –°–≤—è–∑—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –≤—Ä–µ–¥–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤.

    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö,
    –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏.
    """
    position = models.ForeignKey(
        Position,
        on_delete=models.CASCADE,
        related_name="medical_factors",
        verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
    )

    harmful_factor = models.ForeignKey(
        HarmfulFactor,
        on_delete=models.CASCADE,
        related_name="position_factors",
        verbose_name="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä"
    )

    periodicity_override = models.PositiveIntegerField(
        verbose_name="–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (–º–µ—Å—è—Ü—ã)",
        validators=[MinValueValidator(1)],
        null=True,
        blank=True,
        help_text="–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)"
    )

    is_disabled = models.BooleanField(
        default=False,
        verbose_name="–û—Ç–∫–ª—é—á–µ–Ω–æ",
        help_text="–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, —Ñ–∞–∫—Ç–æ—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
    )

    notes = models.TextField(
        verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–∞ –∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
    )

    class Meta:
        verbose_name = "–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        verbose_name_plural = "–í—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"
        unique_together = [['position', 'harmful_factor']]
        ordering = ['position', 'harmful_factor']

    def __str__(self):
        status = " (–æ—Ç–∫–ª—é—á–µ–Ω–æ)" if self.is_disabled else ""
        return f"{self.position} - {self.harmful_factor}{status}"

    @property
    def periodicity(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
        """
        if self.periodicity_override:
            return self.periodicity_override
        return self.harmful_factor.periodicity


class EmployeeMedicalExamination(models.Model):
    """
    üë®‚Äç‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """
    STATUS_CHOICES = [
        ('completed', '–ü—Ä–æ–π–¥–µ–Ω'),
        ('expired', '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω'),
        ('scheduled', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'),
        ('to_issue', '–ù—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    ]

    employee = models.ForeignKey(
        Employee,
        on_delete=models.CASCADE,
        related_name="medical_examinations",
        verbose_name="–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        help_text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –º–µ–¥–æ—Å–º–æ—Ç—Ä"
    )

    examination_type = models.ForeignKey(
        MedicalExaminationType,
        on_delete=models.PROTECT,
        related_name="employee_examinations",
        verbose_name="–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–í–∏–¥ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    harmful_factor = models.ForeignKey(
        HarmfulFactor,
        on_delete=models.PROTECT,
        related_name="employee_examinations",
        verbose_name="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä",
        help_text="–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –º–µ–¥–æ—Å–º–æ—Ç—Ä"
    )

    date_completed = models.DateField(
        verbose_name="–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è",
        help_text="–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    next_date = models.DateField(
        verbose_name="–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    medical_certificate = models.FileField(
        upload_to='medical_certificates/%Y/%m/',
        verbose_name="–°–∫–∞–Ω —Å–ø—Ä–∞–≤–∫–∏",
        blank=True,
        null=True,
        validators=[FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])]
    )

    status = models.CharField(
        max_length=20,
        verbose_name="–°—Ç–∞—Ç—É—Å",
        choices=STATUS_CHOICES,
        default='completed',
        help_text="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"
    )

    notes = models.TextField(
        verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–µ"
    )

    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )

    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )

    class Meta:
        verbose_name = "–ú–µ–¥–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        verbose_name_plural = "–ú–µ–¥–æ—Å–º–æ—Ç—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        ordering = ['-date_completed', 'employee']

    def __str__(self):
        return f"{self.employee} - {self.examination_type} ({self.date_completed})"

    @property
    def is_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"""
        return self.next_date < timezone.now().date()

    @property
    def days_remaining(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞"""
        today = timezone.now().date()
        if self.next_date < today:
            return 0
        return (self.next_date - today).days

    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        today = timezone.now().date()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã
        if self.next_date < today:
            self.status = 'expired'

        super().save(*args, **kwargs)