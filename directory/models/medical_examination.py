from django.db import models
from django.core.validators import MinValueValidator, FileExtensionValidator
from django.utils import timezone


class MedicalExaminationType(models.Model):
    """
    üè• –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∏–¥–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–∞—Ö –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π, –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–π –∏ —Ç.–¥.)
    """
    name = models.CharField(
        max_length=255,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
        unique=True,
        help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞"
    )

    class Meta:
        verbose_name = "–í–∏–¥ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞"
        verbose_name_plural = "–í–∏–¥—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤"
        ordering = ['name']

    def __str__(self):
        return self.name


class HarmfulFactor(models.Model):
    """
    ‚ò¢Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤.
    """
    short_name = models.CharField(
        max_length=50,
        verbose_name="–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        help_text="–ö—Ä–∞—Ç–∫–æ–µ –∫–æ–¥–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞"
    )

    full_name = models.CharField(
        max_length=255,
        verbose_name="–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        help_text="–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞"
    )

    examination_type = models.ForeignKey(
        MedicalExaminationType,
        on_delete=models.PROTECT,
        related_name="harmful_factors",
        verbose_name="–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–í–∏–¥ –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞"
    )

    periodicity = models.PositiveIntegerField(
        verbose_name="–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü—ã)",
        validators=[MinValueValidator(1)],
        help_text="–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞ –≤ –º–µ—Å—è—Ü–∞—Ö"
    )

    class Meta:
        verbose_name = "–í—Ä–µ–¥–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä"
        verbose_name_plural = "–í—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"
        ordering = ['short_name']
        unique_together = [['short_name', 'examination_type']]

    def __str__(self):
        return f"{self.short_name} - {self.full_name}"


class MedicalSettings(models.Model):
    """
    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤.

    –•—Ä–∞–Ω–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–æ—Å–º–æ—Ç—Ä–∞–º–∏.
    """
    days_before_issue = models.PositiveIntegerField(
        default=30,
        verbose_name="–î–Ω–µ–π –¥–æ –≤—ã–¥–∞—á–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        help_text="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ù—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'"
    )

    days_before_email = models.PositiveIntegerField(
        default=45,
        verbose_name="–î–Ω–µ–π –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email",
        help_text="–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    )

    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤"

    def __str__(self):
        return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä–æ–≤"

    @classmethod
    def get_settings(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        settings, created = cls.objects.get_or_create(pk=1)
        return settings