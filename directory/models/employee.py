from django.db import models
from django.core.exceptions import ValidationError
from django.utils import timezone

class EmployeeQuerySet(models.QuerySet):
    def tree_visible(self):
        """–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –¥—Ä–µ–≤–µ (–∏—Å–∫–ª—é—á–∞—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ —É–≤–æ–ª–µ–Ω–Ω—ã—Ö)"""
        return self.exclude(status__in=['candidate', 'fired'])
    def candidates(self):
        """–¢–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã"""
        return self.filter(status='candidate')

class Employee(models.Model):
    """
    üë§ –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.
    """

    HEIGHT_CHOICES = [
        ("158-164 —Å–º", "158-164 —Å–º"),
        ("170-176 —Å–º", "170-176 —Å–º"),
        ("182-188 —Å–º", "182-188 —Å–º"),
        ("194-200 —Å–º", "194-200 —Å–º"),
    ]
    CLOTHING_SIZE_CHOICES = [
        ("44-46", "44-46"),
        ("48-50", "48-50"),
        ("52-54", "52-54"),
        ("56-58", "56-58"),
        ("60-62", "60-62"),
        ("64-66", "64-66"),
    ]
    SHOE_SIZE_CHOICES = [(str(i), str(i)) for i in range(36, 49)]

    # –¢–∏–ø—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    CONTRACT_TYPE_CHOICES = [
        ('standard', '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä'),
        ('contractor', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞'),
        ('part_time', '–°–æ–≤–º–µ—â–µ–Ω–∏–µ'),
        ('transfer', '–ü–µ—Ä–µ–≤–æ–¥'),
        ('return', '–í—ã—Ö–æ–¥ –∏–∑ –î–û'),
    ]

    # –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    EMPLOYEE_STATUS_CHOICES = [
        ('candidate', '–ö–∞–Ω–¥–∏–¥–∞—Ç'),
        ('active', '–û—Ñ–æ—Ä–º–ª–µ–Ω'),
        ('maternity_leave', '–í –¥–µ–∫—Ä–µ—Ç–Ω–æ–º –æ—Ç–ø—É—Å–∫–µ'),
        ('part_time', '–°–æ–≤–º–µ—Å—Ç–∏—Ç–µ–ª—å'),
        ('fired', '–£–≤–æ–ª–µ–Ω'),
    ]

    full_name_nominative = models.CharField(
        max_length=255,
        verbose_name="–§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π)"
    )
    full_name_dative = models.CharField(
        max_length=255,
        verbose_name="–§–ò–û (–¥–∞—Ç–µ–ª—å–Ω—ã–π)"
    )
    date_of_birth = models.DateField(verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    place_of_residence = models.TextField(verbose_name="–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
    organization = models.ForeignKey(
        'directory.Organization',
        on_delete=models.PROTECT,
        verbose_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
        related_name='employees'
    )
    subdivision = models.ForeignKey(
        'directory.StructuralSubdivision',
        on_delete=models.PROTECT,
        verbose_name="–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
        null=True,
        blank=True,
        related_name='employees'
    )
    department = models.ForeignKey(
        'directory.Department',
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name="–û—Ç–¥–µ–ª",
        related_name='employees'
    )
    position = models.ForeignKey(
        'directory.Position',
        on_delete=models.PROTECT,
        verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
    )
    height = models.CharField(
        max_length=15,
        choices=HEIGHT_CHOICES,
        blank=True,
        verbose_name="–†–æ—Å—Ç"
    )
    clothing_size = models.CharField(
        max_length=5,
        choices=CLOTHING_SIZE_CHOICES,
        blank=True,
        verbose_name="–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã"
    )
    shoe_size = models.CharField(
        max_length=2,
        choices=SHOE_SIZE_CHOICES,
        blank=True,
        verbose_name="–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏"
    )
    contract_type = models.CharField(
        verbose_name="–í–∏–¥ –¥–æ–≥–æ–≤–æ—Ä–∞",
        max_length=20,
        choices=CONTRACT_TYPE_CHOICES,
        default='standard'
    )
    # ‚úÖ –ù–æ–≤–æ–µ –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    status = models.CharField(
        verbose_name="–°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        max_length=20,
        choices=EMPLOYEE_STATUS_CHOICES,
        default='active',
        db_index=True,
        help_text="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
    )
    hire_date = models.DateField(
        verbose_name="–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
        default=timezone.now
    )
    start_date = models.DateField(
        verbose_name="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
        default=timezone.now
    )
    is_contractor = models.BooleanField(
        default=False,
        verbose_name="–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞",
        help_text="–£—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ contract_type"
    )

    objects = EmployeeQuerySet.as_manager()

    class Meta:
        verbose_name = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        verbose_name_plural = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
        ordering = ['full_name_nominative']

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–¥–µ–ª–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
        if self.position.organization != self.organization:
            raise ValidationError({
                'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
            })
        if self.subdivision:
            if self.subdivision.organization != self.organization:
                raise ValidationError({
                    'subdivision': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
                })
            if self.position.subdivision and self.position.subdivision != self.subdivision:
                raise ValidationError({
                    'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é'
                })
        if self.department:
            if not self.subdivision:
                raise ValidationError({
                    'department': '–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'
                })
            if self.department.organization != self.organization:
                raise ValidationError({
                    'department': '–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
                })
            if self.department.subdivision != self.subdivision:
                raise ValidationError({
                    'department': '–û—Ç–¥–µ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é'
                })
            if self.position.department and self.position.department != self.department:
                raise ValidationError({
                    'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É'
                })

    def save(self, *args, **kwargs):
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è is_contractor —Å contract_type –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.is_contractor = (self.contract_type == 'contractor')
        self.clean()
        super().save(*args, **kwargs)

    def get_status_display_emoji(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        status_emojis = {
            'candidate': 'üìù',
            'active': '‚úÖ',
            'maternity_leave': 'üë∂',
            'part_time': '‚åõ',
            'fired': 'üö´',
        }
        emoji = status_emojis.get(self.status, '')
        return f"{emoji} {self.get_status_display()}"

    def get_contract_type_display(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        return dict(self.CONTRACT_TYPE_CHOICES).get(self.contract_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    @property
    def name_with_position(self):
        """üë∑ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "–§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π) ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"."""
        if self.position:
            return f"{self.full_name_nominative} ‚Äî {self.position}"
        return self.full_name_nominative

    def __str__(self):
        parts = [self.full_name_nominative, "-", str(self.position)]
        return " ".join(parts)

    def tree_display_name(self):
        """üë§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."""
        return f"{self.full_name_nominative} ‚Äî {self.position.position_name}"