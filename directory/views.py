from django.views.generic import CreateView, ListView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.contrib.auth import login
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters

from .models import (
    Position,
    Organization,
    StructuralSubdivision,
    Department,
    Employee
)
from .forms.registration import CustomUserCreationForm


class HomeView(ListView):
    """üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã"""
    template_name = 'directory/home.html'
    model = Organization

    def get_context_data(self, **kwargs):
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        context = super().get_context_data(**kwargs)
        context.update({
            'total_employees': Employee.objects.count(),  # üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            'total_positions': Position.objects.count(),  # üëî –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
            'total_organizations': Organization.objects.count(),  # üè¢ –í—Å–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
            'total_subdivisions': StructuralSubdivision.objects.count(),  # üè≠ –í—Å–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        })
        return context


class EmployeeListView(LoginRequiredMixin, ListView):
    """üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    model = Employee
    template_name = 'directory/employees/list.html'
    context_object_name = 'employees'
    paginate_by = 20

    def get_queryset(self):
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        queryset = (
            Employee.objects
            .select_related('subdivision', 'position', 'organization', 'department')
            .order_by('full_name_nominative')
        )

        if organization_id := self.request.GET.get('organization'):
            queryset = queryset.filter(organization_id=organization_id)
        if subdivision_id := self.request.GET.get('subdivision'):
            queryset = queryset.filter(subdivision_id=subdivision_id)
        return queryset

    def get_context_data(self, **kwargs):
        """üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        context = super().get_context_data(**kwargs)
        context.update({
            'organizations': Organization.objects.all(),  # üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            'subdivisions': StructuralSubdivision.objects.all(),  # üè≠ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            'selected_organization': self.request.GET.get('organization'),
            'selected_subdivision': self.request.GET.get('subdivision'),
        })
        return context


class EmployeeCreateView(LoginRequiredMixin, CreateView):
    """üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    model = Employee
    template_name = 'directory/employees/form.html'
    success_url = reverse_lazy('directory:employee_list')
    fields = [
        'full_name_nominative',  # üìù –§–ò–û –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        'full_name_dative',  # üìù –§–ò–û –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
        'organization',  # üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        'subdivision',  # üè≠ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        'department',  # üìÇ –û—Ç–¥–µ–ª
        'position',  # üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å
        'is_contractor',  # üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞
        'date_of_birth',  # üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        'place_of_residence',  # üè† –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
        'height',  # üìè –†–æ—Å—Ç
        'clothing_size',  # üëï –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã
        'shoe_size'  # üëû –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏
    ]

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        return context


@method_decorator([sensitive_post_parameters(), csrf_protect, never_cache], name='dispatch')
class UserRegistrationView(CreateView):
    """üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
    form_class = CustomUserCreationForm
    template_name = 'directory/registration/register.html'
    success_url = reverse_lazy('directory:home')

    def get_context_data(self, **kwargs):
        """üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        context = super().get_context_data(**kwargs)
        context.update({
            'title': _('‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            'organizations': Organization.objects.all().order_by('full_name_ru'),
        })
        return context

    def form_valid(self, form):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã"""
        try:
            user = form.save()
            login(self.request, user)
            messages.success(
                self.request,
                _("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %(username)s!") % {
                    'username': user.get_full_name() or user.username
                }
            )
            return redirect(self.success_url)
        except Exception as e:
            messages.error(
                self.request,
                _("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            )
            return self.form_invalid(form)

    def form_invalid(self, form):
        """‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã"""
        for field, errors in form.errors.items():
            for error in errors:
                messages.error(
                    self.request,
                    f"‚ö†Ô∏è {form.fields[field].label}: {error}"
                )
        return render(
            self.request,
            self.template_name,
            self.get_context_data(form=form)
        )

    def dispatch(self, request, *args, **kwargs):
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if request.user.is_authenticated:
            messages.info(request, _("‚ÑπÔ∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."))
            return redirect('directory:home')
        return super().dispatch(request, *args, **kwargs)


@login_required
@never_cache
def get_subdivisions(request):
    """üè≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    organization_id = request.GET.get('organization')
    subdivisions = (
        StructuralSubdivision.objects
        .filter(organization_id=organization_id)
        .order_by('name')
        .values('id', 'name')
    )
    return JsonResponse(list(subdivisions), safe=False)


@login_required
@never_cache
def get_positions(request):
    """üëî –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é"""
    subdivision_id = request.GET.get('subdivision')
    positions = (
        Position.objects
        .filter(subdivision_id=subdivision_id)
        .order_by('position_name')
        .values('id', 'position_name')
    )
    return JsonResponse(list(positions), safe=False)


@login_required
@never_cache
def get_departments(request):
    """üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é"""
    subdivision_id = request.GET.get('subdivision')
    departments = (
        Department.objects
        .filter(subdivision_id=subdivision_id)
        .order_by('name')
        .values('id', 'name')
    )
    return JsonResponse(list(departments), safe=False)