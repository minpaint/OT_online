# directory/document_generators/siz_card_docx_generator.py
"""
üõ°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –≤ DOCX —Ñ–æ—Ä–º–∞—Ç–µ

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
—É—á–µ—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX,
–∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Ö–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.
"""

import logging
import traceback
from typing import Dict, Any, Optional, List
from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

from directory.models.document_template import GeneratedDocument
from directory.document_generators.base import (
    get_document_template,
    prepare_employee_context,
    generate_docx_from_template,
)
from directory.models.siz import SIZNorm, SIZIssued

logger = logging.getLogger(__name__)


def generate_siz_card_docx(employee, user=None, custom_context: Optional[Dict[str, Any]] = None) -> Optional[
    GeneratedDocument]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ—Ç–∞ –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX.

    Args:
        employee: –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        custom_context: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                        –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å selected_norm_ids –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ—Ä–º –°–ò–ó

    Returns:
        Optional[GeneratedDocument]: –°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
        template = get_document_template("siz_card_docx", employee)
        if not template:
            logger.error("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = prepare_employee_context(employee)

        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ—Ä–º–∞—Ö –°–ò–ó
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        selected_norm_ids = custom_context.get('selected_norm_ids', []) if custom_context else []

        norms_data = []
        if employee.position:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ—Ä–º –°–ò–ó
            norm_query = SIZNorm.objects.filter(position=employee.position).select_related('siz')

            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
            if selected_norm_ids:
                norm_query = norm_query.filter(id__in=selected_norm_ids)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã
            siz_norms = norm_query

            for norm in siz_norms:
                norms_data.append({
                    'name': norm.siz.name,
                    'classification': norm.siz.classification,
                    'unit': norm.siz.unit,
                    'quantity': norm.quantity,
                    'wear_period': "–î–æ –∏–∑–Ω–æ—Å–∞" if norm.siz.wear_period == 0 else f"{norm.siz.wear_period} –º–µ—Å."
                })

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(norms_data)} –Ω–æ—Ä–º –°–ò–ó –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")

        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
        issued_data = []
        siz_issued = SIZIssued.objects.filter(employee=employee).select_related('siz')

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –°–ò–ó –ø–æ –Ω–∏–º
        if selected_norm_ids:
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ò–ó
            selected_siz_ids = SIZNorm.objects.filter(
                id__in=selected_norm_ids
            ).values_list('siz_id', flat=True)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ –°–ò–ó –ø–æ —ç—Ç–∏–º ID
            siz_issued = siz_issued.filter(siz_id__in=selected_siz_ids)

        for issued in siz_issued:
            issued_data.append({
                'name': issued.siz.name,
                'classification': issued.siz.classification,
                'issue_date': issued.issue_date.strftime("%d.%m.%Y") if issued.issue_date else "",
                'quantity': issued.quantity,
                'wear_percentage': f"{issued.wear_percentage}%" if issued.wear_percentage is not None else "",
                'return_date': issued.return_date.strftime("%d.%m.%Y") if issued.return_date else "",
                'cost': str(issued.cost) if issued.cost else "",
                'is_returned': issued.is_returned
            })

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(issued_data)} –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")

        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        context.update({
            # –ù–æ–º–µ—Ä –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            'card_number': f"SIZ-{employee.id}",

            # –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∏)
            'employee_full_name': employee.full_name_nominative,
            'employee_gender': "–ú—É–∂—Å–∫–æ–π",  # –ó–∞–≥–ª—É—à–∫–∞
            'employee_height': employee.height or "170-176 —Å–º",
            'employee_clothing_size': employee.clothing_size or "48-50",
            'employee_shoe_size': employee.shoe_size or "42",
            'employee_tab_number': f"T-{employee.id}",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞

            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            'department_name': employee.department.name if employee.department else
            (employee.subdivision.name if employee.subdivision else ""),
            'position_name': employee.position.position_name if employee.position else "",

            # –î–∞—Ç—ã
            'hire_date': employee.hire_date.strftime("%d.%m.%Y") if hasattr(employee,
                                                                            'hire_date') and employee.hire_date else "",
            'position_change_date': "",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

            # –°–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü
            'siz_norms': norms_data,
            'siz_issued': issued_data,

            # –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–µ
            'NORMS_MARKER': 'DOCMARKER_NORMS',
            'ISSUED_MARKER': 'DOCMARKER_ISSUED'

            # –ë–ª–æ–∫ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
            # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
        })

        # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        if custom_context:
            context.update(custom_context)

        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–±–ª–∏—Ü
        return generate_docx_from_template(
            template,
            context,
            employee,
            user,
            post_processor=process_siz_card_tables
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –°–ò–ó: {str(e)}")
        logger.error(traceback.format_exc())
        return None


def process_siz_card_tables(doc, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –°–ò–ó:
    1. –ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–æ—Ä–º –°–ò–ó –ø–æ –º–∞—Ä–∫–µ—Ä—É DOCMARKER_NORMS
    2. –ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –ø–æ –º–∞—Ä–∫–µ—Ä—É DOCMARKER_ISSUED
    3. –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    Args:
        doc: –î–æ–∫—É–º–µ–Ω—Ç DocxTemplate
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        doc: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """
    try:
        docx_document = doc.docx
        norms_data = context.get('siz_norms', [])
        issued_data = context.get('siz_issued', [])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–æ—Ä–º –°–ò–ó
        norms_table, norms_row_idx = _find_table_by_marker(docx_document, 'DOCMARKER_NORMS')
        if norms_table and norms_row_idx is not None:
            _process_norms_table(norms_table, norms_row_idx, norms_data)
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–æ—Ä–º –°–ò–ó —Å –º–∞—Ä–∫–µ—Ä–æ–º DOCMARKER_NORMS")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
        issued_table, issued_row_idx = _find_table_by_marker(docx_document, 'DOCMARKER_ISSUED')
        if issued_table and issued_row_idx is not None:
            _process_issued_table(issued_table, issued_row_idx, issued_data)
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó —Å –º–∞—Ä–∫–µ—Ä–æ–º DOCMARKER_ISSUED")

        return doc

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó: {str(e)}")
        logger.error(traceback.format_exc())
        return doc


def _find_table_by_marker(docx_document, marker):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç—Ä–æ–∫—É –≤ –Ω–µ–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ä—É.

    Args:
        docx_document: –î–æ–∫—É–º–µ–Ω—Ç docx
        marker: –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        tuple: (–Ω–∞–π–¥–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞, –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–æ–º) –∏–ª–∏ (None, None)
    """
    for table in docx_document.tables:
        for row_idx, row in enumerate(table.rows):
            for cell in row.cells:
                if marker in cell.text:
                    return table, row_idx
    return None, None


def _process_norms_table(table, template_row_idx, norms_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–æ—Ä–º –°–ò–ó.

    Args:
        table: –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        template_row_idx: –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏-—à–∞–±–ª–æ–Ω–∞
        norms_data: –î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º –°–ò–ó
    """
    # –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    template_row = table.rows[template_row_idx]
    for cell in template_row.cells:
        cell.text = cell.text.replace('DOCMARKER_NORMS', '')

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã—Ö–æ–¥–∏–º
    if not norms_data:
        return

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    _fill_norm_row(template_row, norms_data[0])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    for norm in norms_data[1:]:
        new_row = table.add_row()
        _copy_row_format(template_row, new_row)
        _fill_norm_row(new_row, norm)


def _fill_norm_row(row, norm_data):
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –Ω–æ—Ä–º –¥–∞–Ω–Ω—ã–º–∏.

    Args:
        row: –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        norm_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if len(row.cells) >= 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –Ω–æ—Ä–º –°–ò–ó
        try:
            row.cells[0].text = norm_data.get('name', '')
            row.cells[1].text = norm_data.get('classification', '')
            row.cells[2].text = norm_data.get('unit', '')
            row.cells[3].text = str(norm_data.get('quantity', ''))
            row.cells[4].text = norm_data.get('wear_period', '')

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            _apply_cell_formats(row)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–æ—Ä–º—ã –°–ò–ó: {str(e)}")


def _process_issued_table(table, template_row_idx, issued_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó.

    Args:
        table: –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        template_row_idx: –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏-—à–∞–±–ª–æ–Ω–∞
        issued_data: –î–∞–Ω–Ω—ã–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó
    """
    # –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    template_row = table.rows[template_row_idx]
    for cell in template_row.cells:
        cell.text = cell.text.replace('DOCMARKER_ISSUED', '')

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã—Ö–æ–¥–∏–º
    if not issued_data:
        return

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    _fill_issued_row(template_row, issued_data[0])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    for issued in issued_data[1:]:
        new_row = table.add_row()
        _copy_row_format(template_row, new_row)
        _fill_issued_row(new_row, issued)


def _fill_issued_row(row, issued_data):
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó –¥–∞–Ω–Ω—ã–º–∏.

    Args:
        row: –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        issued_data: –î–∞–Ω–Ω—ã–µ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –°–ò–ó
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        cells_count = len(row.cells)
        if cells_count < 7:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó: {cells_count}")
            return

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏
        row.cells[0].text = issued_data.get('name', '')
        row.cells[1].text = issued_data.get('classification', '')
        row.cells[2].text = issued_data.get('issue_date', '')
        row.cells[3].text = str(issued_data.get('quantity', ''))
        row.cells[4].text = issued_data.get('wear_percentage', '')

        if issued_data.get('is_returned') and cells_count >= 11:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –°–ò–ó
            row.cells[7].text = issued_data.get('return_date', '')
            row.cells[8].text = str(issued_data.get('quantity', ''))  # –¢–æ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            row.cells[9].text = issued_data.get('wear_percentage', '')  # –¢–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–Ω–æ—Å–∞
            row.cells[10].text = issued_data.get('cost', '')

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        _apply_cell_formats(row)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–ò–ó: {str(e)}")


def _copy_row_format(src_row, dst_row):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥—É—é.

    Args:
        src_row: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—à–∞–±–ª–æ–Ω)
        dst_row: –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
        dst_row.height = src_row.height

        # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ —è—á–µ–µ–∫, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        for idx in range(min(len(src_row.cells), len(dst_row.cells))):
            src_cell = src_row.cells[idx]
            dst_cell = dst_row.cells[idx]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
            _set_cell_border(dst_cell)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏: {str(e)}")


def _apply_cell_formats(row):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –≤ —Å—Ç—Ä–æ–∫–µ.

    Args:
        row: –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    """
    for cell in row.cells:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —è—á–µ–π–∫–µ
        for paragraph in cell.paragraphs:
            for run in paragraph.runs:
                run.font.name = 'Times New Roman'
                run.font.size = Pt(10)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
        _set_cell_border(cell)


def _set_cell_border(cell):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è —è—á–µ–π–∫–∏.

    Args:
        cell: –Ø—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    """
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã single 4 Œµ–º
    borders = {
        "top": {"val": "single", "sz": "4", "color": "000000"},
        "left": {"val": "single", "sz": "4", "color": "000000"},
        "bottom": {"val": "single", "sz": "4", "color": "000000"},
        "right": {"val": "single", "sz": "4", "color": "000000"},
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —è—á–µ–π–∫–µ
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    tcBorders = OxmlElement('w:tcBorders')
    tcPr.append(tcBorders)

    # –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä–∞–Ω–∏—Ü—É
    for edge, attrs in borders.items():
        border = OxmlElement(f'w:{edge}')
        border.set(qn('w:val'), attrs['val'])
        border.set(qn('w:sz'), attrs['sz'])
        border.set(qn('w:color'), attrs['color'])
        border.set(qn('w:space'), "0")
        tcBorders.append(border)