# directory/document_generators/siz_card_docx_generator.py
"""
üõ°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á—ë—Ç–∞ –°–ò–ó (DOCX).

- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –º–∞—Ä–∫–µ—Ä–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ª–∏—Å—Ç—É –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É—Å–ª–æ–≤–∏–π –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
- –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
"""

import logging
import traceback
import re
from typing import Dict, Any, Optional, List

from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.enum.text import WD_ALIGN_PARAGRAPH

from directory.models.document_template import GeneratedDocument
from directory.document_generators.base import (
    get_document_template,
    prepare_employee_context,
    generate_docx_from_template,
)
from directory.models.siz import SIZNorm
from directory.models.siz_issued import SIZIssued

logger = logging.getLogger(__name__)


# =============================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó
# =============================================

def generate_siz_card_docx(
        employee,
        user=None,
        custom_context: Optional[Dict[str, Any]] = None,
) -> Optional[GeneratedDocument]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É—á—ë—Ç–∞ –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""

    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = get_document_template("siz_card", employee)
        if not template:
            raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = prepare_employee_context(employee)
        full_name = context.get("fio_nominative", "")

        # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        gender = _gender_from_patronymic(full_name)

        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó
        selected_norm_ids = []
        if custom_context:
            if 'selected_norm_ids' in custom_context:
                selected_norm_ids = custom_context['selected_norm_ids']
            elif 'selected_norms' in custom_context:
                selected_norm_ids = custom_context['selected_norms']

        # 5. –ï—Å–ª–∏ –Ω–æ—Ä–º—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        if not selected_norm_ids and hasattr(employee, 'position') and employee.position:
            logger.info("–ù–æ—Ä–º—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
            selected_norm_ids = list(SIZNorm.objects.filter(
                position=employee.position
            ).values_list('id', flat=True))

        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó
        norms_data = []
        if employee.position and selected_norm_ids:
            norm_query = SIZNorm.objects.filter(
                id__in=selected_norm_ids
            ).select_related('siz')

            for norm in norm_query:
                norms_data.append({
                    "name": norm.siz.name,
                    "classification": norm.siz.classification,
                    "unit": norm.siz.unit,
                    "quantity": norm.quantity,
                    "wear_period": "–î–æ –∏–∑–Ω–æ—Å–∞" if norm.siz.wear_period == 0 else str(norm.siz.wear_period),
                    "condition": norm.condition  # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                })

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(norms_data)} –Ω–æ—Ä–º –°–ò–ó –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

        # 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.update({
            "card_number": f"SIZ-{employee.id}",
            "employee_full_name": full_name,
            "employee_gender": gender,
            "employee_height": getattr(employee, "height", "") or "",
            "employee_clothing_size": getattr(employee, "clothing_size", "") or "",
            "employee_shoe_size": getattr(employee, "shoe_size", "") or "",
            "department_name": context.get("department", ""),
            "position_name": context.get("position_nominative", ""),
            "hire_date": employee.hire_date.strftime("%d.%m.%Y") if hasattr(employee,
                                                                            "hire_date") and employee.hire_date else "",

            # –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
            "NORMS_TABLE": "NORMS_TABLE_MARKER",
            "ISSUED_TABLE": "ISSUED_TABLE_MARKER",

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü
            "siz_norms": norms_data,
            "issued_siz": norms_data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        })

        # 8. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if custom_context:
            for k, v in custom_context.items():
                if k not in ['selected_norm_ids', 'selected_norms']:
                    context[k] = v

        # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ + –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
        return generate_docx_from_template(
            template,
            context,
            employee,
            user,
            post_processor=process_siz_card_tables,
        )

    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó: %s", exc)
        logger.error(traceback.format_exc())
        return None


# =========================
#   –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ë–õ–ò–¶
# =========================

def process_siz_card_tables(doc, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º –°–ò–ó
        norms_data = context.get("siz_norms", [])
        if not norms_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ—Ä–º–∞—Ö –°–ò–ó –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü")
            return doc

        docx_document = doc.docx

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
        processed_front = False
        for table in docx_document.tables:
            row_idx, cell_idx = _find_marker_in_table(table, "NORMS_TABLE_MARKER")
            if row_idx is not None:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                process_front_table(table, row_idx, cell_idx, norms_data)
                processed_front = True
                break

        if not processed_front:
            logger.warning("–ú–∞—Ä–∫–µ—Ä NORMS_TABLE_MARKER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–æ—Ä–æ—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        processed_back = False
        for table in docx_document.tables:
            row_idx, cell_idx = _find_marker_in_table(table, "ISSUED_TABLE_MARKER")
            if row_idx is not None:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                process_back_table(table, row_idx, cell_idx, norms_data)
                processed_back = True
                break

        if not processed_back:
            logger.warning("–ú–∞—Ä–∫–µ—Ä ISSUED_TABLE_MARKER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")

        return doc

    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: %s", exc)
        logger.error(traceback.format_exc())
        return doc


def process_front_table(table, row_idx, cell_idx, norms_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è —É—Å–ª–æ–≤–∏–π."""
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ—Ä–º—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
        grouped_norms = {}
        for norm in norms_data:
            condition = norm.get("condition", "")
            if condition not in grouped_norms:
                grouped_norms[condition] = []
            grouped_norms[condition].append(norm)

        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ —è—á–µ–π–∫–∏
        cell = table.rows[row_idx].cells[cell_idx]
        cell.text = ""

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ—Ä–º—ã –±–µ–∑ —É—Å–ª–æ–≤–∏–π
        current_row = row_idx
        if "" in grouped_norms and grouped_norms[""]:
            for norm in grouped_norms[""]:
                if current_row >= len(table.rows):
                    new_row = table.add_row()
                else:
                    new_row = table.rows[current_row]

                _fill_front_row(new_row, norm)
                current_row += 1

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–æ—Ä–º–∞–º–∏
        for condition, norms in grouped_norms.items():
            if not condition:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è, –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—Å–ª–æ–≤–∏–µ–º
            if current_row >= len(table.rows):
                condition_row = table.add_row()
            else:
                condition_row = table.rows[current_row]

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ —É—Å–ª–æ–≤–∏—è
            first_cell = condition_row.cells[0]
            for i in range(1, len(condition_row.cells)):
                if i < len(condition_row.cells):
                    first_cell.merge(condition_row.cells[i])

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏—è
            first_cell.text = condition
            for paragraph in first_cell.paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in paragraph.runs:
                    run.italic = True

            current_row += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
            for norm in norms:
                if current_row >= len(table.rows):
                    new_row = table.add_row()
                else:
                    new_row = table.rows[current_row]

                _fill_front_row(new_row, norm)
                current_row += 1

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ
        _apply_table_format(table)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: {str(e)}")
        logger.error(traceback.format_exc())


def process_back_table(table, row_idx, cell_idx, norms_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∑–∞–ø–æ–ª–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏."""
    try:
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ —è—á–µ–π–∫–∏
        cell = table.rows[row_idx].cells[cell_idx]
        cell.text = ""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0-based): 0, 1, 3, 6
        cols_to_fill = [0, 1, 3, 6]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã–º–∏
        current_row = row_idx
        for norm in norms_data:
            if current_row >= len(table.rows):
                new_row = table.add_row()
            else:
                new_row = table.rows[current_row]

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if 0 < len(new_row.cells):
                new_row.cells[0].text = norm.get("name", "")

            if 1 < len(new_row.cells):
                new_row.cells[1].text = norm.get("classification", "")

            if 3 < len(new_row.cells):
                new_row.cells[3].text = str(norm.get("quantity", ""))

            if 6 < len(new_row.cells):
                new_row.cells[6].text = "‚úì"  # –ì–∞–ª–æ—á–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ —Ä–∞—Å–ø–∏—Å–∫–∏

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫–∏
            for col in cols_to_fill:
                if col < len(new_row.cells):
                    for paragraph in new_row.cells[col].paragraphs:
                        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    _set_cell_border(new_row.cells[col])

            current_row += 1

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ
        _apply_table_format(table)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: {str(e)}")
        logger.error(traceback.format_exc())


# --------------------------
#   –£–¢–ò–õ–ò–¢–´
# --------------------------

def _gender_from_patronymic(full_name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É."""
    parts = full_name.split()
    if len(parts) >= 3:
        patronymic = parts[2]
        if patronymic.endswith(("–Ω–∞", "–≤–Ω–∞", "—á–Ω–∞", "–∫—ã–∑—ã", "–∑—ã")):
            return "–ñ–µ–Ω—Å–∫–∏–π"
        if patronymic.endswith(("–∏—á", "—ã—á", "–æ–≥–ª—ã", "—É–ª—ã", "–ª—ã")):
            return "–ú—É–∂—Å–∫–æ–π"

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –º—É–∂—Å–∫–∏–º
    return "–ú—É–∂—Å–∫–æ–π"


def _find_marker_in_table(table, marker):
    """–ù–∞—Ö–æ–¥–∏—Ç –º–∞—Ä–∫–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏."""
    for r_idx, row in enumerate(table.rows):
        for c_idx, cell in enumerate(row.cells):
            for paragraph in cell.paragraphs:
                if marker in paragraph.text:
                    return r_idx, c_idx
    return None, None


def _fill_front_row(row, norm):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫
    if len(row.cells) < 5:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {len(row.cells)}")
        return

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏
    row.cells[0].text = norm.get("name", "")
    row.cells[1].text = norm.get("classification", "")
    row.cells[2].text = norm.get("unit", "")
    row.cells[3].text = str(norm.get("quantity", ""))
    row.cells[4].text = norm.get("wear_period", "")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫–∏
    for i in range(5):
        for paragraph in row.cells[i].paragraphs:
            paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        _set_cell_border(row.cells[i])


def _apply_table_format(table):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ."""
    # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å
    try:
        table.style = "Table Grid"
    except (KeyError, ValueError):
        logger.info("–°—Ç–∏–ª—å 'Table Grid' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äì –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Ä—É—á–Ω—É—é")
        _add_borders_manually(table)

    # 2. –®—Ä–∏—Ñ—Ç –≤—Å–µ–º run‚Äë–∞–º
    for row in table.rows:
        for cell in row.cells:
            for para in cell.paragraphs:
                if not para.runs:
                    para.add_run("")
                for run in para.runs:
                    run.font.name = "Times New Roman"
                    run.font.size = Pt(12)


def _add_borders_manually(table):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–º —è—á–µ–π–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã."""
    for row in table.rows:
        for cell in row.cells:
            _set_cell_border(cell)


def _set_cell_border(
        cell,
        **kwargs,
):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—â–∏–Ω–æ–π 4 Œµ–º (‚âà0.5 pt) –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏."""
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã single 4 Œµ–º
    sides = {
        "top": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "left": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "bottom": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "right": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
    }
    sides.update(kwargs)

    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()

    tblBorders = tcPr.find(qn("w:tcBorders"))
    if tblBorders is None:
        tblBorders = OxmlElement("w:tcBorders")
        tcPr.append(tblBorders)

    for edge in ("left", "top", "right", "bottom"):
        edge_el = tblBorders.find(qn(f"w:{edge}"))
        if edge_el is None:
            edge_el = OxmlElement(f"w:{edge}")
            tblBorders.append(edge_el)
        attrs = sides.get(edge, {})
        for key in ["val", "sz", "color", "space"]:
            edge_el.set(qn(f"w:{key}"), attrs.get(key, "single" if key == "val" else "4"))