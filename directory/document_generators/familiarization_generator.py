"""
üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬†2)

–ò–∑–º–µ–Ω–µ–Ω–∏—è v2 (–ø–æ—Å–ª–µ –ª–æ–≥–æ–≤¬†17.04.2025):
1. –ï—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ—Ç —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Å—Ç–∏–ª—è ¬´Table¬†Grid¬ª, –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —á–µ—Ä–µ–∑ XML.
2. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `_set_cell_border`, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å ¬´single¬ª¬†0.5‚ÄØpt –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.
3. –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∏–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º `KeyError` –∏ `ValueError`.
4. –ö–æ–¥ –ø–æ‚Äë–ø—Ä–µ–∂–Ω–µ–º—É –∑–∞–¥–∞—ë—Ç Times¬†New¬†Roman¬†14‚ÄØpt –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫.
"""

import logging
import traceback
import re
from typing import Dict, Any, Optional, List

from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

from directory.models.document_template import GeneratedDocument
from directory.document_generators.base import (
    get_document_template,
    prepare_employee_context,
    generate_docx_from_template,
)

logger = logging.getLogger(__name__)


# =============================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è
# =============================================

def generate_familiarization_document(
    employee,
    document_list: Optional[List[str]] = None,
    user=None,
    custom_context: Optional[Dict[str, Any]] = None,
) -> Optional[GeneratedDocument]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""

    try:
        template = get_document_template("doc_familiarization", employee)
        if not template:
            raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

        context = prepare_employee_context(employee)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤—Ä—É—á–Ω—É—é
        if document_list is None:
            from directory.views.documents.utils import get_employee_documents

            fetched_list, success = get_employee_documents(employee)
            document_list = (
                fetched_list
                if success
                else [
                    "–£—Å—Ç–∞–≤ –ó–ê–û '–°—Ç—Ä–æ–π–ö–æ–º–ø–ª–µ–∫—Å'",
                    "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ '–ó–∞—Ä–µ—á–Ω—ã–π'",
                    "–ü—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞",
                ]
            )

        # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.update(
            {
                "documents_list": "DOCMARKER_START",
                "all_documents": document_list,
                "familiarization_date": context.get("current_date"),
            }
        )
        if custom_context:
            context.update(custom_context)

        # –†–µ–Ω–¥–µ—Ä + –ø–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞
        return generate_docx_from_template(
            template,
            context,
            employee,
            user,
            post_processor=process_table_rows,
        )

    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è: %s", exc)
        logger.error(traceback.format_exc())
        return None


# =========================
#   –ü–û–°–¢‚Äë–û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ë–õ–ò–¶–´
# =========================

def process_table_rows(doc, context):
    try:
        docs: List[str] = context.get("all_documents", [])
        if not docs:
            return doc

        docx_document = doc.docx

        for table in docx_document.tables:
            row_idx, doc_col = _find_template_row(table)
            if row_idx is None:
                continue

            date_col = _find_date_cell(table.rows[row_idx], doc_col)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            table.rows[row_idx].cells[doc_col].text = docs[0]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            for doc_name in docs[1:]:
                new_row = table.add_row()
                new_row.cells[doc_col].text = doc_name
                if date_col is not None and date_col < len(new_row.cells):
                    new_row.cells[date_col].text = context.get("familiarization_date", "")

            # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            _apply_table_format(table)
            break  # –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ‚Äì –≤—ã—Ö–æ–¥–∏–º

        return doc

    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: %s", exc)
        logger.error(traceback.format_exc())
        return doc


# --------------------------
#   –£–¢–ò–õ–ò–¢–´
# --------------------------

def _find_template_row(table):
    for r_idx, row in enumerate(table.rows):
        for c_idx, cell in enumerate(row.cells):
            if "DOCMARKER_START" in cell.text:
                return r_idx, c_idx
    return (1, 0) if len(table.rows) >= 2 else (None, None)


def _find_date_cell(row, doc_col):
    pattern = re.compile(r"\d{2}\.\d{2}\.\d{4}")
    for idx, cell in enumerate(row.cells):
        if idx == doc_col:
            continue
        if pattern.search(cell.text.strip()):
            return idx
    return len(row.cells) - 1 if len(row.cells) > doc_col + 1 else None


def _apply_table_format(table):
    """Times¬†New¬†Roman¬†14¬†pt, + –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã."""

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å
    try:
        table.style = "Table Grid"
    except (KeyError, ValueError):
        logger.info("–°—Ç–∏–ª—å 'Table Grid' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äì –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Ä—É—á–Ω—É—é")
        _add_borders_manually(table)

    # 2. –®—Ä–∏—Ñ—Ç –≤—Å–µ–º run‚Äë–∞–º
    for row in table.rows:
        for cell in row.cells:
            for para in cell.paragraphs:
                if not para.runs:
                    para.add_run("")
                for run in para.runs:
                    run.font.name = "Times New Roman"
                    run.font.size = Pt(14)


def _add_borders_manually(table):
    for row in table.rows:
        for cell in row.cells:
            _set_cell_border(cell)


def _set_cell_border(
    cell,
    **kwargs,
):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—â–∏–Ω–æ–π 4¬†Œµ–º (‚âà0.5‚ÄØpt) –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É.
    """

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã single 4¬†Œµ–º
    sides = {
        "top": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "left": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "bottom": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
        "right": {
            "val": "single",
            "sz": "4",
            "color": "000000",
            "space": "0",
        },
    }
    sides.update(kwargs)

    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()

    tblBorders = tcPr.find(qn("w:tcBorders"))
    if tblBorders is None:
        tblBorders = OxmlElement("w:tcBorders")
        tcPr.append(tblBorders)

    for edge in ("left", "top", "right", "bottom"):
        edge_el = tblBorders.find(qn(f"w:{edge}"))
        if edge_el is None:
            edge_el = OxmlElement(f"w:{edge}")
            tblBorders.append(edge_el)
        attrs = sides.get(edge, {})
        for key in ["val", "sz", "color", "space"]:
            edge_el.set(qn(f"w:{key}"), attrs.get(key, "single" if key == "val" else "4"))
