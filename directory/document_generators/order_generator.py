# directory/document_generators/order_generator.py
"""
üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è (–ü—Ä–∏–µ–º/–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞)
"""
import logging
import datetime
import traceback
from typing import Dict, Any, Optional

from directory.models.document_template import GeneratedDocument
from directory.document_generators.base import (
    get_document_template, prepare_employee_context, generate_docx_from_template
)
from directory.utils.declension import decline_phrase, decline_full_name, get_initials_from_name

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def prepare_internship_context(employee, context):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        context: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    Returns:
        Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ò–º–ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å—é–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    from directory.views.documents.utils import (
        get_internship_leader, get_internship_leader_name,
        get_internship_leader_position, get_internship_leader_initials
    )

    leader_position, position_success = get_internship_leader_position(employee)
    leader_name, name_success = get_internship_leader_name(employee)
    leader_initials, initials_success = get_internship_leader_initials(employee)

    internship_leader, level, success = get_internship_leader(employee)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: success={success}, level={level}, position={leader_position}, name={leader_name}")
    logger.debug(f"–û–±—ä–µ–∫—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {internship_leader}") # –õ–æ–≥ –æ–±—ä–µ–∫—Ç–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    head_dept_genitive = ""
    head_subdiv_genitive = ""
    if internship_leader and success: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω
        logger.info(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω: {internship_leader.full_name_nominative if internship_leader else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        if hasattr(internship_leader, 'department') and internship_leader.department:
            dept_name = internship_leader.department.name
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: '{dept_name}'")
            try:
                head_dept_genitive = decline_phrase(dept_name, 'gent')
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ ('{dept_name}' -> 'gent'): '{head_dept_genitive}'")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–ª–æ–Ω—è—Ç—å –æ—Ç–¥–µ–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {dept_name}, –æ—à–∏–±–∫–∞: {e}")
                head_dept_genitive = dept_name # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        else:
             logger.warning(f"–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ {internship_leader} –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 'department'.")

        if hasattr(internship_leader, 'subdivision') and internship_leader.subdivision:
            subdiv_name = internship_leader.subdivision.name
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: '{subdiv_name}'")
            try:
                head_subdiv_genitive = decline_phrase(subdiv_name, 'gent')
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ('{subdiv_name}' -> 'gent'): '{head_subdiv_genitive}'")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–ª–æ–Ω—è—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {subdiv_name}, –æ—à–∏–±–∫–∞: {e}")
                head_subdiv_genitive = subdiv_name # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        else:
            logger.warning(f"–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ {internship_leader} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 'subdivision'.")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ success=False –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.")


    context.update({
        'head_of_internship_position': leader_position,
        'head_of_internship_name': leader_name,
        'head_of_internship_name_initials': leader_initials,
        'head_of_internship_position_genitive': decline_phrase(leader_position, 'gent') if position_success else leader_position, # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'head_of_internship_name_accusative': decline_full_name(leader_name, 'accs') if name_success else leader_name,
        'head_of_internship_position_accusative': decline_phrase(leader_position, 'accs') if position_success else leader_position, # –î–æ–±–∞–≤–ª–µ–Ω–æ
        'internship_leader_level': level,
        # >>> –ù–æ–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ <<<
        'head_of_internship_department_genitive': head_dept_genitive,
        'head_of_internship_subdivision_genitive': head_subdiv_genitive,
    })

    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: department_genitive='{head_dept_genitive}', subdivision_genitive='{head_subdiv_genitive}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ accusative
    for key in ['head_of_internship_name_accusative', 'head_of_internship_position_accusative']:
        if not context.get(key):
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ {key} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ")

    return context

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ generate_all_orders –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
def generate_all_orders(employee, user=None, custom_context: Optional[Dict[str, Any]] = None) -> Optional[GeneratedDocument]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ/—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ.
    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        custom_context: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        template = get_document_template('all_orders', employee)
        if not template:
            logger.error("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

        context = prepare_employee_context(employee)
        logger.info(f"–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {list(context.keys())}")

        context = prepare_internship_context(employee, context)
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏")

        now = datetime.datetime.now()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç—É —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if not custom_context or 'order_number' not in custom_context:
            context.setdefault('order_number', f"–†–°–¢-{now.strftime('%Y%m%d')}-{employee.id}")
        if not custom_context or 'order_date' not in custom_context:
            context.setdefault('order_date', now.strftime("%d.%m.%Y"))

        internship_days = getattr(employee.position, 'internship_period_days', 2) if employee.position else 2
        context['internship_duration'] = internship_days

        if custom_context:
            context.update(custom_context)
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {list(custom_context.keys())}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        # –û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å accusative –ø–∞–¥–µ–∂
        key_variables = ['fio_dative', 'position_dative', 'internship_duration',
                         'head_of_internship_position_accusative', 'head_of_internship_name_accusative']
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)
        # key_variables.extend(['head_of_internship_department_genitive', 'head_of_internship_subdivision_genitive'])

        for key in key_variables:
            if key not in context or not context[key]:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –≤—ã–¥–∞–µ–º warning
                if key not in ['head_of_internship_department_genitive', 'head_of_internship_subdivision_genitive']:
                    logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '{key}'")

        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(context)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–∫–ª—é—á–∏): {list(context.keys())}") # –õ–æ–≥ –∫–ª—é—á–µ–π –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        # –í—ã–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        result = generate_docx_from_template(template, context, employee, user)
        if result:
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç 'all_orders' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result.id}")
            return result
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Ñ—É–Ω–∫—Ü–∏—è generate_docx_from_template –≤–µ—Ä–Ω—É–ª–∞ None")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è: {str(e)}")
        logger.error(traceback.format_exc())
        return None
