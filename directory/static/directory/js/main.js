// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
function updateSubdivisions(organizationId, targetSelect) {
    if (!organizationId) {
        $(targetSelect).html('<option value="">---------</option>');
        return;
    }

    $.ajax({
        url: '/api/subdivisions/',
        data: { organization: organizationId },
        success: function(data) {
            let options = '<option value="">---------</option>';
            data.forEach(item => {
                options += `<option value="${item.id}">${item.name}</option>`;
            });
            $(targetSelect).html(options);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
function updatePositions(subdivisionId, targetSelect) {
    if (!subdivisionId) {
        $(targetSelect).html('<option value="">---------</option>');
        return;
    }

    $.ajax({
        url: '/api/positions/',
        data: { subdivision: subdivisionId },
        success: function(data) {
            let options = '<option value="">---------</option>';
            data.forEach(item => {
                options += `<option value="${item.id}">${item.name}</option>`;
            });
            $(targetSelect).html(options);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ Bootstrap
$(function () {
    $('[data-toggle="tooltip"]').tooltip();
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—Ö–µ
$(document).ready(function() {
    setTimeout(function() {
        $('.alert-success').fadeOut('slow');
    }, 3000);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    initEmployeeTree();
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
function confirmDelete(event, message) {
    if (!confirm(message || '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) {
        event.preventDefault();
    }
}

/**
 * üå≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
function initEmployeeTree() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const employeeTree = document.getElementById('employeeTree');
    if (!employeeTree) return;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    let selectedEmployees = [];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    function updateSelectedCounter() {
        const count = selectedEmployees.length;
        const counterValue = document.getElementById('counterValue');
        const selectedCounter = document.getElementById('selectedCounter');
        const actionsDropdown = document.getElementById('actionsDropdown');

        if (counterValue) counterValue.textContent = count;

        if (selectedCounter) {
            selectedCounter.style.display = count > 0 ? 'inline-block' : 'none';
        }

        if (actionsDropdown) {
            actionsDropdown.disabled = count === 0;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
        const selectedCountBadge = document.getElementById('selectedCount');
        if (selectedCountBadge) {
            selectedCountBadge.textContent = count;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    const selectAllCheckbox = document.getElementById('selectAll');
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function() {
            const employeeCheckboxes = employeeTree.querySelectorAll('.employee-checkbox');

            employeeCheckboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;

                const employeeId = checkbox.dataset.id;
                const index = selectedEmployees.indexOf(employeeId);

                if (selectAllCheckbox.checked && index === -1) {
                    selectedEmployees.push(employeeId);
                } else if (!selectAllCheckbox.checked && index !== -1) {
                    selectedEmployees.splice(index, 1);
                }
            });

            updateSelectedCounter();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    employeeTree.addEventListener('change', function(e) {
        const checkbox = e.target;
        if (!checkbox.matches('input[type="checkbox"]')) return;

        if (checkbox.classList.contains('employee-checkbox')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = checkbox.dataset.id;
            const index = selectedEmployees.indexOf(employeeId);

            if (checkbox.checked && index === -1) {
                selectedEmployees.push(employeeId);
            } else if (!checkbox.checked && index !== -1) {
                selectedEmployees.splice(index, 1);
            }

            updateSelectedCounter();
        } else if (checkbox.classList.contains('org-checkbox') ||
                  checkbox.classList.contains('sub-checkbox') ||
                  checkbox.classList.contains('dept-checkbox')) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ/–æ—Ç–¥–µ–ª)
            const nodeId = checkbox.dataset.id;
            const children = employeeTree.querySelectorAll(`tr[data-parent="${nodeId}"] input[type="checkbox"]`);

            children.forEach(childCheckbox => {
                childCheckbox.checked = checkbox.checked;

                // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                if (childCheckbox.classList.contains('employee-checkbox')) {
                    const empId = childCheckbox.dataset.id;
                    const index = selectedEmployees.indexOf(empId);

                    if (checkbox.checked && index === -1) {
                        selectedEmployees.push(empId);
                    } else if (!checkbox.checked && index !== -1) {
                        selectedEmployees.splice(index, 1);
                    }
                }
            });

            updateSelectedCounter();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        const allEmployeeCheckboxes = employeeTree.querySelectorAll('.employee-checkbox');
        const checkedEmployeeCheckboxes = employeeTree.querySelectorAll('.employee-checkbox:checked');

        if (selectAllCheckbox) {
            selectAllCheckbox.checked =
                allEmployeeCheckboxes.length > 0 &&
                allEmployeeCheckboxes.length === checkedEmployeeCheckboxes.length;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ (indeterminate)
            selectAllCheckbox.indeterminate =
                checkedEmployeeCheckboxes.length > 0 &&
                checkedEmployeeCheckboxes.length < allEmployeeCheckboxes.length;
        }
    });

    // üå≥ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
    function toggleNode(nodeId, expand = true) {
        const toggleElement = employeeTree.querySelector(`.tree-toggle[data-node="${nodeId}"]`);
        if (!toggleElement) return;

        toggleElement.textContent = expand ? '-' : '+';

        const children = employeeTree.querySelectorAll(`tr[data-parent="${nodeId}"]`);
        children.forEach(child => {
            if (expand) {
                child.classList.remove('tree-hidden');
            } else {
                child.classList.add('tree-hidden');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–±–µ–Ω–∫–∞ —Å–≤–æ–∏ –¥–µ—Ç–∏
                const childNodeId = child.dataset.nodeId;
                if (childNodeId) {
                    toggleNode(childNodeId, false);
                }
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–∫–æ–Ω–∫–∞–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    employeeTree.addEventListener('click', function(e) {
        const toggleElement = e.target.closest('.tree-toggle');
        if (!toggleElement) return;

        const nodeId = toggleElement.dataset.node;
        const isExpanded = toggleElement.textContent === '-';
        toggleNode(nodeId, !isExpanded);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"
    const btnExpandAll = document.getElementById('btnExpandAll');
    if (btnExpandAll) {
        btnExpandAll.addEventListener('click', function() {
            const nodes = employeeTree.querySelectorAll('.tree-toggle');
            nodes.forEach(node => {
                const nodeId = node.dataset.node;
                toggleNode(nodeId, true);
            });
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"
    const btnCollapseAll = document.getElementById('btnCollapseAll');
    if (btnCollapseAll) {
        btnCollapseAll.addEventListener('click', function() {
            const orgNodes = employeeTree.querySelectorAll('.tree-toggle[data-node^="org-"]');
            orgNodes.forEach(node => {
                const nodeId = node.dataset.node;
                toggleNode(nodeId, false);
            });
        });
    }

    // üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É"
    const btnHireEmployee = document.getElementById('btnHireEmployee');
    if (btnHireEmployee) {
        btnHireEmployee.addEventListener('click', function() {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–π–º–∞
            const hireUrl = btnHireEmployee.dataset.hireUrl || '/directory/employees/hire/';
            window.location.href = hireUrl;
        });
    }

    // üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å –°–ò–ó"
    const btnIssueSIZ = document.getElementById('btnIssueSIZ');
    if (btnIssueSIZ) {
        btnIssueSIZ.addEventListener('click', function() {
            if (selectedEmployees.length === 0) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó.');
                return;
            }

            if (selectedEmployees.length > 1) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó.');
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = selectedEmployees[0];
            const issueUrl = btnIssueSIZ.dataset.issueUrl || `/directory/siz/issue/employee/${employeeId}/`;

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–¥–∞—á–∏ –°–ò–ó
            window.location.href = issueUrl;
        });
    }

    // üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞"
    const btnIssueCard = document.getElementById('btnIssueCard');
    if (btnIssueCard) {
        btnIssueCard.addEventListener('click', function() {
            if (selectedEmployees.length === 0) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞.');
                return;
            }

            if (selectedEmployees.length > 1) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞.');
                return;
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = selectedEmployees[0];
            const cardUrl = btnIssueCard.dataset.cardUrl || `/directory/siz/personal-card/${employeeId}/`;
            window.location.href = cardUrl;
        });
    }

    // ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    const btnEditEmployee = document.getElementById('btnEditEmployee');
    if (btnEditEmployee) {
        btnEditEmployee.addEventListener('click', function() {
            if (selectedEmployees.length === 0) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                return;
            }

            if (selectedEmployees.length > 1) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                return;
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = selectedEmployees[0];
            const editUrl = btnEditEmployee.dataset.editUrl || `/directory/employees/${employeeId}/update/`;
            window.location.href = editUrl;
        });
    }

    // üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–µ—Ä–µ–≤—É
    const localSearchInput = document.getElementById('localSearchInput');
    const localSearchBtn = document.getElementById('localSearchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');

    if (localSearchInput) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        const treeSearch = new TreeSearch(employeeTree);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        localSearchInput.addEventListener('input', function(e) {
            treeSearch.search(e.target.value);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        localSearchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                treeSearch.search(e.target.value);
            } else if (e.key === 'Escape') {
                localSearchInput.value = '';
                treeSearch.search('');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        if (localSearchBtn) {
            localSearchBtn.addEventListener('click', function() {
                treeSearch.search(localSearchInput.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', function() {
                localSearchInput.value = '';
                treeSearch.search('');
            });
        }
    }

    // üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const subAndDeptNodes = employeeTree.querySelectorAll('.tree-toggle[data-node^="sub-"], .tree-toggle[data-node^="dept-"]');
    subAndDeptNodes.forEach(node => {
        const nodeId = node.dataset.node;
        toggleNode(nodeId, false);
    });
}

/**
 * üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
 * @param {string} selector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –≥–¥–µ –∏—Å–∫–∞—Ç—å
 * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {string} itemSelector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function quickLocalSearch(selector, searchText, itemSelector) {
    const container = document.querySelector(selector);
    if (!container) return;

    const searchQuery = searchText.toLowerCase();
    const items = container.querySelectorAll(itemSelector);

    items.forEach(item => {
        const text = item.textContent.toLowerCase();
        const visible = text.includes(searchQuery);
        item.style.display = visible ? '' : 'none';
    });
}

/**
 * üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {string} containerSelector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {string} url - URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 */
function updateReportData(containerSelector, url, params = {}) {
    const container = document.querySelector(containerSelector);
    if (!container) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    container.innerHTML = '<div class="text-center p-3"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    $.ajax({
        url: url,
        data: params,
        method: 'GET',
        success: function(response) {
            container.innerHTML = response;
        },
        error: function(error) {
            container.innerHTML = `<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.statusText}</div>`;
        }
    });
}

/**
 * üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} url - URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @param {string} format - –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (csv, xlsx, pdf)
 * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
function exportData(url, format, filters = {}) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams(filters);
    params.append('format', format);

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportUrl = `${url}?${params.toString()}`;

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º URL –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    window.open(exportUrl, '_blank');
}