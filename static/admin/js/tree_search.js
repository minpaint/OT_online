class TreeSearch {
    constructor(treeElement) {
        // üå≥ –≠–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞
        this.tree = treeElement;
        // üíæ –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        this.searchCache = new Map();
        // ‚è≤Ô∏è –¢–∞–π–º–µ—Ä –¥–ª—è debounce
        this.debounceTimer = null;
        // üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        this.lastSearchTerm = '';
    }

    /**
     * üîé –ü–æ–∏—Å–∫ —Å debounce
     */
    search(searchText) {
        if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
        }

        this.debounceTimer = setTimeout(() => {
            this._performSearch(searchText.toLowerCase().trim());
        }, 300);
    }

    /**
     * üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    _performSearch(searchText) {
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
        if (!searchText) {
            this._resetSearch();
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (this.lastSearchTerm === searchText) {
            return;
        }

        this.lastSearchTerm = searchText;

        // –°–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞)
        this.tree.querySelectorAll('tr').forEach(row => {
            row.classList.add('hidden-by-search');
            row.classList.remove('highlight-search');
        });

        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–æ–º
        this.tree.querySelectorAll('tr').forEach(row => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º (—ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)
            const hasCheckbox = row.querySelector('.action-select');
            if (!hasCheckbox) return;

            const nameCell = row.querySelector('.field-name');
            if (!nameCell) return;

            const text = nameCell.textContent.toLowerCase();

            if (text.includes(searchText)) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                row.classList.remove('hidden-by-search');
                row.classList.add('highlight-search');

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!row.querySelector('.structure-path')) {
                    const structurePath = this._getCleanPathToParents(row);

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                    if (structurePath) {
                        const pathSpan = document.createElement('span');
                        pathSpan.className = 'structure-path';
                        pathSpan.style.color = '#666';
                        pathSpan.style.marginLeft = '5px';
                        pathSpan.textContent = `(${structurePath})`;
                        nameCell.appendChild(pathSpan);
                    }
                }
            }
        });
    }

    /**
     * üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –ø—É—Ç–∏ —Ç–æ–ª—å–∫–æ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∏–∫–æ–Ω–∫–∏ –∏ –¥—Ä—É–≥–∏–µ HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
     */
    _getCleanPathToParents(row) {
        const path = [];

        let parentId = row.dataset.parentId;
        while (parentId) {
            const parentRow = this.tree.querySelector(`tr[data-node-id="${parentId}"]`);
            if (!parentRow) break;

            const parentNameCell = parentRow.querySelector('.field-name');
            if (parentNameCell) {
                // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É—è HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
                let cleanText = '';

                // –û–±—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è HTML
                for (let i = 0; i < parentNameCell.childNodes.length; i++) {
                    const node = parentNameCell.childNodes[i];
                    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (—Ç–∏–ø 3)
                    if (node.nodeType === 3) {
                        cleanText += node.textContent;
                    }
                }

                // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –æ–±—Ö–æ–¥ –Ω–µ –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                if (!cleanText.trim()) {
                    cleanText = parentNameCell.innerText;
                }

                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                cleanText = cleanText.replace(/\s+/g, ' ').trim();

                if (cleanText) {
                    path.push(cleanText);
                }
            }

            parentId = parentRow.dataset.parentId;
        }

        if (path.length === 0) {
            return '';
        }

        return path.join(' ‚Üí ');
    }

    /**
     * üîÑ –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
     */
    _resetSearch() {
        if (this.lastSearchTerm === '') return;

        this.lastSearchTerm = '';
        this.searchCache.clear();

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥
        this.tree.querySelectorAll('tr').forEach(row => {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –ø–æ–∏—Å–∫–∞
            row.classList.remove('hidden-by-search', 'highlight-search');

            // –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const structurePath = row.querySelector('.structure-path');
            if (structurePath) {
                structurePath.remove();
            }
        });
    }
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const treeTable = document.getElementById('result_list');
    const searchInput = document.querySelector('.tree-search');

    if (treeTable && searchInput) {
        const treeSearch = new TreeSearch(treeTable);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        searchInput.addEventListener('input', (e) => {
            treeSearch.search(e.target.value);
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ Escape
        searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                searchInput.value = '';
                treeSearch.search('');
            }
        });
    }
});