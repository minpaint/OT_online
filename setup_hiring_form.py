import os
import shutil
from pathlib import Path
import sys
import locale

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
sys.stdout.reconfigure(encoding='utf-8')

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
FILES = {
    # Models
    'models/profile.py': '''from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver

class Profile(models.Model):
    """
    üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    """
    user = models.OneToOneField(
        User, 
        on_delete=models.CASCADE,
        related_name='profile',
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    organizations = models.ManyToManyField(
        'directory.Organization',
        verbose_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
        related_name="user_profiles",
        help_text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username}"

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    instance.profile.save()
''',

    # Forms
    'forms/employee_hiring.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Submit, Row, Column, HTML
from dal import autocomplete
from directory.models import Employee

class EmployeeHiringForm(forms.ModelForm):
    """
    üìù –§–æ—Ä–º–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    preview = forms.BooleanField(
        required=False,
        initial=False,
        widget=forms.HiddenInput()
    )

    class Meta:
        model = Employee
        fields = [
            'full_name_nominative',
            'full_name_dative',
            'date_of_birth',
            'place_of_residence',
            'organization',
            'subdivision',
            'department',
            'position',
            'height',
            'clothing_size',
            'shoe_size',
            'is_contractor'
        ]
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={
                    'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                    'data-minimum-input-length': 0
                }
            ),
            'position': autocomplete.ModelSelect2(
                url='directory:position-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...'}
            ),
            'date_of_birth': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            )
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.layout = Layout(
            Row(
                Column('full_name_nominative', css_class='form-group col-md-6'),
                Column('full_name_dative', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('date_of_birth', css_class='form-group col-md-6'),
                Column('place_of_residence', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('organization', css_class='form-group col-md-6'),
                Column('subdivision', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('department', css_class='form-group col-md-6'),
                Column('position', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('height', css_class='form-group col-md-4'),
                Column('clothing_size', css_class='form-group col-md-4'),
                Column('shoe_size', css_class='form-group col-md-4'),
                css_class='form-row'
            ),
            'is_contractor',
            HTML("<hr>"),
            Row(
                Column(
                    Submit('preview', 'üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', css_class='btn-info'),
                    css_class='form-group col-6'
                ),
                Column(
                    Submit('submit', 'üíæ –ü—Ä–∏–Ω—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É', css_class='btn-success'),
                    css_class='form-group col-6'
                ),
                css_class='form-row'
            )
        )

        if user:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.fields['organization'].queryset = user.profile.organizations.all()
''',

    # Views
    'views/home.py': '''from django.views.generic import CreateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.contrib import messages
from django.shortcuts import render
from django.http import JsonResponse
from directory.forms import EmployeeHiringForm
from directory.models import Employee
import logging

logger = logging.getLogger(__name__)

class HomePageView(LoginRequiredMixin, CreateView):
    """
    üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    template_name = 'directory/home.html'
    form_class = EmployeeHiringForm
    success_url = reverse_lazy('directory:home')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        if form.cleaned_data.get('preview'):
            # –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            return render(self.request, 'directory/preview.html', {
                'form': form,
                'data': form.cleaned_data
            })

        try:
            response = super().form_valid(form)
            messages.success(
                self.request,
                f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {form.instance.full_name_nominative} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É"
            )
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(
                f"User {self.request.user} hired employee {form.instance}",
                extra={
                    'user_id': self.request.user.id,
                    'employee_id': form.instance.id
                }
            )
            return response
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"Error hiring employee: {str(e)}",
                extra={
                    'user_id': self.request.user.id,
                    'form_data': form.cleaned_data
                }
            )
            messages.error(
                self.request,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É: {str(e)}"
            )
            return super().form_invalid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['recent_employees'] = Employee.objects.filter(
            organization__in=self.request.user.profile.organizations.all()
        ).order_by('-id')[:5]
        return context
''',

    # Templates
    'templates/directory/home.html': '''{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% load static %}

{% block extra_css %}
<link href="{% static 'css/select2.min.css' %}" rel="stylesheet" />
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>üìù –ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É</h3>
                </div>
                <div class="card-body">
                    <form method="post" id="hiring-form">
                        {% csrf_token %}
                        {{ form|crispy }}
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã–µ</h4>
                </div>
                <div class="card-body">
                    {% if recent_employees %}
                        <ul class="list-group">
                        {% for employee in recent_employees %}
                            <li class="list-group-item">
                                <strong>{{ employee.full_name_nominative }}</strong><br>
                                <small>{{ employee.position }} ({{ employee.organization.short_name_ru }})</small>
                            </li>
                        {% endfor %}
                        </ul>
                    {% else %}
                        <p class="text-muted">–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
<div class="modal fade" id="previewModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" id="preview-content">
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'js/select2.min.js' %}"></script>
<script>
$(document).ready(function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Select2
    $('.select2').select2();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    $('#hiring-form button[name="preview"]').click(function(e) {
        e.preventDefault();
        var form = $('#hiring-form');
        form.find('input[name="preview"]').val('true');

        $.ajax({
            url: form.attr('action'),
            method: 'POST',
            data: form.serialize(),
            success: function(response) {
                $('#preview-content').html(response);
                $('#previewModal').modal('show');
            }
        });
    });
});
</script>
{% endblock %}''',

    'templates/directory/preview.html': '''<div class="container">
    <div class="row">
        <div class="col-12">
            <h4>üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º</h4>
            <table class="table table-bordered">
                <tr>
                    <th>–§–ò–û (–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π)</th>
                    <td>{{ data.full_name_nominative }}</td>
                </tr>
                <tr>
                    <th>–§–ò–û (–¥–∞—Ç–µ–ª—å–Ω—ã–π)</th>
                    <td>{{ data.full_name_dative }}</td>
                </tr>
                <tr>
                    <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                    <td>{{ data.date_of_birth }}</td>
                </tr>
                <tr>
                    <th>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</th>
                    <td>{{ data.place_of_residence }}</td>
                </tr>
                <tr>
                    <th>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</th>
                    <td>{{ data.organization }}</td>
                </tr>
                <tr>
                    <th>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</th>
                    <td>{{ data.subdivision|default:"‚Äî" }}</td>
                </tr>
                <tr>
                    <th>–û—Ç–¥–µ–ª</th>
                    <td>{{ data.department|default:"‚Äî" }}</td>
                </tr>
                <tr>
                    <th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
                    <td>{{ data.position }}</td>
                </tr>
                <tr>
                    <th>–†–æ—Å—Ç</th>
                    <td>{{ data.height|default:"‚Äî" }}</td>
                </tr>
                <tr>
                    <th>–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã</th>
                    <td>{{ data.clothing_size|default:"‚Äî" }}</td>
                </tr>
                <tr>
                    <th>–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏</th>
                    <td>{{ data.shoe_size|default:"‚Äî" }}</td>
                </tr>
                <tr>
                    <th>–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞</th>
                    <td>{% if data.is_contractor %}–î–∞{% else %}–ù–µ—Ç{% endif %}</td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-right">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
            <button type="submit" form="hiring-form" class="btn btn-success">üíæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        </div>
    </div>
</div>''',

    # URLs update
    'urls.py': '''from django.urls import path
from . import views

app_name = 'directory'

urlpatterns = [
    path('', views.HomePageView.as_view(), name='home'),
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URLs ...
]''',

    # Tests
    'tests/test_profile.py': '''from django.test import TestCase
from django.contrib.auth.models import User
from directory.models import Profile, Organization

class ProfileTests(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )
        self.org = Organization.objects.create(
            name='Test Org',
            short_name='TO'
        )

    def test_profile_creation(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        self.assertTrue(hasattr(self.user, 'profile'))
        self.assertIsInstance(self.user.profile, Profile)

    def test_organization_assignment(self):
        """–¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        self.user.profile.organizations.add(self.org)
        self.assertIn(self.org, self.user.profile.organizations.all())
''',

    'tests/test_employee_hiring.py': '''from django.test import TestCase
from django.contrib.auth.models import User
from directory.models import Organization, Employee
from directory.forms import EmployeeHiringForm

class EmployeeHiringTests(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )
        self.org = Organization.objects.create(
            name='Test Org',
            short_name='TO'
        )
        self.user.profile.organizations.add(self.org)

    def test_form_organization_filtering(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–µ"""
        form = EmployeeHiringForm(user=self.user)
        self.assertEqual(
            list(form.fields['organization'].queryset),
            list(self.user.profile.organizations.all())
        )

    def test_employee_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É"""
        form_data = {
            'full_name_nominative': 'Test Employee',
            'full_name_dative': 'Test Employee',
            'organization': self.org.id,
            'date_of_birth': '2000-01-01'
        }
        form = EmployeeHiringForm(data=form_data, user=self.user)
        self.assertTrue(form.is_valid())
''',
}


def create_directory_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤"""
    base_dir = Path('directory')

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        'models',
        'forms',
        'views',
        'templates/directory',
        'tests',
    ]

    for directory in directories:
        dir_path = base_dir / directory
        dir_path.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º __init__.py –≤ –∫–∞–∂–¥–æ–π Python-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if 'templates' not in directory:
            init_file = dir_path / '__init__.py'
            init_file.touch()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    for file_path, content in FILES.items():
        full_path = base_dir / file_path
        full_path.parent.mkdir(parents=True, exist_ok=True)
        # –î–æ–±–∞–≤–ª—è–µ–º encoding='utf-8'
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)


def update_requirements():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt"""
    requirements = '''
django-crispy-forms>=2.0
django-autocomplete-light>=3.9.4
django-select2>=8.1.2
'''
    # –î–æ–±–∞–≤–ª—è–µ–º encoding='utf-8'
    with open('requirements.txt', 'a', encoding='utf-8') as f:
        f.write(requirements)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        create_directory_structure()
        update_requirements()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        print("2. –î–æ–±–∞–≤—å—Ç–µ 'dal', 'dal_select2', 'crispy_forms' –≤ INSTALLED_APPS")
        print("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py makemigrations")
        print("4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py migrate")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URLs")
        print("6. –°–æ–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: python manage.py collectstatic")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    main()