```python
# D:\YandexDisk\OT_online\apply_code_changes.py
import os
import sys

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–ö–ê–ñ–ò–¢–ï –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–£–¢–¨ –ö –ö–û–†–ù–ï–í–û–ô –ü–ê–ü–ö–ï –í–ê–®–ï–ì–û –ü–†–û–ï–ö–¢–ê
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–Ω–∞—á–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –Ω–µ —Ç–∞–º!
PROJECT_ROOT = r"D:\YandexDisk\OT_online"

# --- –î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–û–í ---
# –ö–ª—é—á: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç PROJECT_ROOT
# –ó–Ω–∞—á–µ–Ω–∏–µ: –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
UPDATED_FILES = {
    r"directory\models\document_template.py": r"""
# D:\YandexDisk\OT_online\directory\models\document_template.py
from django.db import models
from django.core.files.storage import FileSystemStorage
from django.utils.translation import gettext_lazy as _
import logging # –î–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥–≥–µ—Ä

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
document_storage = FileSystemStorage(location='media/document_templates/')

class DocumentTemplate(models.Model):
    """
    üìÉ –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (DOCX —Ñ–∞–π–ª—ã)

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """

    # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –î–û–ë–ê–í–õ–ï–ù–ê –ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó
    DOCUMENT_TYPES = (
        ('internship_order', 'üîñ –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ'),
        ('admission_order', 'üîñ –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ –¥–æ–ø—É—Å–∫–µ –∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ'),
        ('knowledge_protocol', 'üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞'),
        ('doc_familiarization', 'üìù –õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏'),
        ('ppe_card', 'üìä –ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó (Excel)'), # <--- –î–û–ë–ê–í–õ–ï–ù–û
    )

    name = models.CharField(_("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"), max_length=255)
    description = models.TextField(_("–û–ø–∏—Å–∞–Ω–∏–µ"), blank=True)
    document_type = models.CharField(
        _("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
        max_length=50,
        choices=DOCUMENT_TYPES
    )
    # –î–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó —ç—Ç–æ –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, —Ç.–∫. —à–∞–±–ª–æ–Ω Excel –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    template_file = models.FileField(
        _("–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ (DOCX)"),
        upload_to='document_templates/',
        storage=document_storage,
        blank=True, # <--- –°–¥–µ–ª–∞–ª–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        null=True, # <--- –°–¥–µ–ª–∞–ª–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        help_text=_("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è DOCX —à–∞–±–ª–æ–Ω–æ–≤. –î–ª—è Excel –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
    )
    is_active = models.BooleanField(_("–ê–∫—Ç–∏–≤–µ–Ω"), default=True)
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), auto_now_add=True)
    updated_at = models.DateTimeField(_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"), auto_now=True)

    def save(self, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω
        if self.document_type != 'ppe_card' and not self.template_file:
             logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω '{self.name}' —Ç–∏–ø–∞ '{self.document_type}' –±–µ–∑ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞.")
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ValidationError, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
             # raise ValidationError({'template_file': _('–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞.')})
        super().save(*args, **kwargs)


    class Meta:
        verbose_name = _("–®–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        verbose_name_plural = _("–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        ordering = ['-updated_at']

    def __str__(self):
        return f"{self.name} ({self.get_document_type_display()})"


class GeneratedDocument(models.Model):
    """
    üìÑ –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤.
    """
    template = models.ForeignKey(
        DocumentTemplate,
        verbose_name=_("–®–∞–±–ª–æ–Ω"),
        on_delete=models.SET_NULL, # –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        null=True # –ú–æ–∂–µ—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω
    )
    # –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ DOCX, —Ç–∞–∫ –∏ XLSX —Ñ–∞–π–ª–æ–≤
    document_file = models.FileField(
        _("–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
        upload_to='generated_documents/%Y/%m/%d/'
    )
    employee = models.ForeignKey(
        'directory.Employee',
        verbose_name=_("–°–æ—Ç—Ä—É–¥–Ω–∏–∫"),
        on_delete=models.CASCADE,
        related_name="generated_documents" # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    )
    created_by = models.ForeignKey(
        'auth.User',
        verbose_name=_("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), auto_now_add=True)
    # –•—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    document_data = models.JSONField(
        _("–î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
        default=dict,
        blank=True,
        help_text=_("–î–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    )

    class Meta:
        verbose_name = _("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        verbose_name_plural = _("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        ordering = ['-created_at']

    def __str__(self):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        doc_type_display = self.template.get_document_type_display() if self.template else _("–î–æ–∫—É–º–µ–Ω—Ç")
        return f"{doc_type_display} –¥–ª—è {self.employee} ({self.created_at.strftime('%d.%m.%Y')})"
""",
    r"directory\forms\document_forms.py": r"""
# D:\YandexDisk\OT_online\directory\forms\document_forms.py
"""
üìù –§–æ—Ä–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
"""
from django import forms
from django.utils.translation import gettext_lazy as _
from django.forms import widgets
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Fieldset, ButtonHolder, Submit, Div, HTML, Button, Field

from directory.models.document_template import DocumentTemplate # <--- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è DOCUMENT_TYPES
from directory.models import Employee


class DocumentSelectionForm(forms.Form):
    """
    –§–æ—Ä–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–ø 'ppe_card' –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ CheckboxSelectMultiple,
    # —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
    DOC_CHOICES = [choice for choice in DocumentTemplate.DOCUMENT_TYPES if choice[0] != 'ppe_card']

    document_types = forms.MultipleChoiceField(
        label=_("–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (DOCX)"), # –£—Ç–æ—á–Ω–∏–ª–∏ –≤ –º–µ—Ç–∫–µ
        choices=DOC_CHOICES, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ choices
        widget=forms.CheckboxSelectMultiple,
        required=False, # –î–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        help_text=_("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã DOCX –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"), # –ò–∑–º–µ–Ω–∏–ª–∏ help_text
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫—Ä–æ–º–µ –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó)
        # initial=[choice[0] for choice in DOC_CHOICES] # –£–±—Ä–∞–ª–∏ initial –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó
    generate_ppe_card = forms.BooleanField(
        label=_("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–∞—Ä—Ç–æ—á–∫—É —É—á–µ—Ç–∞ –°–ò–ó (Excel)"),
        required=False,
        initial=False, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –≤–∫–ª—é—á–µ–Ω
        widget=forms.CheckboxInput(attrs={'class': 'form-check-input'})
    )

    employee_id = forms.IntegerField(
        widget=forms.HiddenInput(),
        required=True
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_id = 'document-selection-form'
        self.helper.layout = Layout(
            'employee_id',
            Fieldset(
                _('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),
                # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏ –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó —Ä—è–¥–æ–º
                Div(
                     Field('document_types'),
                     css_class='mb-3'
                ),
                Div( # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å –°–ò–ó –≤ form-check –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    Field('generate_ppe_card', css_class='form-check-input'),
                    HTML('<label class="form-check-label" for="id_generate_ppe_card">üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–∞—Ä—Ç–æ—á–∫—É —É—á–µ—Ç–∞ –°–ò–ó (Excel)</label>'),
                    css_class='form-check mb-3'
                ),
                css_class='mb-3'
            ),

            ButtonHolder(
                Submit('next', _('–î–∞–ª–µ–µ (–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)'), css_class='btn-primary'),
                Button('cancel', _('–û—Ç–º–µ–Ω–∞'), css_class='btn-secondary',
                       onclick="window.history.back();")
            )
        )

    def clean(self):
        cleaned_data = super().clean()
        document_types = cleaned_data.get('document_types')
        generate_ppe_card = cleaned_data.get('generate_ppe_card')

        if not document_types and not generate_ppe_card:
            raise forms.ValidationError(_('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó.'))

        return cleaned_data

# --- –§–æ—Ä–º—ã InternshipOrderForm –∏ AdmissionOrderForm –£–î–ê–õ–ï–ù–´ ---
# –û–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è
# –≤ _prepare_document_context –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

# --- –§–æ—Ä–º–∞ DocumentPreviewForm –£–î–ê–õ–ï–ù–ê ---
# –û–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
# –≤ —à–∞–±–ª–æ–Ω–µ documents_preview.html –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã.
""",
    r"directory\utils\docx_generator.py": r"""
# D:\YandexDisk\OT_online\directory\utils\docx_generator.py
"""
üìÑ –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Word

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ DOCX –∏
–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
"""
import os
import uuid
from typing import Dict, Any, Optional
import datetime
from docxtpl import DocxTemplate
from django.conf import settings
from django.core.files.base import ContentFile
import logging # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç logging

from directory.models.document_template import DocumentTemplate, GeneratedDocument
from directory.utils.declension import decline_full_name, decline_phrase, get_initials_from_name
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
from directory.views.documents.utils import (
    get_internship_leader_position, get_internship_leader_name,
    get_internship_leader_initials, get_director_info, MISSING_DATA_PLACEHOLDER
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

def get_template_path(template_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ DOCX.
    Args:
        template_id (int): ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    Returns:
        str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –∏–º–µ–µ—Ç —Ñ–∞–π–ª–∞.
    Raises:
        DocumentTemplate.DoesNotExist: –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    template = DocumentTemplate.objects.get(id=template_id)
    if template.template_file:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π
        path = os.path.join(settings.MEDIA_ROOT, str(template.template_file.name))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(path) and os.path.isfile(path):
            return path
        else:
            logger.warning(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ DOCX –¥–ª—è DocumentTemplate ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
            return None
    else:
        logger.warning(f"DocumentTemplate ID {template_id} (—Ç–∏–ø: {template.document_type}) –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ DOCX.")
        return None


def prepare_employee_context(employee) -> Dict[str, Any]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    –ù–µ –≤–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤).
    Args:
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
    Returns:
        Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    """
    now = datetime.datetime.now()
    context = {
        # –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        'fio_nominative': employee.full_name_nominative,
        'fio_genitive': decline_full_name(employee.full_name_nominative, 'gent'),
        'fio_dative': decline_full_name(employee.full_name_nominative, 'datv'),
        'fio_accusative': decline_full_name(employee.full_name_nominative, 'accs'),
        'fio_instrumental': decline_full_name(employee.full_name_nominative, 'ablt'),
        'fio_prepositional': decline_full_name(employee.full_name_nominative, 'loct'),
        'fio_initials': get_initials_from_name(employee.full_name_nominative),
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        'position_nominative': employee.position.position_name if employee.position else "",
        'position_genitive': decline_phrase(employee.position.position_name, 'gent') if employee.position else "",
        'position_dative': decline_phrase(employee.position.position_name, 'datv') if employee.position else "",
        'position_accusative': decline_phrase(employee.position.position_name, 'accs') if employee.position else "",
        'position_instrumental': decline_phrase(employee.position.position_name, 'ablt') if employee.position else "",
        'position_prepositional': decline_phrase(employee.position.position_name, 'loct') if employee.position else "",
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        'department': employee.department.name if employee.department else "",
        'department_genitive': decline_phrase(employee.department.name, 'gent') if employee.department else "",
        'department_dative': decline_phrase(employee.department.name, 'datv') if employee.department else "",
        'subdivision': employee.subdivision.name if employee.subdivision else "",
        'subdivision_genitive': decline_phrase(employee.subdivision.name, 'gent') if employee.subdivision else "",
        'subdivision_dative': decline_phrase(employee.subdivision.name, 'datv') if employee.subdivision else "",
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        'organization_name': employee.organization.short_name_ru if employee.organization else "",
        'organization_full_name': employee.organization.full_name_ru if employee.organization else "",
        # –î–∞—Ç—ã
        'current_date': now.strftime("%d.%m.%Y"),
        'current_day': now.strftime("%d"),
        'current_month': now.strftime("%m"),
        'current_year': now.strftime("%Y"),
        'current_year_short': now.strftime("%y"),
        # –ü—Ä–æ—á–µ–µ
        'location': employee.organization.location if employee.organization and hasattr(employee.organization, 'location') and employee.organization.location else "–≥. –ú–∏–Ω—Å–∫",
        # –ú–µ—Å—Ç–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ)
        'order_number': "",
        # –£–ë–†–ê–ù–´ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    }
    return context


def generate_docx_from_template(template_id: int, context: Dict[str, Any],
                               employee, user=None) -> Optional[GeneratedDocument]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç DOCX –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –ü–û–õ–ù–û–ì–û –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
    Args:
        template_id (int): ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        context (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        template = DocumentTemplate.objects.get(id=template_id)
        template_path = get_template_path(template_id)

        if not template_path:
             logger.error(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ DOCX –¥–ª—è ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.")
             return None

        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX: —à–∞–±–ª–æ–Ω={template_path}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫={employee.id}")
        doc = DocxTemplate(template_path)

        # –ü–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        render_context = context.copy()
        render_context.pop('employee_id', None)
        render_context.pop('missing_data_list', None)
        render_context.pop('has_missing_data', None)

        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        for key, value in render_context.items():
            if value == MISSING_DATA_PLACEHOLDER:
                render_context[key] = ""

        doc.render(render_context)

        safe_employee_name = "".join(c if c.isalnum() else "_" for c in employee.full_name_nominative)
        filename = f"{template.document_type}_{safe_employee_name}_{uuid.uuid4().hex[:8]}.docx"
        logger.info(f"–ò–º—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DOCX —Ñ–∞–π–ª–∞: {filename}")

        file_content = ContentFile(b'')
        doc.save(file_content)
        file_content.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

        generated_doc = GeneratedDocument(
            template=template,
            employee=employee,
            created_by=user,
            document_data=context # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤–∫–ª—é—á–∞—è missing_data)
        )
        generated_doc.document_file.save(filename, file_content, save=True) # save=True —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç –º–æ–¥–µ–ª—å
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DOCX –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {generated_doc.pk}")

        return generated_doc

    except DocumentTemplate.DoesNotExist:
        logger.error(f"–®–∞–±–ª–æ–Ω DocumentTemplate —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX –∏–∑ —à–∞–±–ª–æ–Ω–∞ ID {template_id}: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏–∏ generate_internship_order –∏ generate_admission_order –£–î–ê–õ–ï–ù–´ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è generate_document_from_template –≤–æ views/documents/preview.py

def get_document_template(document_type):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–∫—Ä–æ–º–µ 'ppe_card').
    Args:
        document_type (str): –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    Returns:
        DocumentTemplate: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–ø 'ppe_card', —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –Ω–µ–≥–æ –Ω–µ—Ç DOCX —à–∞–±–ª–æ–Ω–∞
        if document_type == 'ppe_card':
             logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å DOCX —à–∞–±–ª–æ–Ω –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó.")
             return None
        return DocumentTemplate.objects.get(document_type=document_type, is_active=True)
    except DocumentTemplate.DoesNotExist:
        logger.error(f"–ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{document_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except DocumentTemplate.MultipleObjectsReturned:
         logger.error(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{document_type}'. –í–æ–∑–≤—Ä–∞—â–µ–Ω –ø–µ—Ä–≤—ã–π.")
         return DocumentTemplate.objects.filter(document_type=document_type, is_active=True).first()


def generate_document_from_template(template: DocumentTemplate, employee: Employee, user=None, context: Optional[Dict[str, Any]]=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç DOCX –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    Args:
        template: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ DocumentTemplate
        employee: –û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Employee
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        context: –°–ª–æ–≤–∞—Ä—å —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    Returns:
        Optional[GeneratedDocument]: –û–±—ä–µ–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not template:
        logger.error("–ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX.")
        return None
    if template.document_type == 'ppe_card':
        logger.error("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (Excel).")
        return None
    if not context:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX –ø–æ —à–∞–±–ª–æ–Ω—É ID {template.id}.")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if context.get('has_missing_data', False):
        missing_fields = context.get('missing_data_list', [])
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{template.name}' —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {missing_fields}")
        # –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        return None

    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX –¥–ª—è {employee} –ø–æ —à–∞–±–ª–æ–Ω—É ID {template.id} (—Ç–∏–ø: {template.document_type})")
    return generate_docx_from_template(template.id, context, employee, user)

""",
    r"directory\utils\excel_export.py": r"""
# D:\YandexDisk\OT_online\directory\utils\excel_export.py
# directory/utils/excel_export.py

import os
import tempfile
import logging
from copy import copy
import uuid # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º uuid

import openpyxl
from django.conf import settings
from django.http import FileResponse, HttpResponseBadRequest, HttpResponseRedirect # –î–æ–±–∞–≤–∏–ª–∏ HttpResponseRedirect
from django.shortcuts import redirect, reverse # –î–æ–±–∞–≤–∏–ª–∏ reverse
from django.contrib import messages
from openpyxl import load_workbook

from directory.models import Employee, SIZNorm, GeneratedDocument, DocumentTemplate # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç GeneratedDocument, DocumentTemplate
from django.core.files.base import ContentFile # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç ContentFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ copy_row_styles, safe_set_cell_value, insert_data_with_template, fill_base_norm_row ---
# --- –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def copy_row_styles(ws, src_row, dst_row):
    try:
        max_col = ws.max_column
        for col in range(1, max_col + 1):
            src_cell = ws.cell(row=src_row, column=col)
            dst_cell = ws.cell(row=dst_row, column=col)
            if isinstance(dst_cell, openpyxl.cell.cell.MergedCell): continue
            if src_cell.has_style: dst_cell._style = copy(src_cell._style)
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∏–ª–µ–π: {str(e)}"); raise

def safe_set_cell_value(ws, row, col, value):
    cell = ws.cell(row=row, column=col)
    if isinstance(cell, openpyxl.cell.cell.MergedCell):
        for merged_range in ws.merged_cells.ranges:
            if cell.coordinate in merged_range:
                top_left = merged_range.min_row, merged_range.min_col
                ws.cell(row=top_left[0], column=top_left[1]).value = value
                return
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ {cell.coordinate}")
    else: cell.value = value

def insert_data_with_template(ws, data_list, template_row, sign_row, fill_func):
    count = len(data_list)
    if count == 0: logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏"); return
    if count > 1:
        logger.info(f"–í—Å—Ç–∞–≤–∫–∞ {count - 1} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ {sign_row}")
        try:
            merged_cells_info = []
            for merged_range in list(ws.merged_cells.ranges): # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                 if merged_range.min_row >= sign_row:
                     merged_cells_info.append((merged_range.min_row, merged_range.min_col, merged_range.max_row, merged_range.max_col))
                     ws.unmerge_cells(str(merged_range)) # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            ws.insert_rows(sign_row, amount=count - 1)
            for min_row, min_col, max_row, max_col in merged_cells_info:
                new_min_row = min_row + (count - 1); new_max_row = max_row + (count - 1)
                ws.merge_cells(start_row=new_min_row, start_column=min_col, end_row=new_max_row, end_column=max_col)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫: {str(e)}"); raise
    for i, item in enumerate(data_list):
        row_idx = template_row + i
        if i > 0:
            try: copy_row_styles(ws, template_row, row_idx)
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {str(e)}")
        try: fill_func(ws, row_idx, item)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {str(e)}"); raise

def fill_base_norm_row(ws, row_idx, norm):
    siz = norm.siz; name = getattr(siz, 'name', ""); classification = getattr(siz, 'classification', "")
    unit = getattr(siz, 'unit', ""); quantity = getattr(norm, 'quantity', ""); wear_period = getattr(siz, 'wear_period', None)
    safe_set_cell_value(ws, row_idx, 1, name); safe_set_cell_value(ws, row_idx, 2, classification)
    safe_set_cell_value(ws, row_idx, 3, unit); safe_set_cell_value(ws, row_idx, 4, quantity)
    if wear_period == 0: safe_set_cell_value(ws, row_idx, 5, "–î–æ –∏–∑–Ω–æ—Å–∞")
    elif wear_period is not None: safe_set_cell_value(ws, row_idx, 5, wear_period)
    else: safe_set_cell_value(ws, row_idx, 5, "")


def generate_card_excel(request, employee_id, save_to_db=False, user=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ Card.xlsx.
    –ú–æ–∂–µ—Ç –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å FileResponse, –ª–∏–±–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å GeneratedDocument.

    Args:
        request: –û–±—ä–µ–∫—Ç HttpRequest –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        employee_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
        save_to_db (bool): –ï—Å–ª–∏ True, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î.
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–¥–ª—è save_to_db).

    Returns:
        FileResponse —Å —Ñ–∞–π–ª–æ–º Excel (–µ—Å–ª–∏ save_to_db=False)
        –∏–ª–∏ GeneratedDocument (–µ—Å–ª–∏ save_to_db=True)
        –∏–ª–∏ HttpResponseRedirect –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}, save_to_db={save_to_db}")
    tmp_file = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    referrer_url = request.META.get('HTTP_REFERER', reverse('directory:home')) # URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

    try:
        employee = Employee.objects.select_related('position', 'organization', 'subdivision', 'department').get(pk=employee_id)
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {employee.full_name_nominative}")

        if not employee.position:
            logger.error(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
            if request: messages.error(request, "–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó.")
            return redirect(referrer_url)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó
        missing_ppe_data = []
        if not employee.height: missing_ppe_data.append('–†–æ—Å—Ç')
        if not employee.clothing_size: missing_ppe_data.append('–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã')
        if not employee.shoe_size: missing_ppe_data.append('–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏')
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

        if missing_ppe_data and save_to_db: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Ç.–µ. –∏–∑ preview)
             missing_str = ", ".join(missing_ppe_data)
             logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}: {missing_str}")
             if request: messages.warning(request, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_str}.")
             # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

        logger.info(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee.position.position_name}")

        base_norms = SIZNorm.objects.filter(position=employee.position, condition='').select_related('siz')
        norms_count = base_norms.count()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {norms_count} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó")
        if not base_norms.exists():
            logger.warning(f"–î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {employee.position} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó")
            if request: messages.warning(request, "–î–ª—è –¥–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã –°–ò–ó. –ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ –Ω–æ—Ä–º.")

        # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        template_path = os.path.join(settings.BASE_DIR, 'templates', 'excel', 'Card.xlsx')
        if not os.path.exists(template_path):
            err_msg = f"–®–∞–±–ª–æ–Ω Excel –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {template_path}"
            logger.error(err_msg)
            if request: messages.error(request, "–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ Excel –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return redirect(referrer_url)

        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏–∑ {template_path}")
        wb = load_workbook(template_path)
        ws_front = wb["–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞"] # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # --- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–ø–∫–∏ ---
        logger.info("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")
        safe_set_cell_value(ws_front, 5, 2, getattr(employee, 'full_name_nominative', "") or "")
        gender = "–ú—É–∂—Å–∫–æ–π"
        try: from directory.views.siz_issued import determine_gender_from_patronymic; gender = determine_gender_from_patronymic(employee.full_name_nominative)
        except Exception as e: logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–∞: {e}")
        safe_set_cell_value(ws_front, 5, 5, gender)
        department_name = ""
        if employee.department: department_name = employee.department.name
        elif employee.subdivision: department_name = employee.subdivision.name
        safe_set_cell_value(ws_front, 7, 2, department_name)
        safe_set_cell_value(ws_front, 9, 2, employee.position.position_name)
        safe_set_cell_value(ws_front, 6, 5, str(getattr(employee, 'height', "")) or "")
        safe_set_cell_value(ws_front, 8, 5, getattr(employee, 'clothing_size', "") or "")
        safe_set_cell_value(ws_front, 9, 5, getattr(employee, 'shoe_size', "") or "")
        logger.info("–®–∞–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

        # --- –í—Å—Ç–∞–≤–∫–∞ –Ω–æ—Ä–º ---
        template_row = 16; sign_row = 30
        if base_norms.exists():
            logger.info(f"–í—Å—Ç–∞–≤–∫–∞ {norms_count} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –Ω–æ—Ä–º –°–ò–ó")
            insert_data_with_template(ws=ws_front, data_list=list(base_norms), template_row=template_row, sign_row=sign_row, fill_func=fill_base_norm_row)
            logger.info("–î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º –°–ò–ó —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç ---
        safe_name = "".join(c if c.isalnum() else "_" for c in employee.full_name_nominative) or f"employee_{employee_id}"
        filename = f"Card_{safe_name}_{uuid.uuid4().hex[:8]}.xlsx"

        output = BytesIO() # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        wb.save(output)
        output.seek(0)

        if save_to_db:
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel –≤ –ë–î")
            try:
                template, _ = DocumentTemplate.objects.get_or_create(document_type='ppe_card', defaults={'name': '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó', 'is_active': True})
                generated_doc = GeneratedDocument(template=template, employee=employee, created_by=user, document_data={'employee_id': employee_id, 'generated_type': 'excel', 'missing_ppe_data': missing_ppe_data})
                generated_doc.document_file.save(filename, ContentFile(output.read()), save=True)
                logger.info(f"Excel-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {generated_doc.pk}")
                return generated_doc # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            except Exception as e:
                 logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î: {e}")
                 if request: messages.error(request, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel –≤ –ë–î: {e}")
                 return redirect(referrer_url)
        else:
            logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FileResponse –¥–ª—è Excel")
            response_output = BytesIO(output.read()); response_output.seek(0)
            response = FileResponse(response_output, content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            response['Content-Disposition'] = f'attachment; filename="{filename}"'
            logger.info(f"Excel-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id} –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            return response

    except Employee.DoesNotExist:
        logger.error(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel")
        if request: messages.error(request, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return redirect(referrer_url)
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel: {e}")
        if request: messages.error(request, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return redirect(referrer_url)
""",
    r"directory\urls.py": r"""
# D:\YandexDisk\OT_online\directory\urls.py
from django.urls import path, include, reverse_lazy
from django.contrib.auth import views as auth_views
from django.shortcuts import redirect
from django.contrib.auth import logout
import logging # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logging

from .views import siz # –ò–º–ø–æ—Ä—Ç view –¥–ª—è SIZ
from .views import siz_issued  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è siz_issued

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
from directory.views.documents import (
    DocumentSelectionView,
    DocumentsPreviewView,
    update_document_data,
    GeneratedDocumentListView,
    GeneratedDocumentDetailView,
    document_download,
    # generate_ppe_card_view # –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ siz_issued
)

from directory.views import (
    HomePageView,
    EmployeeListView, EmployeeCreateView, EmployeeUpdateView, EmployeeDeleteView, EmployeeHiringView,
    PositionListView, PositionCreateView, PositionUpdateView, PositionDeleteView,
    UserRegistrationView,
)

from directory.autocomplete_views import (
    OrganizationAutocomplete, SubdivisionAutocomplete, DepartmentAutocomplete,
    PositionAutocomplete, DocumentAutocomplete, EquipmentAutocomplete, SIZAutocomplete,
)

app_name = 'directory'
logger = logging.getLogger(__name__)

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞
def logout_view(request):
    logout(request)
    return redirect('directory:auth:login')

# URL –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
autocomplete_patterns = [
    path('organization/', OrganizationAutocomplete.as_view(), name='organization-autocomplete'),
    path('subdivision/', SubdivisionAutocomplete.as_view(), name='subdivision-autocomplete'),
    path('department/', DepartmentAutocomplete.as_view(), name='department-autocomplete'),
    path('position/', PositionAutocomplete.as_view(), name='position-autocomplete'),
    path('document/', DocumentAutocomplete.as_view(), name='document-autocomplete'),
    path('equipment/', EquipmentAutocomplete.as_view(), name='equipment-autocomplete'),
    path('siz/', SIZAutocomplete.as_view(), name='siz-autocomplete'),
]

# URL —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
employee_patterns = [
    path('', EmployeeListView.as_view(), name='employee_list'),
    path('create/', EmployeeCreateView.as_view(), name='employee_create'),
    path('hire/', EmployeeHiringView.as_view(), name='employee_hire'),
    path('<int:pk>/update/', EmployeeUpdateView.as_view(), name='employee_update'),
    path('<int:pk>/delete/', EmployeeDeleteView.as_view(), name='employee_delete'),
]

# URL –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
position_patterns = [
    path('', PositionListView.as_view(), name='position_list'),
    path('create/', PositionCreateView.as_view(), name='position_create'),
    path('<int:pk>/update/', PositionUpdateView.as_view(), name='position_update'),
    path('<int:pk>/delete/', PositionDeleteView.as_view(), name='position_delete'),
]

# URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
document_patterns = [
    path('', GeneratedDocumentListView.as_view(), name='document_list'),
    path('<int:pk>/', GeneratedDocumentDetailView.as_view(), name='document_detail'),
    path('<int:pk>/download/', document_download, name='document_download'),
    path('selection/<int:employee_id>/', DocumentSelectionView.as_view(), name='document_selection'),
    path('preview/', DocumentsPreviewView.as_view(), name='documents_preview'),
    path('api/update-preview-data/', update_document_data, name='update_preview_data'),
    # URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ preview)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑ siz_issued
    path('generate-ppe-card/<int:employee_id>/', siz_issued.export_personal_card_excel_view, name='generate_ppe_card'),
]

# URL –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
equipment_patterns = []

# URL –°–ò–ó (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
siz_patterns = [
    path('', siz.SIZListView.as_view(), name='siz_list'),
    path('norms/create/', siz.SIZNormCreateView.as_view(), name='siznorm_create'),
    path('norms/api/', siz.siz_by_position_api, name='siz_api'),
    path('personal-card/<int:employee_id>/pdf/', siz_issued.export_personal_card_pdf, name='siz_personal_card_pdf'),
    # URL –¥–ª—è Excel –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    path('personal-card/<int:employee_id>/excel/', siz_issued.export_personal_card_excel_view, name='siz_personal_card_excel'),
    path('issue-selected/<int:employee_id>/', siz_issued.issue_selected_siz, name='issue_selected_siz'),
    path('issue/', siz_issued.SIZIssueFormView.as_view(), name='siz_issue'),
    path('issue/employee/<int:employee_id>/', siz_issued.SIZIssueFormView.as_view(), name='siz_issue_for_employee'),
    path('personal-card/<int:employee_id>/', siz_issued.SIZPersonalCardView.as_view(), name='siz_personal_card'),
    path('return/<int:siz_issued_id>/', siz_issued.SIZIssueReturnView.as_view(), name='siz_return'),
    # API
    path('api/positions/<int:position_id>/siz-norms/', siz.get_position_siz_norms, name='api_position_siz_norms'),
    path('api/employees/<int:employee_id>/issued-siz/', siz_issued.employee_siz_issued_list, name='api_employee_issued_siz'),
    path('api/siz/<int:siz_id>/', siz.get_siz_details, name='api_siz_details'),
]

# URL –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_patterns = [
    path('login/', auth_views.LoginView.as_view(template_name='registration/login.html', redirect_authenticated_user=True), name='login'),
    path('logout/', logout_view, name='logout'),
    path('register/', UserRegistrationView.as_view(), name='register'),
    path('password_reset/', auth_views.PasswordResetView.as_view(template_name='registration/password_reset_form.html', email_template_name='registration/password_reset_email.html', success_url=reverse_lazy('directory:auth:password_reset_done')), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(template_name='registration/password_reset_done.html'), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='registration/password_reset_confirm.html', success_url=reverse_lazy('directory:auth:password_reset_complete')), name='password_reset_confirm'),
    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='registration/password_reset_complete.html'), name='password_reset_complete'),
]

# –û—Å–Ω–æ–≤–Ω—ã–µ URL
urlpatterns = [
    path('', HomePageView.as_view(), name='home'),
    path('auth/', include((auth_patterns, 'auth'))),
    path('autocomplete/', include(autocomplete_patterns)),
    path('employees/', include((employee_patterns, 'employees'))),
    path('positions/', include((position_patterns, 'positions'))),
    path('documents/', include((document_patterns, 'documents'))),
    path('equipment/', include((equipment_patterns, 'equipment'))),
    path('siz/', include((siz_patterns, 'siz'))),
]

logger.debug("URL-—à–∞–±–ª–æ–Ω—ã –¥–ª—è 'directory' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
""",
    r"directory\views\__init__.py": r"""
# D:\YandexDisk\OT_online\directory\views\__init__.py
from django.views.generic import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, redirect
from django.contrib import messages
from django.db.models import Prefetch, Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

from directory.forms import EmployeeHiringForm
from directory.models import (
    Organization,
    StructuralSubdivision,
    Department,
    Employee,
    Position
)
from .auth import UserRegistrationView

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
from .employees import (
    EmployeeListView,
    EmployeeCreateView,
    EmployeeUpdateView,
    EmployeeDeleteView,
    EmployeeHiringView,
    get_subdivisions
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
from .positions import (
    PositionListView,
    PositionCreateView,
    PositionUpdateView,
    PositionDeleteView,
    get_positions,
    get_departments
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
from directory.views.documents import (
    DocumentSelectionView,
    # –£–±—Ä–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
    # InternshipOrderFormView,
    # AdmissionOrderFormView,
    DocumentsPreviewView,
    GeneratedDocumentListView,
    GeneratedDocumentDetailView,
    document_download,
    update_document_data
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –°–ò–ó
from . import siz # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è siz
from .siz_issued import (
    SIZIssueFormView,
    SIZPersonalCardView,
    SIZIssueReturnView,
    employee_siz_issued_list,
    export_personal_card_excel_view, # –ò–º–ø–æ—Ä—Ç –¥–ª—è Excel
    export_personal_card_pdf, # –ò–º–ø–æ—Ä—Ç –¥–ª—è PDF
    issue_selected_siz # –ò–º–ø–æ—Ä—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏
)


class HomePageView(LoginRequiredMixin, TemplateView):
    """
    üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    (–õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç—ã –≤—ã—à–µ)
    """
    template_name = 'directory/home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'üè† –ì–ª–∞–≤–Ω–∞—è'
        user = self.request.user
        if user.is_superuser: allowed_orgs = Organization.objects.all()
        elif hasattr(user, 'profile'): allowed_orgs = user.profile.organizations.all()
        else: allowed_orgs = Organization.objects.none()
        search_query = self.request.GET.get('search', '')
        context['search_query'] = search_query # Pass search query to template
        organizations_data = []
        filtered_employee_ids = set()
        if search_query:
             filtered_employees = Employee.objects.filter( (Q(full_name_nominative__icontains=search_query) | Q(position__position_name__icontains=search_query)) & Q(organization__in=allowed_orgs) ).select_related('position', 'organization', 'subdivision', 'department')
             filtered_employee_ids = set(filtered_employees.values_list('id', flat=True))
             org_ids_with_matches = set(filtered_employees.values_list('organization_id', flat=True))
             allowed_orgs = allowed_orgs.filter(id__in=org_ids_with_matches)
        employee_prefetch_qs = Employee.objects.select_related('position').filter(id__in=filtered_employee_ids) if search_query else Employee.objects.select_related('position')
        employee_prefetch_attr = 'filtered_employees_list' if search_query else 'all_employees_list'
        employee_prefetch = Prefetch('employees', queryset=employee_prefetch_qs, to_attr=employee_prefetch_attr)
        dept_employee_prefetch = Prefetch('employees', queryset=employee_prefetch_qs, to_attr=employee_prefetch_attr)
        department_prefetch = Prefetch('departments',queryset=Department.objects.prefetch_related(dept_employee_prefetch),to_attr='departments_with_employees')
        subdivision_prefetch = Prefetch('subdivisions',queryset=StructuralSubdivision.objects.prefetch_related(department_prefetch, employee_prefetch),to_attr='subdivisions_with_departments_and_employees')
        organizations_qs = allowed_orgs.prefetch_related(subdivision_prefetch, employee_prefetch)
        for org in organizations_qs:
            org_employees = getattr(org, employee_prefetch_attr, [])
            has_employees_in_org = bool(org_employees)
            has_employees_deeper = False
            org_data = {'id': org.id,'name': org.full_name_ru,'short_name': org.short_name_ru,'employees': list(org_employees),'subdivisions': []}
            subdivisions = getattr(org, 'subdivisions_with_departments_and_employees', [])
            for sub in subdivisions:
                 sub_employees = getattr(sub, employee_prefetch_attr, [])
                 has_employees_in_sub = bool(sub_employees)
                 sub_has_employees_deeper = False
                 sub_data = {'id': sub.id,'name': sub.name,'employees': list(sub_employees),'departments': []}
                 departments = getattr(sub, 'departments_with_employees', [])
                 for dept in departments:
                     dept_employees = getattr(dept, employee_prefetch_attr, [])
                     has_employees_in_dept = bool(dept_employees)
                     if has_employees_in_dept:
                         dept_data = {'id': dept.id,'name': dept.name,'employees': list(dept_employees)}
                         sub_data['departments'].append(dept_data); sub_has_employees_deeper = True
                 if has_employees_in_sub or sub_has_employees_deeper:
                     org_data['subdivisions'].append(sub_data); has_employees_deeper = True
            if has_employees_in_org or has_employees_deeper: organizations_data.append(org_data)
        context['organizations'] = organizations_data
        return context


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
__all__ = [
    # –û–±—â–∏–µ
    'HomePageView',
    'UserRegistrationView',
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    'EmployeeListView', 'EmployeeCreateView', 'EmployeeUpdateView', 'EmployeeDeleteView', 'EmployeeHiringView',
    'get_subdivisions',
    # –î–æ–ª–∂–Ω–æ—Å—Ç–∏
    'PositionListView', 'PositionCreateView', 'PositionUpdateView', 'PositionDeleteView',
    'get_positions', 'get_departments',
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    'DocumentSelectionView', 'DocumentsPreviewView', 'update_document_data',
    'GeneratedDocumentListView', 'GeneratedDocumentDetailView', 'document_download',
    # –°–ò–ó
    'siz', # –ú–æ–¥—É–ª—å siz
    'SIZIssueFormView', 'SIZPersonalCardView', 'SIZIssueReturnView',
    'employee_siz_issued_list', 'export_personal_card_excel_view', 'export_personal_card_pdf',
    'issue_selected_siz',
]

""",
    r"directory\views\documents\__init__.py": r"""
# D:\YandexDisk\OT_online\directory\views\documents\__init__.py
"""
üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏,
—á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ directory.views.documents
"""
from .selection import DocumentSelectionView
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º
# from .forms import (
#     InternshipOrderFormView,
#     AdmissionOrderFormView
# )
from .preview import (
    DocumentsPreviewView,
    update_document_data
)
from .management import (
    GeneratedDocumentListView,
    GeneratedDocumentDetailView,
    document_download
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
from directory.views.siz_issued import export_personal_card_excel_view

__all__ = [
    'DocumentSelectionView',
    # –£–±—Ä–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
    # 'InternshipOrderFormView',
    # 'AdmissionOrderFormView',
    'DocumentsPreviewView',
    'update_document_data',
    'GeneratedDocumentListView',
    'GeneratedDocumentDetailView',
    'document_download',
    'export_personal_card_excel_view', # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Excel –°–ò–ó
]

""",
    r"directory\views\documents\forms.py": r"""
# D:\YandexDisk\OT_online\directory\views\documents\forms.py
"""
üìù –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ë–û–õ–¨–®–ï –ù–ï –°–û–î–ï–†–ñ–ò–¢ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ preview.py –∏ selection.py.
–û—Å—Ç–∞–≤–ª–µ–Ω –ø—É—Å—Ç—ã–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω.
"""
# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ InternshipOrderFormView –∏ AdmissionOrderFormView –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
# –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ DocumentsPreviewView.
pass

""",
    r"directory\views\documents\preview.py": r"""
# D:\YandexDisk\OT_online\directory\views\documents\preview.py
"""
üëÅÔ∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.
"""
import json
import logging
from django.views.generic import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect, render # –î–æ–±–∞–≤–∏–ª–∏ render
from django.http import JsonResponse, HttpResponseRedirect, HttpResponseBadRequest, FileResponse # –î–æ–±–∞–≤–∏–ª–∏ FileResponse
from django.urls import reverse # –î–æ–±–∞–≤–∏–ª–∏ reverse
from django.contrib import messages
from django.utils.translation import gettext as _
from django.views.decorators.http import require_POST
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required

from directory.models import Employee
from directory.models.document_template import DocumentTemplate, GeneratedDocument
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç DocumentPreviewForm
from directory.utils.docx_generator import (
    generate_document_from_template,
    get_document_template
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
from directory.utils.excel_export import generate_card_excel
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
from .utils import MISSING_DATA_PLACEHOLDER

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class DocumentsPreviewView(LoginRequiredMixin, TemplateView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    """
    template_name = 'directory/documents/documents_preview.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = _('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data_json = self.request.session.get('preview_data')
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –∏–∑ —Å–µ—Å—Å–∏–∏
        generate_ppe_card = self.request.session.get('generate_ppe_card', False)
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        employee_id = self.request.session.get('employee_id_for_preview')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if not preview_data_json and not generate_ppe_card:
            messages.error(self.request, _('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.'))
            context['error_message'] = _('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            return context

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX
        preview_data = []
        if preview_data_json:
            try:
                preview_data = json.loads(preview_data_json)
                context['preview_data'] = preview_data
            except json.JSONDecodeError:
                messages.error(self.request, _('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX.'))
                context['preview_data'] = [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞

        context['generate_ppe_card'] = generate_ppe_card
        context['has_docx_documents'] = bool(preview_data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ DOCX
        docx_missing_data_fields = []
        for doc_data in preview_data:
            if doc_data.get('document_data', {}).get('has_missing_data', False):
                missing = doc_data['document_data'].get('missing_data_list', [])
                doc_type_display = dict(DocumentTemplate.DOCUMENT_TYPES).get(doc_data.get('document_type'), doc_data.get('document_type'))
                for field_desc in missing:
                    docx_missing_data_fields.append(f"'{doc_type_display}': {field_desc}")
        context['docx_missing_data_fields'] = docx_missing_data_fields
        context['docx_has_missing_data'] = bool(docx_missing_data_fields)
        if context['docx_has_missing_data']:
            messages.warning(self.request, _("–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ DOCX –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π."))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (–Ω—É–∂–Ω–∞ –∏ –¥–ª—è DOCX, –∏ –¥–ª—è Excel)
        employee = None
        if employee_id:
            try:
                employee = get_object_or_404(Employee, id=employee_id)
                context['employee'] = employee
                context['employee_id'] = employee_id # –ü–µ—Ä–µ–¥–∞–µ–º ID —è–≤–Ω–æ
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={employee_id}: {e}")
                messages.error(self.request, _('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.'))
                context['error_message'] = _('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
                context['preview_data'] = []
                context['generate_ppe_card'] = False
                return context
        else:
             messages.error(self.request, _('–ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.'))
             context['error_message'] = _('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
             context['preview_data'] = []
             context['generate_ppe_card'] = False
             return context

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
        ppe_card_missing_data_fields = []
        if generate_ppe_card and employee:
            if not employee.height: ppe_card_missing_data_fields.append('–†–æ—Å—Ç')
            if not employee.clothing_size: ppe_card_missing_data_fields.append('–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã')
            if not employee.shoe_size: ppe_card_missing_data_fields.append('–†–∞–∑–º–µ—Ä –æ–±—É–≤–∏')
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó

        context['ppe_card_missing_data_fields'] = ppe_card_missing_data_fields
        context['ppe_card_has_missing_data'] = bool(ppe_card_missing_data_fields)
        if context['ppe_card_has_missing_data']:
             messages.warning(self.request, _("–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ –Ω–∏—Ö."))


        # –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        context['document_types_dict'] = dict(DocumentTemplate.DOCUMENT_TYPES)

        return context

    def post(self, request, *args, **kwargs):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        """
        action = request.POST.get('action')
        employee_id = request.session.get('employee_id_for_preview')

        if not employee_id:
            messages.error(request, _('–ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–µ—Å—Å–∏–∏.'))
            return redirect('directory:home')

        if action == 'generate_docx':
            return self._generate_docx_documents(request, employee_id)
        elif action == 'generate_ppe_card':
            return self._generate_ppe_card_excel(request, employee_id)
        else:
            messages.error(request, _('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'))
            return redirect(request.META.get('HTTP_REFERER', 'directory:home'))


    def _generate_docx_documents(self, request, employee_id):
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")
        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            messages.error(request, _('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.'))
            return redirect('directory:documents:documents_preview')

        try:
            preview_data = json.loads(preview_data_json)
            employee = get_object_or_404(Employee, id=employee_id)
        except json.JSONDecodeError:
            messages.error(request, _('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX.'))
            return redirect('directory:documents:documents_preview')
        except Employee.DoesNotExist:
             messages.error(request, _('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –Ω–µ –Ω–∞–π–¥–µ–Ω.'))
             return redirect('directory:home')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        updated_data = {}
        for key, value in request.POST.items():
            if key.startswith('document_data_'):
                try:
                    _, doc_type, field_name = key.split('_', 2)
                    if doc_type not in updated_data: updated_data[doc_type] = {}
                    updated_data[doc_type][field_name] = value
                    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ DOCX: —Ç–∏–ø={doc_type}, –ø–æ–ª–µ={field_name}")
                except ValueError: logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—è DOCX –≤ POST: {key}")

        generated_docx = []
        errors_found = False

        for doc_data in preview_data:
            doc_type = doc_data.get('document_type')
            document_context = doc_data.get('document_data', {})

            if doc_type in updated_data:
                document_context.update(updated_data[doc_type])
                logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DOCX {doc_type} –æ–±–Ω–æ–≤–ª–µ–Ω.")
                # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                document_context['has_missing_data'] = any(v == MISSING_DATA_PLACEHOLDER for v in document_context.values())
                document_context['missing_data_list'] = [k for k, v in document_context.items() if v == MISSING_DATA_PLACEHOLDER]


            if document_context.get('has_missing_data', False):
                missing_fields_str = ", ".join(document_context.get('missing_data_list', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è']))
                type_name = dict(DocumentTemplate.DOCUMENT_TYPES).get(doc_type, doc_type)
                messages.error(request, _(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å '{type_name}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({missing_fields_str})."))
                errors_found = True
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

            template = get_document_template(doc_type)
            if not template:
                 messages.error(request, _(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{doc_type}'."))
                 errors_found = True
                 continue

            try:
                generated_doc = generate_document_from_template(
                    template, employee, request.user, document_context
                )
                if generated_doc: generated_docx.append(generated_doc)
                else: errors_found = True; messages.error(request, _(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{template.name}'."))
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX {doc_type} –¥–ª—è {employee_id}: {e}")
                messages.error(request, _(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{template.name}': {e}"))
                errors_found = True

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX –∏–∑ —Å–µ—Å—Å–∏–∏
        if 'preview_data' in request.session:
            del request.session['preview_data']; request.session.modified = True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if generated_docx and not errors_found:
            messages.success(request, _('DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {} —à—Ç.').format(len(generated_docx)))
            return redirect('directory:documents:document_list') # –í—Å–µ–≥–¥–∞ –∏–¥–µ–º –≤ —Å–ø–∏—Å–æ–∫
        elif errors_found:
             if generated_docx: messages.warning(request, _('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö.'))
             else: messages.error(request, _('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö.'))
             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
             # –ù–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –°–ò–ó, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
             generate_ppe_card_flag = request.session.get('generate_ppe_card', False)
             response = redirect('directory:documents:documents_preview')
             request.session['generate_ppe_card'] = generate_ppe_card_flag # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
             request.session['employee_id_for_preview'] = employee_id # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID
             request.session.modified = True
             return response
        else: # –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ preview_data –±—ã–ª –Ω–µ –ø—É—Å—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             messages.error(request, _('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã.'))
             return redirect('directory:documents:documents_preview')


    def _generate_ppe_card_excel(self, request, employee_id):
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó (Excel) –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")

        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel, –°–û–•–†–ê–ù–Ø–Ø –≤ –ë–î
            generated_doc = generate_card_excel(request, employee_id, save_to_db=True, user=request.user)

            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –°–ò–ó –∏–∑ —Å–µ—Å—Å–∏–∏
            if 'generate_ppe_card' in request.session:
                 del request.session['generate_ppe_card']; request.session.modified = True

            if isinstance(generated_doc, GeneratedDocument):
                messages.success(request, _('–ö–∞—Ä—Ç–æ—á–∫–∞ –°–ò–ó (Excel) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'))
                # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≥–¥–µ –±—É–¥–µ—Ç –∏ Excel —Ñ–∞–π–ª
                return redirect('directory:documents:document_list')
            else:
                # generate_card_excel –≤–µ—Ä–Ω–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–∞–º
                logger.warning(f"–§—É–Ω–∫—Ü–∏—è generate_card_excel –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ–±—ä–µ–∫—Ç GeneratedDocument –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏–∑ generate_card_excel), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
                return generated_doc

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}: {e}")
            messages.error(request, _(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó: {e}'))
            return redirect('directory:documents:documents_preview') # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä


@method_decorator(login_required, name='dispatch')
@require_POST
def update_document_data(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
    """
    try:
        doc_type = request.POST.get('doc_type')
        field_name = request.POST.get('field_name')
        field_value = request.POST.get('field_value')

        preview_data_json = request.session.get('preview_data')
        if not preview_data_json:
            return JsonResponse({'success': False, 'error': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞'})

        preview_data = json.loads(preview_data_json)

        data_updated = False
        updated_doc_info = {}
        for doc_data in preview_data:
            if doc_data.get('document_type') == doc_type:
                if 'document_data' in doc_data:
                     doc_data['document_data'][field_name] = field_value
                     data_updated = True
                     # –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
                     if 'missing_data_list' in doc_data['document_data']:
                         # –ò—Å–ø–æ–ª—å–∑—É–µ–º list comprehension –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                         doc_data['document_data']['missing_data_list'] = [
                             item for item in doc_data['document_data']['missing_data_list']
                             if item != field_name # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—è)
                         ]
                         # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥ has_missing_data
                         doc_data['document_data']['has_missing_data'] = bool(doc_data['document_data']['missing_data_list'])
                     updated_doc_info = doc_data # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                     break
        if not data_updated:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ {doc_type} –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {field_name}")

        request.session['preview_data'] = json.dumps(preview_data, default=str)
        request.session.modified = True

        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {doc_type}, –ø–æ–ª–µ {field_name}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return JsonResponse({
            'success': True,
            'has_missing_data': updated_doc_info.get('document_data', {}).get('has_missing_data', False)
        })

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return JsonResponse({'success': False, 'error': str(e)})

""",
    r"directory\views\documents\selection.py": r"""
# D:\YandexDisk\OT_online\directory\views\documents\selection.py
"""
üîç –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
"""
import json
import logging
from django.views.generic import FormView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib import messages
from django.utils.translation import gettext as _

from directory.models import Employee
from directory.forms.document_forms import DocumentSelectionForm
from directory.utils.docx_generator import prepare_employee_context
from directory.views.documents.utils import ( # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    get_internship_leader_position, get_internship_leader_name,
    get_internship_leader_initials, get_director_info,
    get_commission_members, get_safety_instructions,
    get_employee_documents, MISSING_DATA_PLACEHOLDER # <--- –ò–º–ø–æ—Ä—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class DocumentSelectionView(LoginRequiredMixin, FormView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    template_name = 'directory/documents/document_selection.html'
    form_class = DocumentSelectionForm

    def get_initial(self):
        initial = super().get_initial()
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            initial['employee_id'] = employee_id
        return initial

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            try:
                context['employee'] = get_object_or_404(Employee.objects.select_related(
                    'position', 'organization', 'subdivision', 'department'
                ), id=employee_id)
            except Employee.DoesNotExist:
                 messages.error(self.request, _("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω."))
                 # –û—á–∏—â–∞–µ–º employee_id –∏–∑ kwargs, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
                 self.kwargs.pop('employee_id', None)
        context['title'] = _('–í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
        return context

    def form_valid(self, form):
        try:
            employee_id = form.cleaned_data.get('employee_id')
            document_types = form.cleaned_data.get('document_types', []) # –¢–æ–ª—å–∫–æ DOCX —Ç–∏–ø—ã
            generate_ppe_card = form.cleaned_data.get('generate_ppe_card', False) # –§–ª–∞–≥ –¥–ª—è Excel

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—â–µ —Ä–∞–∑
            try:
                employee = get_object_or_404(Employee, id=employee_id)
            except Employee.DoesNotExist:
                messages.error(self.request, _("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
                return self.form_invalid(form)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            if not document_types and not generate_ppe_card:
                messages.error(self.request, _('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó.'))
                return self.form_invalid(form)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            base_context = prepare_employee_context(employee)

            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX
            preview_data_docx = []
            for doc_type in document_types:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ppe_card, –µ—Å–ª–∏ –æ–Ω —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–ª —Å—é–¥–∞
                if doc_type == 'ppe_card':
                    continue
                context = self._prepare_document_context(doc_type, employee, base_context)
                preview_data_docx.append({
                    'document_type': doc_type,
                    'document_data': context,
                    'employee_id': employee_id # –î–æ–±–∞–≤–ª—è–µ–º ID —Å—é–¥–∞
                })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ DOCX –∏ —Ñ–ª–∞–≥ Excel –≤ —Å–µ—Å—Å–∏—é
            if preview_data_docx:
                self.request.session['preview_data'] = json.dumps(preview_data_docx, default=str)
            elif 'preview_data' in self.request.session:
                 del self.request.session['preview_data'] # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ DOCX –Ω–µ –≤—ã–±—Ä–∞–Ω—ã

            self.request.session['generate_ppe_card'] = generate_ppe_card
            self.request.session['employee_id_for_preview'] = employee_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è preview

            self.request.session.modified = True # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è

            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: employee_id={employee_id}, docx_types={document_types}, generate_ppe_card={generate_ppe_card}")

            return redirect('directory:documents:documents_preview')

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            messages.error(self.request, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
            return self.form_invalid(form)

    def _prepare_document_context(self, document_type, employee, base_context):
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX.
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        context = base_context.copy()
        missing_data_list = [] # –°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
        def add_context(key, value, success, missing_message):
            context[key] = value if success else MISSING_DATA_PLACEHOLDER
            if not success:
                missing_data_list.append(missing_message)
            return success

        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DOCX —Ç–∏–ø–∞: {document_type}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.id}")

        if document_type == 'internship_order':
            context['order_number'] = '' # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            period = getattr(employee.position, 'internship_period_days', 0) if employee.position else 0
            # –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ - –µ—Å–ª–∏ 0, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å (–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π)
            add_context('internship_duration', period if period else 2, True, '') # –í—Å–µ–≥–¥–∞ success=True, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2, –µ—Å–ª–∏ 0
            # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
            pos_ok = add_context('head_of_internship_position', *get_internship_leader_position(employee), '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏')
            name_ok = add_context('head_of_internship_name', *get_internship_leader_name(employee), '–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏')
            init_ok = add_context('head_of_internship_name_initials', *get_internship_leader_initials(employee), '–ò–Ω–∏—Ü–∏–∞–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏')
            # –î–∏—Ä–µ–∫—Ç–æ—Ä
            dir_info, dir_ok = get_director_info(employee.organization)
            add_context('director_position', dir_info['position'], dir_ok, '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
            add_context('director_name', dir_info['name'], dir_ok, '–§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')

        elif document_type == 'admission_order':
            context['order_number'] = ''
            # –î–∏—Ä–µ–∫—Ç–æ—Ä
            dir_info, dir_ok = get_director_info(employee.organization)
            add_context('director_position', dir_info['position'], dir_ok, '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
            add_context('director_name', dir_info['name'], dir_ok, '–§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞')
            # –ò–Ω–∏—Ü–∏–∞–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–≥–æ –∂–µ, —á—Ç–æ –∏ –¥–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏)
            leader_init, init_ok = get_internship_leader_initials(employee)
            add_context('head_of_internship_name_initials', leader_init, init_ok, '–ò–Ω–∏—Ü–∏–∞–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –ø–æ–ª–µ, —á—Ç–æ –≤ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ

        elif document_type == 'knowledge_protocol':
            context['protocol_number'] = ''
            context['knowledge_result'] = '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏
            members, members_ok = get_commission_members(employee)
            add_context('commission_members', members, members_ok, '–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏')
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instruct, instruct_ok = get_safety_instructions(employee)
            add_context('safety_instructions', instruct, instruct_ok, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –û–¢')

        elif document_type == 'doc_familiarization':
            context['familiarization_date'] = base_context.get('current_date', '')
            # –î–æ–∫—É–º–µ–Ω—Ç—ã
            docs, docs_ok = get_employee_documents(employee)
            add_context('documents_list', docs, docs_ok, '–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è')

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['missing_data_list'] = missing_data_list # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
        context['has_missing_data'] = bool(missing_data_list) # –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫

        if context['has_missing_data']:
             logger.warning(f"–î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_type} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_data_list}")

        return context
""",
    r"directory\views\documents\utils.py": r"""
# D:\YandexDisk\OT_online\directory\views\documents\utils.py
"""
üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.
"""
import logging
from typing import Tuple, Optional, List, Dict, Any
from directory.utils.declension import get_initials_from_name
from directory.models import Employee, Organization, Position, Document # –î–æ–±–∞–≤–∏–ª–∏ Document

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
MISSING_DATA_PLACEHOLDER = "–ù–ï –ù–ê–ô–î–ï–ù–û (—É–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)"

def _find_employee_with_flag(employee: Employee, flag_name: str, search_level: str) -> Optional[Employee]:
    """ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ñ–ª–∞–≥–æ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ """
    filter_kwargs = {'position__' + flag_name: True}
    exclude_kwargs = {'pk': employee.pk} # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    if search_level == "department" and employee.department:
        filter_kwargs['department'] = employee.department
    elif search_level == "subdivision" and employee.subdivision:
        filter_kwargs['subdivision'] = employee.subdivision
        filter_kwargs['department__isnull'] = True # –¢–æ–ª—å–∫–æ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    elif search_level == "organization" and employee.organization:
        filter_kwargs['organization'] = employee.organization
        filter_kwargs['subdivision__isnull'] = True # –¢–æ–ª—å–∫–æ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        filter_kwargs['department__isnull'] = True
    else:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–∏—Å–∫–∞ '{search_level}' –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}")
        return None # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–∏—Å–∫–∞

    # –î–æ–±–∞–≤–ª—è–µ–º select_related –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    found_employee = Employee.objects.select_related('position').filter(**filter_kwargs).exclude(**exclude_kwargs).first()

    if found_employee:
         logger.info(f"–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ '{found_employee}' —Å —Ñ–ª–∞–≥–æ–º '{flag_name}' –Ω–∞ —É—Ä–æ–≤–Ω–µ '{search_level}' –¥–ª—è {employee}")
    return found_employee

def get_employee_hierarchy_level(employee: Employee, target_employee: Optional[Employee]) -> Optional[str]:
    """ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å target_employee –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ employee """
    if not target_employee or not employee: return None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ç–æ–π –∂–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if employee.organization != target_employee.organization: return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏
    if employee.department and target_employee.department == employee.department: return "department"
    if employee.subdivision and target_employee.subdivision == employee.subdivision and not target_employee.department: return "subdivision"
    if not target_employee.subdivision and not target_employee.department: return "organization" # –ù–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    return None # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ç–∫–∏

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ ---

def get_internship_leader(employee: Employee) -> Tuple[Optional[Employee], Optional[str], bool]:
    """
    –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ (can_be_internship_leader=True)
    Returns: tuple: (leader_obj, level, success)
    """
    for level in ["department", "subdivision", "organization"]:
        leader = _find_employee_with_flag(employee, "can_be_internship_leader", level)
        if leader:
            return leader, level, True
    logger.warning(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None, None, False

def get_internship_leader_position(employee: Employee) -> Tuple[str, bool]:
    leader, _, success = get_internship_leader(employee)
    if success and leader and leader.position:
        return leader.position.position_name, True
    return MISSING_DATA_PLACEHOLDER, False

def get_internship_leader_name(employee: Employee) -> Tuple[str, bool]:
    leader, _, success = get_internship_leader(employee)
    if success and leader:
        return leader.full_name_nominative, True
    return MISSING_DATA_PLACEHOLDER, False

def get_internship_leader_initials(employee: Employee) -> Tuple[str, bool]:
    leader, _, success = get_internship_leader(employee)
    if success and leader:
        return get_initials_from_name(leader.full_name_nominative), True
    return MISSING_DATA_PLACEHOLDER, False

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞) ---

def get_document_signer(employee: Employee) -> Tuple[Optional[Employee], Optional[str], bool]:
    """
    –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (can_sign_orders=True)
    Returns: tuple: (signer_obj, level, success)
    """
    for level in ["department", "subdivision", "organization"]:
        signer = _find_employee_with_flag(employee, "can_sign_orders", level)
        if signer:
            return signer, level, True
    logger.warning(f"–ü–æ–¥–ø–∏—Å–∞–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None, None, False

def get_director_info(organization: Organization) -> Tuple[Dict[str, str], bool]:
    """ –ò—â–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ """
    # –°–æ–∑–¥–∞–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ" —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ _find_employee_with_flag
    temp_employee_for_search = Employee(organization=organization)
    signer = _find_employee_with_flag(temp_employee_for_search, "can_sign_orders", "organization")

    if signer and signer.position:
        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω—Ç (–¥–∏—Ä–µ–∫—Ç–æ—Ä) –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization}: {signer}")
        return {
            'position': signer.position.position_name,
            'name': get_initials_from_name(signer.full_name_nominative)
        }, True
    else:
        logger.warning(f"–ü–æ–¥–ø–∏—Å–∞–Ω—Ç (–¥–∏—Ä–µ–∫—Ç–æ—Ä) –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {
            'position': MISSING_DATA_PLACEHOLDER,
            'name': MISSING_DATA_PLACEHOLDER
        }, False

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---

def get_commission_members(employee: Employee) -> Tuple[List[Dict[str, str]], bool]:
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ """
    members_list = []
    any_found = False # –§–ª–∞–≥, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ
    org = employee.organization

    # –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å
    chairman = Employee.objects.filter(organization=org, position__commission_role='chairman').select_related('position').first()
    chairman_data = {"role": "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏"}
    if chairman and chairman.position:
        chairman_data["position"] = chairman.position.position_name
        chairman_data["name"] = get_initials_from_name(chairman.full_name_nominative)
        any_found = True
    else:
        chairman_data["position"] = MISSING_DATA_PLACEHOLDER
        chairman_data["name"] = MISSING_DATA_PLACEHOLDER
    members_list.append(chairman_data)

    # –ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏
    members = Employee.objects.filter(organization=org, position__commission_role='member').select_related('position')[:2]
    members_found_count = 0
    for member in members:
        member_data = {"role": "–ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏"}
        if member.position:
             member_data["position"] = member.position.position_name
             member_data["name"] = get_initials_from_name(member.full_name_nominative)
             any_found = True
             members_found_count += 1
        else:
             member_data["position"] = MISSING_DATA_PLACEHOLDER
             member_data["name"] = MISSING_DATA_PLACEHOLDER
        members_list.append(member_data)

    # –î–æ–±–∏–≤–∞–µ–º –¥–æ 3 –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ–Ω—å—à–µ 2 —á–ª–µ–Ω–æ–≤
    while members_found_count < 2:
        members_list.append({"role": "–ß–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏", "position": MISSING_DATA_PLACEHOLDER, "name": MISSING_DATA_PLACEHOLDER})
        members_found_count += 1 # –°—á–∏—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä

    success = any_found # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ
    if not success: logger.warning(f"–ù–∏ –æ–¥–∏–Ω —á–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org}")
    return members_list, success


def get_safety_instructions(employee: Employee) -> Tuple[List[str], bool]:
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –û–¢ –∏–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ """
    if employee.position and employee.position.safety_instructions_numbers:
        instructions = employee.position.safety_instructions_numbers.strip()
        if instructions:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            instructions_list = [instr.strip() for instr in re.split(r'[;,]', instructions) if instr.strip()]
            if instructions_list:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –û–¢ –¥–ª—è {employee}: {instructions_list}")
                return instructions_list, True
    logger.warning(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –û–¢ –¥–ª—è {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ.")
    return [MISSING_DATA_PLACEHOLDER], False


def get_employee_documents(employee: Employee) -> Tuple[List[str], bool]:
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –∏–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ """
    if employee.position:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º prefetch_related –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        documents = employee.position.documents.all().order_by('name')
        if documents.exists():
            documents_list = [doc.name for doc in documents]
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –¥–ª—è {employee}: {documents_list}")
            return documents_list, True
    logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –¥–ª—è {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    return [MISSING_DATA_PLACEHOLDER], False

""",
     r"directory\views\siz_issued.py": r"""
# D:\YandexDisk\OT_online\directory\views\siz_issued.py
# üìÅ directory/views/siz_issued.py
import re
import random
import logging
from django.views.generic import CreateView, DetailView, FormView, UpdateView, View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect # –î–æ–±–∞–≤–∏–ª–∏ HttpResponseRedirect
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.template.loader import get_template
from io import BytesIO
from xhtml2pdf import pisa

from directory.models import Employee, SIZIssued
from directory.forms.siz_issued import SIZIssueForm, SIZIssueMassForm, SIZIssueReturnForm
from directory.utils.pdf import render_to_pdf
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
from directory.utils.excel_export import generate_card_excel

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ determine_gender_from_patronymic –∏ get_random_siz_sizes –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def determine_gender_from_patronymic(full_name):
    name_parts = full_name.split()
    if len(name_parts) >= 3: patronymic = name_parts[2]
    else: return "–ú—É–∂—Å–∫–æ–π"
    if re.search(r'(–∏—á|—ã—á)$', patronymic, re.IGNORECASE): return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–Ω–∞|–≤–Ω–∞|—á–Ω–∞)$', patronymic, re.IGNORECASE): return "–ñ–µ–Ω—Å–∫–∏–π"
    elif re.search(r'(–æ–≥–ª—ã|—É–ª—ã|–ª—ã)$', patronymic, re.IGNORECASE): return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–∫—ã–∑—ã|–∑—ã)$', patronymic, re.IGNORECASE): return "–ñ–µ–Ω—Å–∫–∏–π"
    return "–ú—É–∂—Å–∫–æ–π"

def get_random_siz_sizes(gender):
    if gender == "–ú—É–∂—Å–∫–æ–π":
        headgear = random.randint(55, 59); gloves = random.randint(15, 19) / 2; respirator = random.choice(["1", "2", "3"])
    else:
        headgear = random.randint(53, 57); gloves = random.randint(13, 17) / 2; respirator = random.choice(["1", "2", "3"])
    gas_mask = respirator
    return {'headgear': headgear, 'gloves': gloves, 'respirator': respirator, 'gas_mask': gas_mask}

# --- SIZIssueFormView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZIssueFormView(LoginRequiredMixin, CreateView):
    model = SIZIssued; form_class = SIZIssueForm; template_name = 'directory/siz_issued/issue_form.html'
    def get_success_url(self): return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})
    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs(); kwargs['user'] = self.request.user
        employee_id = self.kwargs.get('employee_id');
        if employee_id: kwargs['employee_id'] = employee_id
        return kwargs
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = '–í—ã–¥–∞—á–∞ –°–ò–ó'
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            employee = get_object_or_404(Employee, id=employee_id); context['employee'] = employee
            if employee.position:
                from directory.models.siz import SIZNorm; norms = SIZNorm.objects.filter(position=employee.position).select_related('siz')
                context['base_norms'] = norms.filter(condition='')
                condition_groups = {};
                for norm in norms.exclude(condition=''):
                    if norm.condition not in condition_groups: condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)
                context['condition_groups'] = [{'name': c, 'norms': n} for c, n in condition_groups.items()]
        return context
    def form_valid(self, form):
        response = super().form_valid(form)
        messages.success(self.request, f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {self.object.employee.full_name_nominative}")
        return response

# --- issue_selected_siz –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@login_required
def issue_selected_siz(request, employee_id):
    if request.method == 'POST':
        employee = get_object_or_404(Employee, id=employee_id)
        selected_norm_ids = request.POST.getlist('selected_norms')
        if not selected_norm_ids: messages.warning(request, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –°–ò–ó –¥–ª—è –≤—ã–¥–∞—á–∏"); return redirect('directory:siz:siz_personal_card', employee_id=employee_id)
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')
        issued_count = 0
        for norm in norms:
            existing_issued = SIZIssued.objects.filter(employee=employee, siz=norm.siz, is_returned=False).exists()
            if not existing_issued:
                SIZIssued.objects.create(employee=employee, siz=norm.siz, quantity=norm.quantity, issue_date=timezone.now().date(), condition=norm.condition, received_signature=True); issued_count += 1
        if issued_count > 0: messages.success(request, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {issued_count} –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.full_name_nominative}")
        else: messages.info(request, "‚ÑπÔ∏è –ù–∏ –æ–¥–Ω–æ –°–ò–ó –Ω–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ò–ó —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
    return redirect('directory:siz:siz_personal_card', employee_id=employee_id)

# --- SIZPersonalCardView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    model = Employee; template_name = 'directory/siz_issued/personal_card.html'; context_object_name = 'employee'
    def get_object(self): return get_object_or_404(Employee, id=self.kwargs.get('employee_id'))
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {self.object.full_name_nominative}'
        issued_items = SIZIssued.objects.filter(employee=self.object).select_related('siz').order_by('-issue_date'); context['issued_items'] = issued_items
        if self.object.position:
            from directory.models.siz import SIZNorm; norms = SIZNorm.objects.filter(position=self.object.position).select_related('siz')
            context['base_norms'] = norms.filter(condition=''); conditions = list(set(norm.condition for norm in norms if norm.condition)); condition_groups = []
            for condition in conditions:
                condition_norms = [norm for norm in norms if norm.condition == condition]
                if condition_norms: condition_groups.append({'name': condition, 'norms': condition_norms})
            context['condition_groups'] = condition_groups
        gender = determine_gender_from_patronymic(self.object.full_name_nominative); context['gender'] = gender
        context['siz_sizes'] = get_random_siz_sizes(gender)
        return context

# --- SIZIssueReturnView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    model = SIZIssued; form_class = SIZIssueReturnForm; template_name = 'directory/siz_issued/return_form.html'; pk_url_kwarg = 'siz_issued_id'
    def get_success_url(self): return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = '–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó'; context['employee'] = self.object.employee
        context['siz_name'] = self.object.siz.name; context['issue_date'] = self.object.issue_date
        return context
    def form_valid(self, form):
        response = super().form_valid(form); messages.success(self.request, f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
        return response

# --- employee_siz_issued_list –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    employee = get_object_or_404(Employee, pk=employee_id)
    issued_items = SIZIssued.objects.filter(employee=employee).select_related('siz').order_by('-issue_date')
    result = {'employee_id': employee.id, 'employee_name': employee.full_name_nominative, 'position': employee.position.position_name if employee.position else "", 'organization': employee.organization.short_name_ru, 'issued_items': []}
    for item in issued_items:
        item_data = {'id': item.id, 'siz_name': item.siz.name, 'siz_classification': item.siz.classification, 'issue_date': item.issue_date.strftime('%d.%m.%Y'), 'quantity': item.quantity, 'wear_percentage': item.wear_percentage, 'is_returned': item.is_returned, 'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None, 'notes': item.notes, 'condition': item.condition}
        result['issued_items'].append(item_data)
    return JsonResponse(result)

# --- export_personal_card_pdf –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def export_personal_card_pdf(request, employee_id):
    employee = get_object_or_404(Employee, pk=employee_id)
    issued_items = SIZIssued.objects.filter(employee=employee).select_related('siz').order_by('-issue_date')
    selected_norm_ids = request.GET.getlist('selected_norms')
    if not selected_norm_ids and employee.position:
        from directory.models.siz import SIZNorm
        all_norms = SIZNorm.objects.filter(position=employee.position).values_list('id', flat=True)
        selected_norm_ids = list(map(str, all_norms))
    selected_items = []
    if selected_norm_ids:
        from directory.models.siz import SIZNorm
        selected_norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')
        for norm in selected_norms: selected_items.append({'siz': norm.siz, 'classification': norm.siz.classification, 'quantity': norm.quantity})
    base_norms = []; condition_groups = []
    if employee.position:
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(position=employee.position).select_related('siz')
        base_norms = list(norms.filter(condition=''))
        conditions = list(set(norm.condition for norm in norms if norm.condition))
        for condition in conditions:
            condition_norms = [norm for norm in norms if norm.condition == condition]
            if condition_norms: condition_groups.append({'name': condition, 'norms': condition_norms})
    context = {'employee': employee, 'issued_items': issued_items, 'base_norms': base_norms, 'condition_groups': condition_groups, 'today': timezone.now().date(), 'gender': determine_gender_from_patronymic(employee.full_name_nominative), 'siz_sizes': get_random_siz_sizes(determine_gender_from_patronymic(employee.full_name_nominative)), 'selected_items': selected_items}
    filename = f"personal_card_{employee.full_name_nominative.replace(' ', '_')}.pdf"
    template_path = 'directory/siz_issued/personal_card_pdf_landscape.html'
    try:
        pdf_options = {'page-size': 'A4', 'margin-top': '0.5cm', 'margin-right': '0.5cm', 'margin-bottom': '0.5cm', 'margin-left': '0.5cm', 'encoding': "UTF-8"}
        return render_to_pdf(template_path=template_path, context=context, filename=filename, as_attachment=True, pdf_options=pdf_options)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}"); messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return redirect('directory:siz:siz_personal_card', employee_id=employee_id)

# --- –ù–û–í–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –∏–∑ URL ---
@login_required
def export_personal_card_excel_view(request, employee_id):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –ø–æ URL.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generate_card_excel.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id} —á–µ—Ä–µ–∑ URL")
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—è –≤ –ë–î
    response = generate_card_excel(request, employee_id, save_to_db=False, user=request.user) # –î–æ–±–∞–≤–∏–ª–∏ user

    # generate_card_excel –≤–µ—Ä–Ω–µ—Ç –ª–∏–±–æ FileResponse, –ª–∏–±–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    return response
""",
    r"templates\base.html": r"""
{# D:\YandexDisk\OT_online\templates\base.html #}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}OT Online{% endblock %}</title>

    <!-- Bootstrap CSS —á–µ—Ä–µ–∑ CDN üì° -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
          crossorigin="anonymous">
    {# Font Awesome –¥–ª—è –∏–∫–æ–Ω–æ–∫ #}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
          integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    {% load static %}
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üé® -->
    <link href="{% static 'directory/css/style.css' %}" rel="stylesheet">
    <!-- Select2 CSS —á–µ—Ä–µ–∑ CDN –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è üîç -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å üöÄ -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top shadow-sm"> {# –î–æ–±–∞–≤–ª–µ–Ω—ã sticky-top –∏ shadow-sm #}
        <div class="container">
            <a class="navbar-brand fw-bold" href="{% url 'directory:home' %}">üè¢ OT Online</a> {# –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é #}
            <button class="navbar-toggler" type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#navbarNav"
                    aria-controls="navbarNav"
                    aria-expanded="false"
                    aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0"> {# –î–æ–±–∞–≤–ª–µ–Ω—ã mb-2 mb-lg-0 #}
                    {% if user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link {% if request.resolver_match.view_name == 'home' %}active{% endif %}"
                           aria-current="page" href="{% url 'directory:home' %}">
                           <i class="fas fa-home"></i> –ì–ª–∞–≤–Ω–∞—è
                        </a>
                    </li>
                    {# –£–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏/–î–æ–ª–∂–Ω–æ—Å—Ç–∏, —Ç.–∫. –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å –≥–ª–∞–≤–Ω–æ–π #}
                    {# <li class="nav-item">
                        <a class="nav-link {% if 'employees' in request.path %}active{% endif %}"
                           href="{% url 'directory:employees:employee_list' %}">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {% if 'positions' in request.path %}active{% endif %}"
                           href="{% url 'directory:positions:position_list' %}">üëî –î–æ–ª–∂–Ω–æ—Å—Ç–∏</a>
                    </li> #}
                    <li class="nav-item">
                        <a class="nav-link {% if 'siz' in request.path %}active{% endif %}"
                           href="{% url 'directory:siz:siz_list' %}">
                           <i class="fas fa-hard-hat"></i> –°–ò–ó
                        </a>
                    </li>
                     <li class="nav-item">
                        <a class="nav-link {% if 'documents' in request.path and 'preview' not in request.path %}active{% endif %}"
                           href="{% url 'directory:documents:document_list' %}">
                           <i class="fas fa-file-alt"></i> –î–æ–∫—É–º–µ–Ω—Ç—ã
                        </a>
                    </li>
                    {% endif %}
                </ul>
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        {% if user.is_staff %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'admin:index' %}">
                                <i class="fas fa-cogs"></i> –ê–¥–º–∏–Ω
                            </a>
                        </li>
                        {% endif %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#"
                               id="userDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                               <i class="fas fa-user"></i> {{ user.get_full_name|default:user.username }}
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                {# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç #}
                                {# <li><a class="dropdown-item" href="#">–ü—Ä–æ—Ñ–∏–ª—å</a></li>
                                <li><hr class="dropdown-divider"></li> #}
                                <li>
                                    <a class="dropdown-item text-danger" href="{% url 'directory:auth:logout' %}">
                                        <i class="fas fa-sign-out-alt"></i> –í—ã–π—Ç–∏
                                    </a>
                                </li>
                            </ul>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link {% if 'login' in request.path %}active{% endif %}" href="{% url 'directory:auth:login' %}">
                                <i class="fas fa-sign-in-alt"></i> –í–æ–π—Ç–∏
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if 'register' in request.path %}active{% endif %}" href="{% url 'directory:auth:register' %}">
                                <i class="fas fa-user-plus"></i> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                            </a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã üíª -->
    <main class="container mt-4 mb-5"> {# –î–æ–±–∞–≤–ª–µ–Ω mb-5 #}
        {% if messages %}
            <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050"> {# –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π #}
            {% for message in messages %}
                <div class="toast align-items-center text-white bg-{{ message.tags|default:'info' }} border-0 show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                  <div class="d-flex">
                    <div class="toast-body">
                      {% if message.tags == 'success' %} <i class="fas fa-check-circle me-2"></i>
                      {% elif message.tags == 'error' %} <i class="fas fa-exclamation-triangle me-2"></i>
                      {% elif message.tags == 'warning' %} <i class="fas fa-exclamation-circle me-2"></i>
                      {% else %} <i class="fas fa-info-circle me-2"></i> {% endif %}
                      {{ message }}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                </div>
            {% endfor %}
            </div>
        {% endif %}

        {% block content %}{% endblock %}
    </main>

    {# –§—É—Ç–µ—Ä –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ #}
    {# <footer class="footer mt-auto py-3 bg-light border-top">
        <div class="container text-center">
            <span class="text-muted">OT Online &copy; {% now "Y" %}</span>
        </div>
    </footer> #}

    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º JavaScript —á–µ—Ä–µ–∑ CDN üì° -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç -->
    <script src="{% static 'directory/js/main.js' %}"></script>
    <script>
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Bootstrap
      var toastElList = [].slice.call(document.querySelectorAll('.toast'))
      var toastList = toastElList.map(function (toastEl) {
        return new bootstrap.Toast(toastEl)
      })
    </script>

    {% block extra_js %}{% endblock %}
</body>
</html>

""",
    r"templates\directory\documents\document_selection.html": r"""
{# D:\YandexDisk\OT_online\templates\directory\documents\document_selection.html #}
{% extends 'base.html' %}
{% load static %}
{% load crispy_forms_tags %}

{% block title %}{{ title }}{% endblock %}

{% block extra_css %}
<style>
    .form-check-label {
        cursor: pointer;
    }
    .form-check {
        margin-bottom: 0.75rem; /* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —á–µ–∫–±–æ–∫—Å–∞–º–∏ */
    }
     .card-body {
        padding: 2rem; /* –£–≤–µ–ª–∏—á–∏–º –æ—Ç—Å—Ç—É–ø—ã */
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7"> {# –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º —à–∏—Ä–∏–Ω—É #}
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-list-ul me-2"></i>{{ title }}</h4>
                </div>
                <div class="card-body">
                    {% if employee %}
                    <div class="alert alert-light border rounded p-3 mb-4">
                        <h5 class="alert-heading"><i class="fas fa-user me-2"></i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</h5>
                        <hr>
                        <p class="mb-1"><strong>–§–ò–û:</strong> {{ employee.full_name_nominative }}</p>
                        <p class="mb-1"><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> {{ employee.position.position_name|default:"-" }}</p>
                        {% if employee.department %}
                        <p class="mb-1"><strong>–û—Ç–¥–µ–ª:</strong> {{ employee.department.name }}</p>
                        {% endif %}
                        {% if employee.subdivision %}
                        <p class="mb-1"><strong>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</strong> {{ employee.subdivision.name }}</p>
                        {% endif %}
                        <p class="mb-0"><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {{ employee.organization.short_name_ru|default:"-" }}</p>
                    </div>
                    {% else %}
                     <div class="alert alert-warning">–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</div>
                    {% endif %}

                    {% if employee %} {# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ #}
                    <form method="post" action="" id="document-selection-form">
                        {% csrf_token %}
                        {% crispy form %}
                    </form>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ò–õ–ò –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó
        const form = document.getElementById('document-selection-form');
        if (form) {
            form.addEventListener('submit', function(e) {
                const docTypeCheckboxes = document.querySelectorAll('input[name="document_types"]:checked');
                const ppeCardCheckbox = document.getElementById('id_generate_ppe_card'); // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –°–ò–ó
                const isPpeCardChecked = ppeCardCheckbox ? ppeCardCheckbox.checked : false;

                if (docTypeCheckboxes.length === 0 && !isPpeCardChecked) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—Å–ª–æ–≤–∏—è
                    e.preventDefault();
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Bootstrap Alert –∏–ª–∏ Toast –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó.');
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    // showBootstrapAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó.', 'warning');
                }
            });
        }
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Bootstrap Alert (–ø—Ä–∏–º–µ—Ä)
        // function showBootstrapAlert(message, type = 'danger') {
        //     const alertPlaceholder = document.getElementById('alertPlaceholder'); // –ù—É–∂–µ–Ω div —Å id="alertPlaceholder" –≤ —à–∞–±–ª–æ–Ω–µ
        //     if (alertPlaceholder) {
        //         const wrapper = document.createElement('div');
        //         wrapper.innerHTML = [
        //             `<div class="alert alert-${type} alert-dismissible" role="alert">`,
        //             `   <div>${message}</div>`,
        //             '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
        //             '</div>'
        //         ].join('');
        //         alertPlaceholder.append(wrapper);
        //     }
        // }
    });
</script>
{% endblock %}

{% endblock %}

""",
    r"templates\directory\documents\documents_preview.html": r"""
{# D:\YandexDisk\OT_online\templates\directory\documents\documents_preview.html #}
{% extends 'base.html' %}
{% load static %}
{% load i18n %}
{% load document_filters %} {# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à —Ñ–∏–ª—å—Ç—Ä #}

{% block title %}{{ title }}{% endblock %}

{% block extra_css %}
<style>
    .document-preview-section {
        margin-bottom: 2rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .document-preview-header {
        background-color: #f8f9fa;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e0e0e0;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .document-preview-header h5 {
        margin-bottom: 0;
        font-weight: 600;
        color: #495057;
    }

    .document-preview-body {
        padding: 1.5rem;
    }

    .editable-field-group {
        margin-bottom: 1rem;
    }

    .editable-field-group label {
        font-weight: 500;
        color: #495057;
        display: block;
        margin-bottom: 0.3rem;
    }

    .editable-field {
        display: block; /* –î–µ–ª–∞–µ–º –∏–Ω–ø—É—Ç—ã –±–ª–æ—á–Ω—ã–º–∏ */
        width: 100%; /* –ù–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #212529;
        background-color: #f8f9fa; /* –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π */
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
    .editable-field:focus {
        color: #212529;
        background-color: #fff;
        border-color: #86b7fe;
        outline: 0;
        box-shadow: 0 0 0 0.25rem rgba(13,110,253,.25);
    }
    .editable-field[readonly] {
        background-color: #e9ecef; /* –§–æ–Ω –¥–ª—è –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö */
        opacity: 1;
    }

    .missing-data-warning {
        background-color: #fff3cd;
        border-color: #ffecb5;
        color: #664d03;
        padding: 1rem;
        border-radius: 0.25rem;
    }
    .missing-data-warning ul {
        margin-bottom: 0;
        padding-left: 1.2rem;
    }

    .action-buttons {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó */
    .ppe-card-section {
        background-color: #e9f5ff; /* –ì–æ–ª—É–±–æ–π —Ñ–æ–Ω */
        border-color: #b8daff;
    }
    .ppe-card-header {
        background-color: #cce5ff;
        color: #004085;
    }
    .missing-data-list {
        font-size: 0.9em;
        color: #dc3545; /* –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π */
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{% url 'directory:home' %}">–ì–ª–∞–≤–Ω–∞—è</a></li>
                    <li class="breadcrumb-item">
                        {% if employee %}
                            <a href="{% url 'directory:documents:document_selection' employee_id=employee.id %}">–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</a>
                        {% else %}
                            <span>–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</span>
                        {% endif %}
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">{{ title }}</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
             {% if error_message %}
                <div class="alert alert-danger">{{ error_message }}</div>
             {% else %}
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h4 class="mb-0"><i class="fas fa-user me-2"></i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {{ employee.full_name_nominative }}</h4>
                    </div>
                    <div class="card-body">
                        <p class="mb-1"><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> {{ employee.position.position_name|default:"-" }}</p>
                        <p class="mb-0"><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {{ employee.organization.short_name_ru|default:"-" }}</p>
                    </div>
                </div>

                {# –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö #}
                <form method="post" action="" id="documents-generation-form">
                    {% csrf_token %}

                    {# –ë–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ #}
                    {% if has_docx_documents %}
                        <h3 class="mb-3">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ DOCX:</h3>
                        {% if docx_has_missing_data %}
                            <div class="alert alert-warning missing-data-warning mb-3">
                                <h5><i class="fas fa-exclamation-triangle me-2"></i>–í–Ω–∏–º–∞–Ω–∏–µ! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è DOCX:</h5>
                                <ul>
                                    {% for field_desc in docx_missing_data_fields %}
                                        <li>{{ field_desc }}</li>
                                    {% endfor %}
                                </ul>
                                <small>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ "{{ MISSING_DATA_PLACEHOLDER }}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.</small>
                            </div>
                        {% endif %}

                        <div class="accordion" id="docxAccordion">
                        {% for doc_data in preview_data %}
                            <div class="accordion-item document-preview-section">
                                <h2 class="accordion-header" id="headingDocx{{ forloop.counter }}">
                                    <button class="accordion-button {% if doc_data.document_data.has_missing_data %}bg-warning{% endif %} {% if not forloop.first %}collapsed{% endif %}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDocx{{ forloop.counter }}" aria-expanded="{% if forloop.first %}true{% else %}false{% endif %}" aria-controls="collapseDocx{{ forloop.counter }}">
                                        <i class="fas fa-file-word me-2"></i>
                                        {{ document_types_dict|get_item:doc_data.document_type|default:doc_data.document_type }}
                                        {% if doc_data.document_data.has_missing_data %}<span class="badge bg-danger ms-2">–¢—Ä–µ–±—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</span>{% endif %}
                                    </button>
                                </h2>
                                <div id="collapseDocx{{ forloop.counter }}" class="accordion-collapse collapse {% if forloop.first %}show{% endif %}" aria-labelledby="headingDocx{{ forloop.counter }}" data-bs-parent="#docxAccordion">
                                    <div class="accordion-body document-preview-body">
                                        {% if doc_data.document_data.has_missing_data %}
                                            <p class="text-danger mb-3"><strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ "{{ MISSING_DATA_PLACEHOLDER }}".</strong></p>
                                        {% endif %}
                                        <div class="row">
                                        {% for key, value in doc_data.document_data.items %}
                                            {% if key != 'missing_data_list' and key != 'has_missing_data' and key != 'employee_id' %}
                                                <div class="col-md-6 editable-field-group">
                                                    <label for="id_document_data_{{ doc_data.document_type }}_{{ key }}">{{ key|title }}:</label>
                                                    <input type="text"
                                                           id="id_document_data_{{ doc_data.document_type }}_{{ key }}"
                                                           class="form-control editable-field {% if value == MISSING_DATA_PLACEHOLDER %}is-invalid{% endif %}"
                                                           name="document_data_{{ doc_data.document_type }}_{{ key }}"
                                                           value="{{ value }}"
                                                           data-doc-type="{{ doc_data.document_type }}"
                                                           data-field-name="{{ key }}"
                                                           placeholder="–í–≤–µ–¥–∏—Ç–µ {{ key|lower }}">
                                                     {% if value == MISSING_DATA_PLACEHOLDER %}
                                                        <div class="invalid-feedback">–≠—Ç–æ –ø–æ–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.</div>
                                                    {% endif %}
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                        </div>
                        {# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX #}
                        <div class="mt-3 mb-4 text-end">
                             <button type="submit" name="action" value="generate_docx" class="btn btn-success" {% if docx_has_missing_data %}disabled title="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"{% endif %}>
                                <i class="fas fa-file-word me-2"></i>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ DOCX
                            </button>
                        </div>
                         <hr class="my-4">
                    {% endif %}

                    {# –ë–ª–æ–∫ –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó #}
                    {% if generate_ppe_card %}
                        <div class="document-preview-section ppe-card-section">
                            <div class="document-preview-header ppe-card-header">
                                <h5><i class="fas fa-id-card me-2"></i>–ö–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó (Excel)</h5>
                            </div>
                            <div class="document-preview-body">
                                <p>–ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.</p>
                                {% if ppe_card_has_missing_data %}
                                    <div class="alert alert-warning missing-data-warning">
                                        <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –î–ª—è –ø–æ–ª–Ω–æ–π –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ:
                                        <ul class="missing-data-list">
                                        {% for field_name in ppe_card_missing_data_fields %}
                                            <li>{{ field_name }}</li>
                                        {% endfor %}
                                        </ul>
                                        <small>–ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.</small>
                                    </div>
                                {% else %}
                                     <p class="text-success"><i class="fas fa-check-circle me-1"></i>–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –Ω–∞–π–¥–µ–Ω—ã.</p>
                                {% endif %}
                                {# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel #}
                                <div class="mt-3 text-end">
                                     <button type="submit" name="action" value="generate_ppe_card" class="btn btn-info">
                                        <i class="fas fa-file-excel me-2"></i>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–∞—Ä—Ç–æ—á–∫—É –°–ò–ó (Excel)
                                    </button>
                                </div>
                            </div>
                        </div>
                    {% endif %}

                    {# –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π #}
                    <div class="action-buttons d-flex justify-content-between">
                         <a href="{% url 'directory:documents:document_selection' employee_id=employee_id %}" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É
                        </a>
                        {# –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–ª—è DOCX –∏ Excel #}
                    </div>
                </form>
            {% endif %} {# end if not error_message #}
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π DOCX
    const documentFields = document.querySelectorAll('.editable-field');
    documentFields.forEach(field => {
        field.addEventListener('input', function() { // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'input' –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
            const docType = this.getAttribute('data-doc-type');
            const fieldName = this.getAttribute('data-field-name');
            const fieldValue = this.value.trim(); // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

            // –°–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å is-invalid, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–≤–æ–¥–∏—Ç—å
            if (fieldValue !== '') {
                this.classList.remove('is-invalid');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π)
            /* // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º
            fetch('{% url "directory:documents:update_preview_data" %}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRFToken': document.querySelector('input[name="csrfmiddlewaretoken"]').value
                },
                body: `doc_type=${docType}&field_name=${fieldName}&field_value=${fieldValue}`
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏:', data.error);
                } else {
                     console.log(`–ü–æ–ª–µ ${fieldName} –¥–ª—è ${docType} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏.`);
                     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ has_missing_data –¥–ª—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ AJAX –∑–∞–ø—Ä–æ—Å–∞:', error);
            });
            */
        });
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX
    const generateDocxButton = document.querySelector('button[name="action"][value="generate_docx"]');
    const form = document.getElementById('documents-generation-form');

    if (generateDocxButton && form) {
        form.addEventListener('submit', function(event) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX
            if (document.activeElement === generateDocxButton) {
                let hasInvalidFields = false;
                const docxFields = form.querySelectorAll('.editable-field');
                docxFields.forEach(field => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –≤–∏–¥–∏–º—ã—Ö (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö) –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤
                    const accordionItem = field.closest('.accordion-collapse');
                    if (accordionItem && accordionItem.classList.contains('show')) {
                         // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –ò –æ–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ (–∏–º–µ–µ—Ç is-invalid)
                        if (field.value.trim() === '' && field.classList.contains('is-invalid')) {
                            hasInvalidFields = true;
                             // –ú–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –≤–∫–ª–∞–¥–∫—É –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
                             const headerButton = document.querySelector(`button[data-bs-target="#${accordionItem.id}"]`);
                             if(headerButton) headerButton.classList.add('border', 'border-danger');
                        } else {
                             // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤–∫–ª–∞–¥–∫–∏
                             const headerButton = document.querySelector(`button[data-bs-target="#${accordionItem.id}"]`);
                             if(headerButton) headerButton.classList.remove('border', 'border-danger');
                        }
                    }
                });

                if (hasInvalidFields) {
                    event.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è DOCX, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–º.');
                    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –ø–æ–ª–µ
                    const firstInvalid = form.querySelector('.editable-field.is-invalid');
                    if(firstInvalid) firstInvalid.focus();
                }
            }
        });
    }


});
</script>
{% endblock %}
```

```python
# D:\YandexDisk\OT_online\directory\views\siz_issued.py
# üìÅ directory/views/siz_issued.py
import re
import random
import logging
from django.views.generic import CreateView, DetailView, FormView, UpdateView, View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect, FileResponse # –î–æ–±–∞–≤–∏–ª–∏ FileResponse
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.template.loader import get_template
from io import BytesIO
from xhtml2pdf import pisa

from directory.models import Employee, SIZIssued, GeneratedDocument # –î–æ–±–∞–≤–∏–ª–∏ GeneratedDocument
from directory.forms.siz_issued import SIZIssueForm, SIZIssueMassForm, SIZIssueReturnForm
from directory.utils.pdf import render_to_pdf
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
from directory.utils.excel_export import generate_card_excel

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ determine_gender_from_patronymic –∏ get_random_siz_sizes –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def determine_gender_from_patronymic(full_name):
    name_parts = full_name.split()
    if len(name_parts) >= 3: patronymic = name_parts[2]
    else: return "–ú—É–∂—Å–∫–æ–π"
    if re.search(r'(–∏—á|—ã—á)$', patronymic, re.IGNORECASE): return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–Ω–∞|–≤–Ω–∞|—á–Ω–∞)$', patronymic, re.IGNORECASE): return "–ñ–µ–Ω—Å–∫–∏–π"
    elif re.search(r'(–æ–≥–ª—ã|—É–ª—ã|–ª—ã)$', patronymic, re.IGNORECASE): return "–ú—É–∂—Å–∫–æ–π"
    elif re.search(r'(–∫—ã–∑—ã|–∑—ã)$', patronymic, re.IGNORECASE): return "–ñ–µ–Ω—Å–∫–∏–π"
    return "–ú—É–∂—Å–∫–æ–π"

def get_random_siz_sizes(gender):
    if gender == "–ú—É–∂—Å–∫–æ–π": headgear = random.randint(55, 59); gloves = random.randint(15, 19) / 2; respirator = random.choice(["1", "2", "3"])
    else: headgear = random.randint(53, 57); gloves = random.randint(13, 17) / 2; respirator = random.choice(["1", "2", "3"])
    gas_mask = respirator
    return {'headgear': headgear, 'gloves': gloves, 'respirator': respirator, 'gas_mask': gas_mask}

# --- SIZIssueFormView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZIssueFormView(LoginRequiredMixin, CreateView):
    model = SIZIssued; form_class = SIZIssueForm; template_name = 'directory/siz_issued/issue_form.html'
    def get_success_url(self): return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})
    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs(); kwargs['user'] = self.request.user
        employee_id = self.kwargs.get('employee_id');
        if employee_id: kwargs['employee_id'] = employee_id
        return kwargs
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = '–í—ã–¥–∞—á–∞ –°–ò–ó'
        employee_id = self.kwargs.get('employee_id')
        if employee_id:
            employee = get_object_or_404(Employee, id=employee_id); context['employee'] = employee
            if employee.position:
                from directory.models.siz import SIZNorm; norms = SIZNorm.objects.filter(position=employee.position).select_related('siz')
                context['base_norms'] = norms.filter(condition='')
                condition_groups = {};
                for norm in norms.exclude(condition=''):
                    if norm.condition not in condition_groups: condition_groups[norm.condition] = []
                    condition_groups[norm.condition].append(norm)
                context['condition_groups'] = [{'name': c, 'norms': n} for c, n in condition_groups.items()]
        return context
    def form_valid(self, form):
        response = super().form_valid(form)
        messages.success(self.request, f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {self.object.employee.full_name_nominative}")
        return response

# --- issue_selected_siz –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@login_required
def issue_selected_siz(request, employee_id):
    if request.method == 'POST':
        employee = get_object_or_404(Employee, id=employee_id)
        selected_norm_ids = request.POST.getlist('selected_norms')
        if not selected_norm_ids: messages.warning(request, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –°–ò–ó –¥–ª—è –≤—ã–¥–∞—á–∏"); return redirect('directory:siz:siz_personal_card', employee_id=employee_id)
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')
        issued_count = 0
        for norm in norms:
            existing_issued = SIZIssued.objects.filter(employee=employee, siz=norm.siz, is_returned=False).exists()
            if not existing_issued:
                SIZIssued.objects.create(employee=employee, siz=norm.siz, quantity=norm.quantity, issue_date=timezone.now().date(), condition=norm.condition, received_signature=True); issued_count += 1
        if issued_count > 0: messages.success(request, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {issued_count} –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –°–ò–ó —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee.full_name_nominative}")
        else: messages.info(request, "‚ÑπÔ∏è –ù–∏ –æ–¥–Ω–æ –°–ò–ó –Ω–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ò–ó —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
    return redirect('directory:siz:siz_personal_card', employee_id=employee_id)

# --- SIZPersonalCardView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZPersonalCardView(LoginRequiredMixin, DetailView):
    model = Employee; template_name = 'directory/siz_issued/personal_card.html'; context_object_name = 'employee'
    def get_object(self): return get_object_or_404(Employee, id=self.kwargs.get('employee_id'))
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = f'–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–µ—Ç–∞ –°–ò–ó - {self.object.full_name_nominative}'
        issued_items = SIZIssued.objects.filter(employee=self.object).select_related('siz').order_by('-issue_date'); context['issued_items'] = issued_items
        if self.object.position:
            from directory.models.siz import SIZNorm; norms = SIZNorm.objects.filter(position=self.object.position).select_related('siz')
            context['base_norms'] = norms.filter(condition=''); conditions = list(set(norm.condition for norm in norms if norm.condition)); condition_groups = []
            for condition in conditions:
                condition_norms = [norm for norm in norms if norm.condition == condition]
                if condition_norms: condition_groups.append({'name': condition, 'norms': condition_norms})
            context['condition_groups'] = condition_groups
        gender = determine_gender_from_patronymic(self.object.full_name_nominative); context['gender'] = gender
        context['siz_sizes'] = get_random_siz_sizes(gender)
        return context

# --- SIZIssueReturnView –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class SIZIssueReturnView(LoginRequiredMixin, UpdateView):
    model = SIZIssued; form_class = SIZIssueReturnForm; template_name = 'directory/siz_issued/return_form.html'; pk_url_kwarg = 'siz_issued_id'
    def get_success_url(self): return reverse('directory:siz:siz_personal_card', kwargs={'employee_id': self.object.employee.id})
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs); context['title'] = '–í–æ–∑–≤—Ä–∞—Ç –°–ò–ó'; context['employee'] = self.object.employee
        context['siz_name'] = self.object.siz.name; context['issue_date'] = self.object.issue_date
        return context
    def form_valid(self, form):
        response = super().form_valid(form); messages.success(self.request, f"‚úÖ –°–ò–ó '{self.object.siz.name}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
        return response

# --- employee_siz_issued_list –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@login_required
@require_GET
def employee_siz_issued_list(request, employee_id):
    employee = get_object_or_404(Employee, pk=employee_id)
    issued_items = SIZIssued.objects.filter(employee=employee).select_related('siz').order_by('-issue_date')
    result = {'employee_id': employee.id, 'employee_name': employee.full_name_nominative, 'position': employee.position.position_name if employee.position else "", 'organization': employee.organization.short_name_ru, 'issued_items': []}
    for item in issued_items:
        item_data = {'id': item.id, 'siz_name': item.siz.name, 'siz_classification': item.siz.classification, 'issue_date': item.issue_date.strftime('%d.%m.%Y'), 'quantity': item.quantity, 'wear_percentage': item.wear_percentage, 'is_returned': item.is_returned, 'return_date': item.return_date.strftime('%d.%m.%Y') if item.return_date else None, 'notes': item.notes, 'condition': item.condition}
        result['issued_items'].append(item_data)
    return JsonResponse(result)

# --- export_personal_card_pdf –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def export_personal_card_pdf(request, employee_id):
    employee = get_object_or_404(Employee, pk=employee_id)
    issued_items = SIZIssued.objects.filter(employee=employee).select_related('siz').order_by('-issue_date')
    selected_norm_ids = request.GET.getlist('selected_norms')
    if not selected_norm_ids and employee.position:
        from directory.models.siz import SIZNorm
        all_norms = SIZNorm.objects.filter(position=employee.position).values_list('id', flat=True)
        selected_norm_ids = list(map(str, all_norms))
    selected_items = []
    if selected_norm_ids:
        from directory.models.siz import SIZNorm
        selected_norms = SIZNorm.objects.filter(id__in=selected_norm_ids).select_related('siz')
        for norm in selected_norms: selected_items.append({'siz': norm.siz, 'classification': norm.siz.classification, 'quantity': norm.quantity})
    base_norms = []; condition_groups = []
    if employee.position:
        from directory.models.siz import SIZNorm
        norms = SIZNorm.objects.filter(position=employee.position).select_related('siz')
        base_norms = list(norms.filter(condition=''))
        conditions = list(set(norm.condition for norm in norms if norm.condition))
        for condition in conditions:
            condition_norms = [norm for norm in norms if norm.condition == condition]
            if condition_norms: condition_groups.append({'name': condition, 'norms': condition_norms})
    context = {'employee': employee, 'issued_items': issued_items, 'base_norms': base_norms, 'condition_groups': condition_groups, 'today': timezone.now().date(), 'gender': determine_gender_from_patronymic(employee.full_name_nominative), 'siz_sizes': get_random_siz_sizes(determine_gender_from_patronymic(employee.full_name_nominative)), 'selected_items': selected_items}
    filename = f"personal_card_{employee.full_name_nominative.replace(' ', '_')}.pdf"
    template_path = 'directory/siz_issued/personal_card_pdf_landscape.html'
    try:
        pdf_options = {'page-size': 'A4', 'margin-top': '0.5cm', 'margin-right': '0.5cm', 'margin-bottom': '0.5cm', 'margin-left': '0.5cm', 'encoding': "UTF-8"}
        return render_to_pdf(template_path=template_path, context=context, filename=filename, as_attachment=True, pdf_options=pdf_options, landscape=True) # –î–æ–±–∞–≤–∏–ª–∏ landscape=True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}"); messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return redirect('directory:siz:siz_personal_card', employee_id=employee_id)

# --- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –∏–∑ URL ---
@login_required
def export_personal_card_excel_view(request, employee_id):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –°–ò–ó –ø–æ URL.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é generate_card_excel.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel-–∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id} —á–µ—Ä–µ–∑ URL")
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—è –≤ –ë–î
    response = generate_card_excel(request, employee_id, save_to_db=False, user=request.user)

    # generate_card_excel –≤–µ—Ä–Ω–µ—Ç –ª–∏–±–æ FileResponse, –ª–∏–±–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    return response
""",
}

# --- –õ–û–ì–ò–ö–ê –°–ö–†–ò–ü–¢–ê ---
def update_project_files():
    """
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
    """
    print("--- –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê ---")
    print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {PROJECT_ROOT}")

    if not os.path.isdir(PROJECT_ROOT):
        print(f"\n–û–®–ò–ë–ö–ê: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ROOT}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PROJECT_ROOT.")
        sys.exit(1)

    updated_count = 0
    error_count = 0

    for relative_path, new_content in UPDATED_FILES.items():
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°
        normalized_relative_path = os.path.normpath(relative_path)
        absolute_path = os.path.join(PROJECT_ROOT, normalized_relative_path)

        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {normalized_relative_path}")
        print(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {absolute_path}")

        try:
            # --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ---
            directory_path = os.path.dirname(absolute_path)
            if not os.path.exists(directory_path):
                print(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
                os.makedirs(directory_path, exist_ok=True)
            elif not os.path.isdir(directory_path):
                 print(f"–û–®–ò–ë–ö–ê: –ü—É—Ç—å –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory_path}' –∑–∞–Ω—è—Ç —Ñ–∞–π–ª–æ–º!")
                 error_count += 1
                 continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É

            # --- –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ ---
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ª–∏—à–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_to_write = new_content.strip()

            with open(absolute_path, 'w', encoding='utf-8') as f:
                f.write(content_to_write)
            print(f"–£–°–ü–ï–®–ù–û: –§–∞–π–ª '{normalized_relative_path}' –æ–±–Ω–æ–≤–ª–µ–Ω.")
            updated_count += 1

        except IOError as e:
            print(f"–û–®–ò–ë–ö–ê –í–í–û–î–ê/–í–´–í–û–î–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{normalized_relative_path}': {e}")
            error_count += 1
        except PermissionError as e:
            print(f"–û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{normalized_relative_path}': {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å.")
            error_count += 1
        except Exception as e:
            print(f"–ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{normalized_relative_path}': {e}")
            error_count += 1

    print("\n--- –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–û–í ---")
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(UPDATED_FILES)}")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"–û—à–∏–±–æ–∫: {error_count}")

    if error_count > 0:
        print("\n–í–ù–ò–ú–ê–ù–ò–ï: –í–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –≤—ã—à–µ.")
    else:
        print("\n–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

if __name__ == "__main__":
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirm = input(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{PROJECT_ROOT}'? (yes/no): ").lower()
    if confirm == 'yes':
        update_project_files()
    else:
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")