#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ minpaint/OT_online
"""

import os
import sys


def create_directory(directory_path):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(directory_path):
        os.makedirs(directory_path)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path}")


def create_file(file_path, content):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)
    print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path}")


# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ frontend_tree_view.js
frontend_tree_view_js = '''/**
 * üå≥ –Ø–¥—Ä–æ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
 */
class EmployeeTreeCore {
    constructor() {
        // üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        this.tree = document.getElementById('employeeTree');
        this.expandAllBtn = document.querySelector('.expand-all');
        this.collapseAllBtn = document.querySelector('.collapse-all');
        this.searchInput = document.getElementById('localSearchInput');
        this.selectAllCheckbox = document.getElementById('select-all');

        // üë• –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        this.actionsDropdown = document.getElementById('actionsDropdown');
        this.selectedCounter = document.getElementById('selectedCounter');
        this.counterValue = document.getElementById('counterValue');
        this.selectedCountBadge = document.getElementById('selectedCount');

        // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫)
        this.selectedEmployee = null;

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (window._treeInitialized) {
            console.warn('EmployeeTreeCore —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        window._treeInitialized = true;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    init() {
        if (!this.tree) return;
        this._bindEvents();
        this._restoreState();
        this._initCheckboxes();
        this._initEmployeeActions();

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        this._syncInitialState();
    }

    _syncInitialState() {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const checkedEmployee = this.tree.querySelector('.employee-checkbox:checked');
        if (checkedEmployee) {
            this.selectedEmployee = checkedEmployee.dataset.id;
        }

        // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        this._updateSelectedCounter();
    }

    _bindEvents() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç tree-toggle
        this.tree.addEventListener('click', (e) => {
            if (e.target.classList.contains('tree-toggle')) {
                this._handleToggleClick(e);
            }
        });

        if (this.expandAllBtn) {
            this.expandAllBtn.addEventListener('click', () => this.expandAll());
        }
        if (this.collapseAllBtn) {
            this.collapseAllBtn.addEventListener('click', () => this.collapseAll());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this._addKeyboardSupport();
    }

    _addKeyboardSupport() {
        const toggleElements = this.tree.querySelectorAll('.tree-toggle');
        toggleElements.forEach(toggle => {
            toggle.setAttribute('tabindex', '0');

            toggle.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this._handleToggleClick({ target: toggle });
                }
            });
        });
    }

    _handleToggleClick(event) {
        const toggleElement = event.target;
        if (!toggleElement.classList.contains('tree-toggle')) return;

        const nodeId = toggleElement.dataset.node;
        if (!nodeId) return;

        const isExpanded = toggleElement.textContent === '-';
        this.toggleNodeByToggleIcon(nodeId, !isExpanded);
    }

    toggleNodeByToggleIcon(nodeId, expand = true) {
        const toggleElement = this.tree.querySelector(`.tree-toggle[data-node="${nodeId}"]`);
        if (!toggleElement) return;

        toggleElement.textContent = expand ? '-' : '+';

        const children = this.tree.querySelectorAll(`tr[data-parent="${nodeId}"]`);
        children.forEach(child => {
            if (expand) {
                child.classList.remove('tree-hidden');
            } else {
                child.classList.add('tree-hidden');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–±–µ–Ω–∫–∞ —Å–≤–æ–∏ –¥–µ—Ç–∏
                const childNodeId = child.dataset.nodeId;
                if (childNodeId) {
                    this.toggleNodeByToggleIcon(childNodeId, false);
                }
            }
        });

        this._saveState();
    }

    expandAll() {
        const toggles = this.tree.querySelectorAll('.tree-toggle');
        toggles.forEach(toggle => {
            const nodeId = toggle.dataset.node;
            if (nodeId) {
                this.toggleNodeByToggleIcon(nodeId, true);
            }
        });
    }

    collapseAll() {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
        const orgNodes = this.tree.querySelectorAll('.tree-toggle[data-node^="org-"]');
        orgNodes.forEach(node => {
            const nodeId = node.dataset.node;
            this.toggleNodeByToggleIcon(nodeId, false);
        });
    }

    _saveState() {
        try {
            const state = {};
            const toggles = this.tree.querySelectorAll('.tree-toggle');
            toggles.forEach(toggle => {
                const nodeId = toggle.dataset.node;
                if (nodeId) {
                    state[nodeId] = toggle.textContent === '-' ? 'expanded' : 'collapsed';
                }
            });
            localStorage.setItem('employeeTreeState', JSON.stringify(state));
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ä–µ–≤–∞:', e);
        }
    }

    _restoreState() {
        try {
            const state = JSON.parse(localStorage.getItem('employeeTreeState'));
            if (state) {
                Object.entries(state).forEach(([nodeId, st]) => {
                    this.toggleNodeByToggleIcon(nodeId, st === 'expanded');
                });
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ä–µ–≤–∞:', err);
        }
    }

    _initCheckboxes() {
        // –î–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å "–≤—ã–±—Ä–∞—Ç—å –≤—Å—ë" - –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä
        if (this.selectAllCheckbox) {
            this.selectAllCheckbox.style.display = 'none';
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.tree.addEventListener('change', this._handleCheckboxChange.bind(this));
    }

    _handleCheckboxChange(event) {
        const checkbox = event.target;
        if (!checkbox.matches('input[type="checkbox"]')) return;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ–∫–±–æ–∫—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (checkbox.classList.contains('employee-checkbox')) {
            if (checkbox.checked) {
                // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã (–ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫)
                const allCheckboxes = this.tree.querySelectorAll('.employee-checkbox');
                allCheckboxes.forEach(cb => {
                    if (cb !== checkbox && cb.checked) {
                        cb.checked = false;
                    }
                });

                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                this.selectedEmployee = checkbox.dataset.id;

                // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                const allRows = this.tree.querySelectorAll('tr.tree-row');
                allRows.forEach(row => row.classList.remove('selected-row'));
                checkbox.closest('tr').classList.add('selected-row');
            } else {
                // –ï—Å–ª–∏ —Å–Ω—è–ª–∏ —á–µ–∫–±–æ–∫—Å - –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
                this.selectedEmployee = null;
                checkbox.closest('tr').classList.remove('selected-row');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            this._updateSelectedCounter();
        }
    }

    _updateSelectedCounter() {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç: 1 –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∏–Ω–∞—á–µ 0
        const count = this.selectedEmployee ? 1 : 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if (this.counterValue) {
            this.counterValue.textContent = count;
        }

        if (this.selectedCounter) {
            this.selectedCounter.style.display = count > 0 ? 'inline-block' : 'none';
        }

        if (this.actionsDropdown) {
            this.actionsDropdown.disabled = count === 0;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
        if (this.selectedCountBadge) {
            this.selectedCountBadge.textContent = count;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        this._updateActionButtonsState();
    }

    _updateActionButtonsState() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actionButtons = [
            document.getElementById('btnIssueCard'),
            document.getElementById('btnIssueSIZ'),
            document.getElementById('btnEditEmployee')
        ];

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        actionButtons.forEach(btn => {
            if (btn) {
                btn.classList.toggle('disabled', !this.selectedEmployee);

                if (this.selectedEmployee) {
                    btn.removeAttribute('disabled');
                } else {
                    btn.setAttribute('disabled', 'disabled');
                }
            }
        });
    }

    /**
     * üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
     */
    _initEmployeeActions() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const btnIssueCard = document.getElementById('btnIssueCard');
        const btnIssueSIZ = document.getElementById('btnIssueSIZ');
        const btnEditEmployee = document.getElementById('btnEditEmployee');

        if (btnIssueCard) {
            btnIssueCard.addEventListener('click', () => {
                if (!this.selectedEmployee) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞.');
                    return;
                }

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                const employeeId = this.selectedEmployee;
                const url = document.querySelector('[data-siz-personal-card-url]')?.dataset.sizPersonalCardUrl || '';
                window.location.href = url.replace('0', employeeId);
            });
        }

        if (btnIssueSIZ) {
            btnIssueSIZ.addEventListener('click', () => {
                if (!this.selectedEmployee) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –°–ò–ó.');
                    return;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                const employeeId = this.selectedEmployee;
                const url = document.querySelector('[data-siz-issue-url]')?.dataset.sizIssueUrl || '';
                window.location.href = url.replace('0', employeeId);
            });
        }

        if (btnEditEmployee) {
            btnEditEmployee.addEventListener('click', () => {
                if (!this.selectedEmployee) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                    return;
                }

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                const employeeId = this.selectedEmployee;
                const url = document.querySelector('[data-employee-update-url]')?.dataset.employeeUpdateUrl || '';
                window.location.href = url.replace('0', employeeId);
            });
        }
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    if (document.getElementById('employeeTree')) {
        window.employeeTreeCore = new EmployeeTreeCore();
    }
});
'''

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ frontend_tree_search.js
frontend_tree_search_js = '''/**
 * üîç –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */
class EmployeeTreeSearch {
    constructor() {
        this.tree = document.getElementById('employeeTree');
        this.searchInput = document.getElementById('localSearchInput');
        this.searchBtn = document.getElementById('localSearchBtn');
        this.clearSearchBtn = document.getElementById('clearSearchBtn');

        this.debounceTimer = null;
        this.lastSearchTerm = '';

        this.init();
    }

    init() {
        if (!this.tree || !this.searchInput) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.searchInput.addEventListener('input', this._debounceSearch.bind(this));

        if (this.searchBtn) {
            this.searchBtn.addEventListener('click', () => {
                this._performSearch(this.searchInput.value);
            });
        }

        if (this.clearSearchBtn) {
            this.clearSearchBtn.addEventListener('click', () => {
                this._clearSearch();
            });
        }

        // –ü–æ–∏—Å–∫ –ø–æ Enter –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ Escape
        this.searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this._performSearch(this.searchInput.value);
            } else if (e.key === 'Escape') {
                e.preventDefault();
                this._clearSearch();
            }
        });
    }

    _debounceSearch() {
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
            const query = this.searchInput.value;
            if (query !== this.lastSearchTerm) {
                this._performSearch(query);
            }
        }, 300);
    }

    _performSearch(searchText) {
        searchText = searchText.toLowerCase().trim();

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
        if (!searchText) {
            this._clearSearch();
            return;
        }

        this.lastSearchTerm = searchText;

        // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Å–∫—Ä—ã–≤–∞–µ–º –∏ —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        const allRows = this.tree.querySelectorAll('tr.tree-row');
        allRows.forEach(row => {
            row.classList.add('hidden-by-search');
            row.classList.remove('highlight-search');
        });

        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫
        let foundCount = 0;
        allRows.forEach(row => {
            const text = row.textContent.toLowerCase();

            if (text.includes(searchText)) {
                // –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º—ã–π —Ç–µ–∫—Å—Ç
                row.classList.remove('hidden-by-search');

                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                if (row.querySelector('.employee-checkbox')) {
                    row.classList.add('highlight-search');
                    foundCount++;
                }

                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É–∑–ª—ã
                this._expandParentNodes(row);
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (foundCount > 0) {
            this._showSearchResult(`–ù–∞–π–¥–µ–Ω–æ: ${foundCount}`);
        } else {
            this._showSearchResult('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    _expandParentNodes(row) {
        const parentId = row.dataset.parent;
        if (!parentId) return;

        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É
        const parentRow = this.tree.querySelector(`tr[data-node-id="${parentId}"]`);
        if (parentRow) {
            // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ —Å —Ä–æ–¥–∏—Ç–µ–ª—è
            parentRow.classList.remove('hidden-by-search');

            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
            const toggleIcon = parentRow.querySelector('.tree-toggle');
            if (toggleIcon && toggleIcon.textContent === '+') {
                if (window.employeeTreeCore) {
                    window.employeeTreeCore.toggleNodeByToggleIcon(parentId, true);
                } else {
                    toggleIcon.textContent = '-';

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    const children = this.tree.querySelectorAll(`tr[data-parent="${parentId}"]`);
                    children.forEach(child => child.classList.remove('tree-hidden'));
                }
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            this._expandParentNodes(parentRow);
        }
    }

    _showSearchResult(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ UI)
        const searchResultElement = document.querySelector('.search-results');
        if (searchResultElement) {
            searchResultElement.textContent = message;
            searchResultElement.style.display = 'block';
        } else {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑–ª–µ –ø–æ–∏—Å–∫–∞
            const searchContainer = this.searchInput.closest('.card-body');
            if (searchContainer) {
                let resultElement = searchContainer.querySelector('.search-results');
                if (!resultElement) {
                    resultElement = document.createElement('div');
                    resultElement.className = 'search-results mt-2';
                    searchContainer.appendChild(resultElement);
                }
                resultElement.textContent = message;
            }
        }
    }

    _clearSearch() {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if (this.searchInput) {
            this.searchInput.value = '';
        }

        this.lastSearchTerm = '';

        // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        const allRows = this.tree.querySelectorAll('tr.tree-row');
        allRows.forEach(row => {
            row.classList.remove('hidden-by-search', 'highlight-search');
        });

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const searchResultElement = document.querySelector('.search-results');
        if (searchResultElement) {
            searchResultElement.textContent = '';
            searchResultElement.style.display = 'none';
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if (this.searchInput) {
            this.searchInput.focus();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    if (document.getElementById('employeeTree')) {
        window.employeeTreeSearch = new EmployeeTreeSearch();
    }
});
'''

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ frontend_tree_view.css
frontend_tree_view_css = '''/*
 * ========== frontend_tree_view.css ==========
 * –°—Ç–∏–ª–∏ –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 */

/* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */
.tree-table {
    width: 100%;
    margin: 0;
    border-collapse: collapse;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ */
.employee-checkbox {
    cursor: pointer;
    width: 18px;
    height: 18px;
    vertical-align: middle;
    transition: transform 0.2s ease;
}

.employee-checkbox:hover {
    transform: scale(1.2);
}

.employee-checkbox:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
}

/* –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ */
.tree-level {
    padding-left: 15px;
}
.tree-level-2 {
    padding-left: 30px;
}
.tree-level-3 {
    padding-left: 45px;
}

/* –ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–∑–ª–æ–≤ */
.tree-toggle {
    display: inline-block;
    width: 20px;
    text-align: center;
    cursor: pointer;
    margin-right: 5px;
    user-select: none;
    transition: all 0.2s ease;
}

.tree-toggle:hover {
    transform: scale(1.2);
    color: #007bff;
}

.tree-toggle:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
}

/* –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ */
.tree-hidden {
    display: none !important;
}

/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */
.hidden-by-search {
    display: none !important;
}
.highlight-search td {
    background-color: #fff3cd !important;
    animation: highlight-pulse 2s infinite alternate;
}
@keyframes highlight-pulse {
    0% { background-color: #fff3cd; }
    100% { background-color: #ffecb5; }
}

/* –°—Ç–∏–ª—å –¥–ª—è –∏–∫–æ–Ω–æ–∫ */
.tree-icon {
    margin-right: 5px;
    opacity: 0.8;
    transition: opacity 0.2s ease;
}
.tree-row:hover .tree-icon {
    opacity: 1;
}

/* –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ */
tr.tree-row:hover td {
    background-color: #f5f5f5;
    transition: background-color 0.2s ease;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–µ—Ä–µ–≤–∞ –ø–æ —Ç–∏–ø–∞–º */
.organization-row,
.subdivision-row,
.department-row {
    font-weight: 500;
    background-color: #f8f9fa;
    transition: background-color 0.3s ease;
}

/* –°—Ç–∏–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ */
tr.selected-row td {
    background-color: #e8f4ff !important;
    animation: selected-row-pulse 2s infinite alternate;
}
@keyframes selected-row-pulse {
    0% { background-color: #e8f4ff; }
    100% { background-color: #d6eaff; }
}

/* –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */
.actions-bar {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
}

/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */
.btn-group-sm .btn {
    transition: all 0.2s ease;
}

.btn-group-sm .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
}

/* –°—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
.select-count {
    margin-left: 10px;
    color: #666;
    font-size: 13px;
    transition: opacity 0.3s ease;
}

/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */
.search-results {
    margin-top: 10px;
    padding: 5px 10px;
    border-radius: 4px;
    background-color: #f8f9fa;
    border-left: 3px solid #007bff;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 768px) {
    .employee-checkbox {
        width: 24px;
        height: 24px;
    }

    .tree-toggle {
        width: 25px;
        height: 25px;
        line-height: 25px;
        font-size: 16px;
    }

    .actions-bar {
        flex-direction: column;
        align-items: flex-start;
    }

    .actions-bar .dropdown,
    .actions-bar .btn {
        width: 100%;
        margin-bottom: 5px;
    }
}
'''


def main():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    base_path = 'D:\\YandexDisk\\OT_online'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(base_path):
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É.")
        sys.exit(1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    js_directory = os.path.join(base_path, 'static', 'directory', 'js')
    css_directory = os.path.join(base_path, 'static', 'directory', 'css')

    create_directory(js_directory)
    create_directory(css_directory)

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    frontend_tree_view_js_path = os.path.join(js_directory, 'frontend_tree_view.js')
    frontend_tree_search_js_path = os.path.join(js_directory, 'frontend_tree_search.js')
    frontend_tree_view_css_path = os.path.join(css_directory, 'frontend_tree_view.css')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    create_file(frontend_tree_view_js_path, frontend_tree_view_js)
    create_file(frontend_tree_search_js_path, frontend_tree_search_js)
    create_file(frontend_tree_view_css_path, frontend_tree_view_css)

    print("\n–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ —à–∞–±–ª–æ–Ω–µ employee_tree_view.html:")
    print('''
{% block extra_css %}
<link rel="stylesheet" href="{% static 'directory/css/frontend_tree_view.css' %}">
{% endblock %}

{% block extra_js %}
<script src="{% static 'directory/js/frontend_tree_view.js' %}"></script>
<script src="{% static 'directory/js/frontend_tree_search.js' %}"></script>
{% endblock %}
''')


if __name__ == "__main__":
    main()