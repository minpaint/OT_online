# config/admin_site.py

from collections import OrderedDict
from django.contrib.admin import AdminSite
from django.utils.translation import gettext_lazy as _

class OTAdminSite(AdminSite):
    site_header = "OT-online –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
    site_title = "OT-online"
    index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

    MENU_ORDER = OrderedDict([
        (_("üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞"), [
            "User", "Group",
        ]),
        (_("üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"), [
            "Organization", "Subdivision", "Department", "StructuralSubdivision",
        ]),
        (_("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"), [
            "Position", "Employee",
        ]),
        (_("üè• –ú–µ–¥–æ—Å–º–æ—Ç—Ä—ã"), [
            "MedicalExaminationType",
            "HarmfulFactor",
            "PositionMedicalFactor",
            "EmployeeMedicalExamination",
            "MedicalExaminationNorm",
            "MedicalSettings",
        ]),
        (_("üõ°Ô∏è –°–ò–ó"), [
            "SIZ", "SIZNorm",
        ]),
        (_("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã"), [
            "DocumentTemplate", "Document", "Equipment",
        ]),
        (_("üìë –ü—Ä–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—É"), [
            "EmployeeHiring", "Commission", "GeneratedDocument",
        ]),
    ])

    def get_app_list(self, request):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –±–ª–æ–∫–∞–º.
        """
        app_list = super().get_app_list(request)

        # –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        all_models = []
        for app in app_list:
            all_models.extend(app['models'])

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
        grouped_apps = OrderedDict()
        for section, models in self.MENU_ORDER.items():
            grouped_apps[section] = {'name': section, 'models': []}
            for model in models:
                for m in all_models:
                    if m['object_name'] == model:
                        grouped_apps[section]['models'].append(m)

        # –ü—Ä–æ—á–µ–µ
        grouped_apps["–ü—Ä–æ—á–µ–µ"] = {'name': "–ü—Ä–æ—á–µ–µ", 'models': []}
        for m in all_models:
            if not any(m['object_name'] in models for models in self.MENU_ORDER.values()):
                grouped_apps["–ü—Ä–æ—á–µ–µ"]['models'].append(m)

        return [section for section in grouped_apps.values() if section['models']]
