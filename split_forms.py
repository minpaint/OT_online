import os
import shutil
from pathlib import Path

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ä–º
FORMS = {
    'organization.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from directory.models import Organization

class OrganizationForm(forms.ModelForm):
    """üè¢ –§–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""

    class Meta:
        model = Organization
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))
''',

    'subdivision.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from dal import autocomplete
from directory.models import StructuralSubdivision

class StructuralSubdivisionForm(forms.ModelForm):
    """üè≠ –§–æ—Ä–º–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""

    class Meta:
        model = StructuralSubdivision
        fields = ['name', 'short_name', 'organization', 'parent']
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'parent': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            )
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))
''',

    'department.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from dal import autocomplete
from directory.models import Department

class DepartmentForm(forms.ModelForm):
    """üìÇ –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤"""

    class Meta:
        model = Department
        fields = ['name', 'short_name', 'organization', 'subdivision']
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            )
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))
''',

    'position.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from dal import autocomplete
from directory.models import Position

class PositionForm(forms.ModelForm):
    """üëî –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""

    class Meta:
        model = Position
        fields = '__all__'
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={
                    'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                    'data-minimum-input-length': 0
                }
            ),
            'documents': autocomplete.ModelSelect2Multiple(
                url='directory:document-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={'data-placeholder': 'üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...'}
            ),
            'equipment': autocomplete.ModelSelect2Multiple(
                url='directory:equipment-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={'data-placeholder': '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...'}
            )
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))
''',

    'employee.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from dal import autocomplete
from directory.models import Employee

class EmployeeForm(forms.ModelForm):
    """üë§ –§–æ—Ä–º–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""

    class Meta:
        model = Employee
        fields = [
            'full_name_nominative', 'full_name_dative',
            'date_of_birth', 'place_of_residence',
            'organization', 'subdivision', 'department', 'position',
            'height', 'clothing_size', 'shoe_size',
            'is_contractor'
        ]
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={
                    'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                    'data-minimum-input-length': 0
                }
            ),
            'position': autocomplete.ModelSelect2(
                url='directory:position-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...'}
            ),
            'date_of_birth': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            )
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        self.fields['subdivision'].required = False
        self.fields['department'].required = False
''',

    'employee_hiring.py': '''from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Submit, Row, Column, HTML
from dal import autocomplete
from directory.models import Employee

class EmployeeHiringForm(forms.ModelForm):
    """üìù –§–æ—Ä–º–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    preview = forms.BooleanField(
        required=False,
        initial=False,
        widget=forms.HiddenInput()
    )

    class Meta:
        model = Employee
        fields = [
            'full_name_nominative', 'full_name_dative',
            'date_of_birth', 'place_of_residence',
            'organization', 'subdivision', 'department', 'position',
            'height', 'clothing_size', 'shoe_size',
            'is_contractor'
        ]
        widgets = {
            'organization': autocomplete.ModelSelect2(
                url='directory:organization-autocomplete',
                attrs={'data-placeholder': 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...'}
            ),
            'subdivision': autocomplete.ModelSelect2(
                url='directory:subdivision-autocomplete',
                forward=['organization'],
                attrs={'data-placeholder': 'üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...'}
            ),
            'department': autocomplete.ModelSelect2(
                url='directory:department-autocomplete',
                forward=['subdivision'],
                attrs={
                    'data-placeholder': 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª...',
                    'data-minimum-input-length': 0
                }
            ),
            'position': autocomplete.ModelSelect2(
                url='directory:position-autocomplete',
                forward=['organization', 'subdivision', 'department'],
                attrs={'data-placeholder': 'üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...'}
            ),
            'date_of_birth': forms.DateInput(
                attrs={'type': 'date'},
                format='%Y-%m-%d'
            )
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.layout = Layout(
            Row(
                Column('full_name_nominative', css_class='form-group col-md-6'),
                Column('full_name_dative', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('date_of_birth', css_class='form-group col-md-6'),
                Column('place_of_residence', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('organization', css_class='form-group col-md-6'),
                Column('subdivision', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('department', css_class='form-group col-md-6'),
                Column('position', css_class='form-group col-md-6'),
                css_class='form-row'
            ),
            Row(
                Column('height', css_class='form-group col-md-4'),
                Column('clothing_size', css_class='form-group col-md-4'),
                Column('shoe_size', css_class='form-group col-md-4'),
                css_class='form-row'
            ),
            'is_contractor',
            HTML("<hr>"),
            Row(
                Column(
                    Submit('preview', 'üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', css_class='btn-info'),
                    css_class='form-group col-6'
                ),
                Column(
                    Submit('submit', 'üíæ –ü—Ä–∏–Ω—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É', css_class='btn-success'),
                    css_class='form-group col-6'
                ),
                css_class='form-row'
            )
        )

        if user:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.fields['organization'].queryset = user.profile.organizations.all()
'''
}

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ __init__.py
INIT_CONTENT = '''from .organization import OrganizationForm
from .subdivision import StructuralSubdivisionForm
from .department import DepartmentForm
from .position import PositionForm
from .employee import EmployeeForm
from .employee_hiring import EmployeeHiringForm

__all__ = [
    'OrganizationForm',
    'StructuralSubdivisionForm',
    'DepartmentForm',
    'PositionForm',
    'EmployeeForm',
    'EmployeeHiringForm',
]
'''


def create_forms_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ä–º"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é forms –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    forms_dir = Path('directory/forms')
    forms_dir.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º
    for filename, content in FORMS.items():
        file_path = forms_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

    # –°–æ–∑–¥–∞–µ–º __init__.py
    init_path = forms_dir / '__init__.py'
    with open(init_path, 'w', encoding='utf-8') as f:
        f.write(INIT_CONTENT)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π forms.py –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    old_forms = Path('directory/forms.py')
    if old_forms.exists():
        old_forms.unlink()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        create_forms_structure()
        print("‚úÖ –§–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã!")
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ä–º:")
        print("directory/")
        print("‚îî‚îÄ‚îÄ forms/")
        print("    ‚îú‚îÄ‚îÄ __init__.py")
        for form in FORMS.keys():
            print(f"    ‚îú‚îÄ‚îÄ {form}")

        print("\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã")
        print("3. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    main()