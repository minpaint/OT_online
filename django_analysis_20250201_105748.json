{
    "structure": {
        "_files": [
            "asgi.py",
            "collect_code_and_tree.py",
            "File_reader.py",
            "manage.py",
            "settings.py",
            "setup_project.py",
            "urls.py",
            "wsgi.py"
        ],
        "directory": {
            "_files": [
                "admin.py",
                "admin_mixins.py",
                "ajax.py",
                "apps.py",
                "forms.py",
                "signals.py",
                "urls.py",
                "utils.py",
                "views.py",
                "__init__.py"
            ],
            "models": {
                "_files": [
                    "department.py",
                    "document.py",
                    "employee.py",
                    "equipment.py",
                    "organization.py",
                    "position.py",
                    "subdivision.py",
                    "__init__.py"
                ]
            },
            "static": {
                "directory": {
                    "css": {},
                    "js": {
                        "_files": [
                            "admin_dependent_dropdowns.js",
                            "custom_dynamic_forms.js",
                            "dependent_fields.js",
                            "main.js"
                        ]
                    }
                }
            },
            "views": {
                "_files": [
                    "employees.py",
                    "positions.py",
                    "__init__.py"
                ]
            }
        },
        "static": {}
    },
    "contents": {
        "asgi.py": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n\napplication = get_asgi_application()\n",
        "collect_code_and_tree.py": "import os\n\n\ndef get_formatted_size(file_path):\n    \"\"\"Получает размер файла и форматирует его в удобочитаемом виде.\"\"\"\n    size_bytes = os.path.getsize(file_path)\n    if size_bytes < 1024:\n        return f\"{size_bytes} B\"\n    elif size_bytes < 1024 * 1024:\n        return f\"{size_bytes / 1024:.1f} KB\"\n    elif size_bytes < 1024 * 1024 * 1024:\n        return f\"{size_bytes / (1024 * 1024):.1f} MB\"\n    else:\n        return f\"{size_bytes / (1024 * 1024 * 1024):.1f} GB\"\n\n\ndef get_directory_tree(root_dir):\n    \"\"\"Создает строковое представление дерева директорий и файлов.\"\"\"\n    # Только служебные директории и файлы для исключения\n    excluded_dirs = {\n        'venv',\n        '__pycache__',\n        '.git',\n        '.idea'\n    }\n\n    excluded_files = {\n        '.gitignore',\n        'db.sqlite3',\n        '.env',\n        '*.pyc',\n        '.DS_Store'\n    }\n\n    tree_str = \"СТРУКТУРА ПРОЕКТА\\n\"\n    tree_str += \"=\" * 50 + \"\\n\"\n\n    for root, dirs, files in os.walk(root_dir):\n        # Исключаем только служебные директории\n        dirs[:] = [d for d in dirs if d not in excluded_dirs]\n\n        level = root.replace(root_dir, '').count(os.sep)\n        indent = '│   ' * level\n\n        if level > 0:\n            tree_str += f\"{indent[:-4]}├── {os.path.basename(root)}/\\n\"\n        else:\n            tree_str += f\"└── {os.path.basename(root)}/\\n\"\n\n        # Добавляем все файлы, кроме служебных\n        for f in sorted(files):\n            if any(f.endswith(excluded) for excluded in excluded_files):\n                continue\n            file_path = os.path.join(root, f)\n            size = get_formatted_size(file_path)\n            tree_str += f\"{indent}├── {f} ({size})\\n\"\n\n    return tree_str\n\n\ndef print_file_content(file_path, relative_path):\n    \"\"\"Печатает содержимое файла с форматированием.\"\"\"\n    try:\n        print(f\"\\n{'=' * 80}\")\n        print(f\"--- {relative_path} ---\")\n        print(f\"{'=' * 80}\")\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            print(content)\n        print(f\"\\nРазмер файла: {get_formatted_size(file_path)}\")\n    except Exception as e:\n        print(f\"Ошибка при чтении файла {relative_path}: {str(e)}\")\n\n\ndef read_all_project_files(project_root):\n    \"\"\"Читает и выводит структуру и содержимое всех файлов проекта, кроме служебных.\"\"\"\n    # Сначала выводим структуру проекта\n    print(get_directory_tree(project_root))\n\n    print(\"\\nСОДЕРЖИМОЕ ФАЙЛОВ ПРОЕКТА:\")\n    print(\"=\" * 50)\n\n    # Служебные директории и файлы для исключения\n    excluded_dirs = {\n        'venv',\n        '__pycache__',\n        '.git',\n        '.idea'\n    }\n\n    excluded_files = {\n        '.gitignore',\n        'db.sqlite3',\n        '.env',\n        '*.pyc',\n        '.DS_Store'\n    }\n\n    # Собираем все файлы проекта\n    for root, dirs, files in os.walk(project_root):\n        # Пропускаем служебные директории\n        if any(excluded in root for excluded in excluded_dirs):\n            continue\n\n        for file in sorted(files):\n            # Пропускаем служебные файлы\n            if any(file.endswith(excluded) for excluded in excluded_files):\n                continue\n\n            relative_path = os.path.relpath(os.path.join(root, file), project_root)\n            file_path = os.path.join(root, file)\n            print_file_content(file_path, relative_path)\n\n\nif __name__ == \"__main__\":\n    project_root = \"D:/YandexDisk/OT_online\"  # Укажите свой путь к проекту\n    read_all_project_files(project_root)",
        "File_reader.py": "import os\nimport json\nimport logging\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Set\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass ProjectStats:\n    \"\"\"Статистика проекта\"\"\"\n    total_files: int = 0\n    python_files: int = 0\n    template_files: int = 0\n    js_files: int = 0\n\n\nclass DjangoAnalyzer:\n    \"\"\"Анализатор Django проекта\"\"\"\n\n    IMPORTANT_FILES = {\n        'models.py': 'Models definitions',\n        'views.py': 'Views and logic',\n        'urls.py': 'URL patterns',\n        'forms.py': 'Forms processing',\n        'admin.py': 'Admin interface',\n        'apps.py': 'App configuration',\n        '__init__.py': 'Package initialization',\n        'settings.py': 'Project settings',\n        'managers.py': 'Model managers',\n        'services.py': 'Business logic',\n        'utils.py': 'Utility functions',\n        'tasks.py': 'Background tasks',\n        'serializers.py': 'API serializers',\n        'viewsets.py': 'API viewsets',\n        'signals.py': 'Signal handlers',\n        'middleware.py': 'Custom middleware',\n        'context_processors.py': 'Template context',\n        'validators.py': 'Custom validators',\n        'filters.py': 'Query filters'\n    }\n\n    EXCLUDED_DIRS = {\n        # Стандартные технические директории\n        '__pycache__',\n        'migrations',\n        'tests',\n        'venv',\n        '.git',\n        '.idea',\n        'env',\n        'node_modules',\n\n        # Полностью исключаем staticfiles\n        'staticfiles',\n\n        # Другие статические директории\n        'static/admin',\n        'static/vendor',\n        'assets/vendor',\n\n        # Скомпилированные файлы и кэш\n        '.sass-cache',\n        'dist',\n        'build',\n\n        # Медиа файлы\n        'media',\n\n        # Локальные настройки разработки\n        '.vscode',\n        '.env',\n\n        # Временные файлы\n        'tmp',\n        'temp'\n    }\n\n    # Расширяем список игнорируемых файлов\n    EXCLUDED_FILES = {\n        # Минифицированные файлы\n        '.min.js',\n        '.min.css',\n\n        # Карты исходников\n        '.map',\n\n        # Конфигурационные файлы\n        'package.json',\n        'package-lock.json',\n        'yarn.lock',\n        'webpack.config.js',\n\n        # Кэш и временные файлы\n        '.pyc',\n        '.pyo',\n        '.pyd',\n        '.so',\n        '.dll',\n\n        # Файлы документации\n        'README.md',\n        'LICENSE',\n\n        # Файлы зависимостей\n        'requirements.txt',\n        'Pipfile',\n        'Pipfile.lock'\n    }\n\n    def __init__(self, project_root: str):\n        \"\"\"Инициализация анализатора\"\"\"\n        self.project_root = Path(project_root)\n        self.stats = ProjectStats()\n        self.setup_logging()\n\n    def setup_logging(self) -> None:\n        \"\"\"Настройка логирования\"\"\"\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s'\n        )\n\n    def _should_exclude_file(self, filename: str) -> bool:\n        \"\"\"Проверяет, должен ли файл быть исключен из анализа\"\"\"\n        return any(filename.endswith(ext) for ext in self.EXCLUDED_FILES)\n\n    def analyze(self) -> Dict[str, Any]:\n        \"\"\"Анализ проекта\"\"\"\n        logging.info(f\"Starting analysis of {self.project_root}\")\n\n        structure = {\n            'structure': self._get_structure(),\n            'contents': self._get_contents(),\n            'stats': self._get_stats()\n        }\n\n        return structure\n\n    def _get_structure(self) -> Dict[str, Any]:\n        \"\"\"Получение структуры проекта с улучшенной фильтрацией\"\"\"\n        structure = {}\n\n        for root, dirs, files in os.walk(self.project_root):\n            # Улучшенная фильтрация директорий\n            dirs[:] = [d for d in dirs if not any(\n                (d.lower() == excluded.lower() or  # Точное совпадение\n                 excluded.lower() in str(Path(root) / d).lower() or  # Путь содержит исключаемую директорию\n                 str(Path(root) / d).lower().endswith(excluded.lower()))  # Путь заканчивается на исключаемую директорию\n                for excluded in self.EXCLUDED_DIRS\n            )]\n\n            path = Path(root)\n\n            # Пропускаем обработку, если текущая директория должна быть исключена\n            if any(excluded.lower() in str(path).lower() for excluded in self.EXCLUDED_DIRS):\n                continue\n\n            rel_path = path.relative_to(self.project_root)\n\n            if str(rel_path) == '.':\n                current_dict = structure\n            else:\n                current_dict = structure\n                for part in rel_path.parts:\n                    current_dict = current_dict.setdefault(part, {})\n\n            # Фильтруем файлы\n            important_files = [\n                f for f in files\n                if (f.endswith(('.html', '.js', '.py')) and\n                    not self._should_exclude_file(f))\n            ]\n\n            if important_files:\n                current_dict['_files'] = important_files\n                self.stats.total_files += len(important_files)\n\n                for f in important_files:\n                    if f.endswith('.py'):\n                        self.stats.python_files += 1\n                    elif f.endswith('.html'):\n                        self.stats.template_files += 1\n                    elif f.endswith('.js'):\n                        self.stats.js_files += 1\n\n        return structure\n\n    def _get_contents(self) -> Dict[str, str]:\n        \"\"\"Получение содержимого файлов\"\"\"\n        contents = {}\n\n        for root, _, files in os.walk(self.project_root):\n            path = Path(root)\n\n            # Пропускаем исключенные директории\n            if any(excluded.lower() in str(path).lower() for excluded in self.EXCLUDED_DIRS):\n                continue\n\n            for file in files:\n                # Пропускаем исключенные файлы\n                if self._should_exclude_file(file):\n                    continue\n\n                if (file in self.IMPORTANT_FILES or\n                        file.endswith(('.html', '.js', '.py'))):\n\n                    file_path = path / file\n                    rel_path = file_path.relative_to(self.project_root)\n\n                    try:\n                        with open(file_path, 'r', encoding='utf-8') as f:\n                            contents[str(rel_path)] = f.read()\n                    except Exception as e:\n                        logging.error(f\"Error reading {file_path}: {e}\")\n                        contents[str(rel_path)] = f\"Error reading file: {e}\"\n\n        return contents\n\n    def _get_stats(self) -> Dict[str, int]:\n        \"\"\"Получение статистики\"\"\"\n        return {\n            'total_files': self.stats.total_files,\n            'python_files': self.stats.python_files,\n            'template_files': self.stats.template_files,\n            'js_files': self.stats.js_files\n        }\n\n    def print_structure(self, structure: Dict[str, Any], indent: int = 0) -> None:\n        \"\"\"Вывод структуры проекта\"\"\"\n        for key, value in sorted(structure.items()):\n            if key == '_files':\n                for file in sorted(value):\n                    desc = self.IMPORTANT_FILES.get(file, '')\n                    desc_text = f\" - {desc}\" if desc else ''\n                    print(f\"{'│ ' * (indent - 1)}├── {file}{desc_text}\")\n            else:\n                print(f\"{'│ ' * indent}├── {key}/\")\n                if isinstance(value, dict):\n                    self.print_structure(value, indent + 1)\n\n    def print_contents(self, contents: Dict[str, str]) -> None:\n        \"\"\"Вывод содержимого файлов\"\"\"\n        for file_path, content in sorted(contents.items()):\n            print(f\"\\n{'=' * 80}\")\n            print(f\"File: {file_path}\")\n            print('=' * 80)\n            print(content)\n            print('=' * 80)\n\n    def save_analysis(self, results: Dict[str, Any], output_file: str) -> None:\n        \"\"\"Сохранение результатов анализа в JSON файл\"\"\"\n        try:\n            with open(output_file, 'w', encoding='utf-8') as f:\n                json.dump(results, f, indent=4, ensure_ascii=False)\n            logging.info(f\"Analysis results saved to {output_file}\")\n        except Exception as e:\n            logging.error(f\"Error saving analysis results: {e}\")\n\n\ndef main():\n    \"\"\"Основная функция\"\"\"\n    # Указываем конкретный путь к проекту\n    project_root = r\"d:\\YandexDisk\\OT_online\"\n\n    # Имя файла для сохранения результатов\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    output_file = os.path.join(project_root, f\"django_analysis_{timestamp}.json\")\n\n    try:\n        analyzer = DjangoAnalyzer(project_root)\n        results = analyzer.analyze()\n\n        print(\"\\n=== DJANGO PROJECT STRUCTURE ===\")\n        analyzer.print_structure(results['structure'])\n\n        print(\"\\n=== STATISTICS ===\")\n        for key, value in results['stats'].items():\n            print(f\"{key}: {value}\")\n\n        print(\"\\n=== FILE CONTENTS ===\")\n        analyzer.print_contents(results['contents'])\n\n        # Сохраняем результаты в файл\n        analyzer.save_analysis(results, output_file)\n        print(f\"\\nAnalysis results saved to: {output_file}\")\n\n    except Exception as e:\n        logging.error(f\"Error analyzing project: {e}\")\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()",
        "manage.py": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n",
        "settings.py": "import os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent\n\n# Quick-start development settings - unsuitable for production\nSECRET_KEY = os.getenv('DJANGO_SECRET_KEY')\nDEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'\nALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crispy_forms',\n    'crispy_bootstrap5',\n    'directory.apps.DirectoryConfig',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'ru-ru')\nTIME_ZONE = os.getenv('TIME_ZONE', 'Europe/Moscow')\nUSE_I18N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = os.getenv('STATIC_URL', 'static/')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\n# Media files\nMEDIA_URL = os.getenv('MEDIA_URL', 'media/')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = os.getenv('DEFAULT_AUTO_FIELD', 'django.db.models.BigAutoField')\n\n# Crispy Forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n\n# Security settings\nCSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False') == 'True'\nSESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False') == 'True'\nSECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'False') == 'True'\n\n# Login URL\nLOGIN_URL = '/admin/login/'\n",
        "setup_project.py": "import os\nimport yaml\nimport json\nimport logging\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Any, Tuple\n\n\nclass DjangoProjectAnalyzer:\n    \"\"\"\n    Класс для анализа структуры и содержимого Django проекта.\n    Обеспечивает вывод в древовидном формате и детальный анализ кода.\n    \"\"\"\n\n    def __init__(self, project_root: str):\n        \"\"\"\n        Инициализация анализатора\n\n        Args:\n            project_root (str): Путь к корневой директории Django проекта\n        \"\"\"\n        self.project_root = Path(project_root)\n        self.cache = {}\n        self.setup_config()\n        self.setup_logging()\n\n    def setup_config(self) -> None:\n        \"\"\"Настройка базовой конфигурации для анализа проекта\"\"\"\n        self.config = {\n            'main_directories': {\n                'models': {\n                    'description': 'Модели данных',\n                    'patterns': ['*.py'],\n                    'important_files': [\n                        'document.py',\n                        'employee.py',\n                        'equipment.py',\n                        'organization.py',\n                        'position.py',\n                        'subdivision.py',\n                        'department.py'\n                    ]\n                },\n                'views': {\n                    'description': 'Представления',\n                    'patterns': ['*.py'],\n                    'important_files': [\n                        'views.py',\n                        'employees.py',\n                        'positions.py'\n                    ]\n                },\n                'templates': {\n                    'description': 'Шаблоны',\n                    'patterns': ['*.html'],\n                    'important_files': [\n                        'base.html',\n                        'home.html'\n                    ]\n                },\n                'static/js': {\n                    'description': 'JavaScript файлы',\n                    'patterns': ['*.js'],\n                    'important_files': [\n                        'admin_dependent_dropdowns.js',\n                        'custom_dynamic_forms.js',\n                        'main.js'\n                    ]\n                }\n            },\n            'excluded_patterns': [\n                '__pycache__',\n                '.git',\n                '.idea',\n                'venv',\n                'migrations',\n                'tests',\n                '.env',\n                '.DS_Store',\n                '*.pyc',\n                'db.sqlite3'\n            ],\n            'file_descriptions': {\n                'urls.py': 'URL маршрутизация',\n                'views.py': 'Основные представления',\n                'models.py': 'Основные модели',\n                'forms.py': 'Формы для обработки данных',\n                'admin.py': 'Настройки админ-панели',\n                'document.py': 'Модель документов',\n                'employee.py': 'Модель сотрудников',\n                'equipment.py': 'Модель оборудования',\n                'organization.py': 'Модель организации',\n                'position.py': 'Модель должностей',\n                'subdivision.py': 'Модель подразделений',\n                'department.py': 'Модель отделов',\n                'custom_dynamic_forms.js': 'Динамические формы',\n                'admin_dependent_dropdowns.js': 'Зависимые списки в админке',\n                'main.js': 'Основной JavaScript файл'\n            }\n        }\n\n    def setup_logging(self) -> None:\n        \"\"\"Настройка системы логирования\"\"\"\n        logging.basicConfig(\n            filename=f'django_analyzer_{datetime.now():%Y%m%d}.log',\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s'\n        )\n\n    def analyze_project(self) -> Tuple[str, dict]:\n        \"\"\"\n        Проводит полный анализ проекта\n\n        Returns:\n            Tuple[str, dict]: (древовидная структура, полные данные анализа)\n        \"\"\"\n        try:\n            structure = self._analyze_structure()\n            tree_output = self._format_tree_output(structure)\n            return tree_output, structure\n        except Exception as e:\n            logging.error(f\"Ошибка при анализе проекта: {e}\")\n            raise\n\n    def _analyze_structure(self) -> Dict[str, Any]:\n        \"\"\"\n        Анализирует структуру проекта и содержимое файлов\n\n        Returns:\n            Dict[str, Any]: Структура проекта с данными анализа\n        \"\"\"\n        structure = {'directories': {}, 'files': {}}\n\n        for root, dirs, files in os.walk(self.project_root):\n            # Пропускаем исключенные директории\n            dirs[:] = [d for d in dirs if not any(\n                pattern in d for pattern in self.config['excluded_patterns']\n            )]\n\n            current_path = Path(root)\n            rel_path = current_path.relative_to(self.project_root)\n\n            # Анализируем только нужные директории и файлы\n            if self._should_analyze_directory(rel_path):\n                dir_structure = structure['directories'].setdefault(str(rel_path), {\n                    'path': str(rel_path),\n                    'type': self._get_directory_type(rel_path),\n                    'files': {}\n                })\n\n                for file in files:\n                    if self._should_analyze_file(rel_path, file):\n                        file_path = current_path / file\n                        file_data = self._analyze_file(file_path, rel_path)\n                        dir_structure['files'][file] = file_data\n\n        return structure\n\n    def _should_analyze_directory(self, path: Path) -> bool:\n        \"\"\"Проверяет, нужно ли анализировать директорию\"\"\"\n        path_str = str(path)\n        return any(\n            dir_name in path_str\n            for dir_name in self.config['main_directories'].keys()\n        )\n\n    def _should_analyze_file(self, dir_path: Path, filename: str) -> bool:\n        \"\"\"Проверяет, нужно ли анализировать файл\"\"\"\n        if any(pattern in filename for pattern in self.config['excluded_patterns']):\n            return False\n\n        dir_type = self._get_directory_type(dir_path)\n        if dir_type in self.config['main_directories']:\n            dir_config = self.config['main_directories'][dir_type]\n            return (\n                    filename in dir_config.get('important_files', []) or\n                    any(\n                        self._match_pattern(filename, pattern)\n                        for pattern in dir_config['patterns']\n                    )\n            )\n        return False\n\n    def _match_pattern(self, filename: str, pattern: str) -> bool:\n        \"\"\"Проверяет соответствие файла паттерну\"\"\"\n        from fnmatch import fnmatch\n        return fnmatch(filename, pattern)\n\n    def _get_directory_type(self, path: Path) -> str:\n        \"\"\"Определяет тип директории\"\"\"\n        path_str = str(path)\n        for dir_type in self.config['main_directories'].keys():\n            if dir_type in path_str:\n                return dir_type\n        return 'other'\n\n    def _analyze_file(self, file_path: Path, rel_path: Path) -> Dict[str, Any]:\n        \"\"\"\n        Анализирует содержимое файла\n\n        Args:\n            file_path (Path): Полный путь к файлу\n            rel_path (Path): Относительный путь от корня проекта\n\n        Returns:\n            Dict[str, Any]: Данные анализа файла\n        \"\"\"\n        try:\n            stats = file_path.stat()\n\n            # Читаем содержимое файла\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n            except UnicodeDecodeError:\n                content = \"Бинарный файл\"\n            except Exception as e:\n                content = f\"Ошибка чтения файла: {str(e)}\"\n\n            return {\n                'path': str(rel_path / file_path.name),\n                'size': self._format_size(stats.st_size),\n                'modified': datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),\n                'description': self.config['file_descriptions'].get(file_path.name, ''),\n                'content': content,\n                'type': file_path.suffix[1:] if file_path.suffix else 'unknown'\n            }\n        except Exception as e:\n            logging.error(f\"Ошибка при анализе файла {file_path}: {e}\")\n            return {'error': str(e)}\n\n    def _format_size(self, size_bytes: int) -> str:\n        \"\"\"Форматирует размер файла в читаемый вид\"\"\"\n        for unit in ['B', 'KB', 'MB', 'GB']:\n            if size_bytes < 1024:\n                return f\"{size_bytes:.1f} {unit}\"\n            size_bytes /= 1024\n        return f\"{size_bytes:.1f} TB\"\n\n    def _format_tree_output(self, structure: Dict[str, Any]) -> str:\n        \"\"\"Форматирует структуру в древовидный вывод\"\"\"\n        output = [\"СТРУКТУРА DJANGO ПРОЕКТА\", \"=\" * 50, \"\"]\n\n        for dir_path, dir_data in sorted(structure['directories'].items()):\n            # Добавляем информацию о директории\n            indent = \"    \" * (dir_path.count('/') + 1)\n            output.append(f\"{indent[:-4]}├── {os.path.basename(dir_path)}/\")\n\n            if dir_data['type'] in self.config['main_directories']:\n                desc = self.config['main_directories'][dir_data['type']]['description']\n                output.append(f\"{indent}└── Описание: {desc}\")\n\n            # Добавляем информацию о файлах\n            for filename, file_data in sorted(dir_data['files'].items()):\n                output.append(f\"{indent}├── {filename} ({file_data['size']})\")\n                if file_data['description']:\n                    output.append(f\"{indent}│   └── {file_data['description']}\")\n\n        return \"\\n\".join(output)\n\n    def save_analysis(self, output_path: str = 'django_project_analysis.json') -> None:\n        \"\"\"Сохраняет результаты анализа в JSON файл\"\"\"\n        try:\n            _, structure = self.analyze_project()\n            with open(output_path, 'w', encoding='utf-8') as f:\n                json.dump(structure, f, indent=2, ensure_ascii=False)\n            print(f\"\\nПолный анализ сохранен в: {output_path}\")\n        except Exception as e:\n            logging.error(f\"Ошибка при сохранении анализа: {e}\")\n            raise\n\n    def print_file_contents(self, structure: Dict[str, Any]) -> None:\n        \"\"\"Выводит содержимое всех проанализированных файлов\"\"\"\n        print(\"\\nСОДЕРЖИМОЕ ФАЙЛОВ:\")\n        print(\"=\" * 50)\n\n        for dir_path, dir_data in sorted(structure['directories'].items()):\n            for filename, file_data in sorted(dir_data['files'].items()):\n                print(f\"\\n{'=' * 80}\")\n                print(f\"--- {file_data['path']} ---\")\n                if file_data['description']:\n                    print(f\"Описание: {file_data['description']}\")\n                print(f\"Размер: {file_data['size']}\")\n                print(f\"Последнее изменение: {file_data['modified']}\")\n                print(\"=\" * 80)\n                print(file_data['content'])\n\n\ndef main():\n    \"\"\"Основная функция для запуска анализатора\"\"\"\n    project_root = \"D:/YandexDisk/OT_online\"  # Укажите путь к вашему проекту\n\n    try:\n        # Создаем анализатор\n        analyzer = DjangoProjectAnalyzer(project_root)\n\n        # Получаем структуру и данные анализа\n        tree_output, structure = analyzer.analyze_project()\n\n        # Выводим древовидную структуру\n        print(tree_output)\n\n        # Выводим содержимое файлов\n        analyzer.print_file_contents(structure)\n\n        # Сохраняем полный анализ в JSON\n        analyzer.save_analysis()\n\n    except Exception as e:\n        print(f\"Произошла ошибка: {e}\")\n        logging.error(f\"Критическая ошибка: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()",
        "urls.py": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('directory/', include('directory.urls', namespace='directory')),\n    path('admin/', admin.site.urls),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n",
        "wsgi.py": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n\napplication = get_wsgi_application()\n",
        "directory\\admin.py": "from django.contrib import admin\nfrom .models import (\n    Organization,\n    StructuralSubdivision,\n    Department,\n    Document,\n    Equipment,\n    Position,\n    Employee\n)\nfrom .admin_mixins import DependentFieldsMixin\n\n@admin.register(Organization)\nclass OrganizationAdmin(admin.ModelAdmin):\n    list_display = ['full_name_ru', 'short_name_by']\n    search_fields = ['full_name_ru', 'full_name_by']\n\n@admin.register(StructuralSubdivision)\nclass StructuralSubdivisionAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = ['name', 'organization']\n    list_filter = ['organization']\n    search_fields = ['name']\n    autocomplete_fields = ['organization']\n\n@admin.register(Department)\nclass DepartmentAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = ['name', 'organization', 'subdivision']\n    list_filter = ['organization', 'subdivision']\n    search_fields = ['name']  #  <--- Добавили search_fields\n    autocomplete_fields = ['organization', 'subdivision']\n\n    dependent_fields = {\n        'subdivision': 'organization'\n    }\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        field = super().formfield_for_foreignkey(db_field, request, **kwargs)\n        if db_field.name == 'subdivision':\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': '/directory/ajax/subdivisions/',\n                'data-parent-field': 'organization'  # Убедитесь, что это поле называется 'organization'\n            })\n        return field\n\n@admin.register(Document)\nclass DocumentAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = ['name', 'organization', 'subdivision', 'department']\n    list_filter = ['organization', 'subdivision', 'department']\n    search_fields = ['name']\n    autocomplete_fields = ['organization', 'subdivision', 'department']\n\n    dependent_fields = {\n        'subdivision': 'organization',\n        'department': 'subdivision'\n    }\n\n    def get_dependent_field_attrs(self, field_name):\n        attrs_map = {\n            'subdivision': {\n                'url': 'subdivisions',\n                'parent': 'organization'\n            },\n            'department': {\n                'url': 'departments',\n                'parent': 'subdivision'\n            }\n        }\n        return attrs_map.get(field_name)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        field = super().formfield_for_foreignkey(db_field, request, **kwargs)\n        attrs = self.get_dependent_field_attrs(db_field.name)\n        if attrs:\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': f'/directory/ajax/{attrs[\"url\"]}/',\n                'data-parent-field': attrs[\"parent\"]\n            })\n        return field\n\n@admin.register(Equipment)\nclass EquipmentAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = [\n        'equipment_name',\n        'inventory_number',\n        'organization',\n        'subdivision',\n        'department'\n    ]\n    list_filter = ['organization', 'subdivision', 'department']\n    search_fields = ['equipment_name', 'inventory_number']\n    autocomplete_fields = ['organization', 'subdivision', 'department']\n\n    dependent_fields = {\n        'subdivision': 'organization',\n        'department': 'subdivision'\n    }\n\n    def get_dependent_field_attrs(self, field_name):\n        return DocumentAdmin.get_dependent_field_attrs(self, field_name)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        field = super().formfield_for_foreignkey(db_field, request, **kwargs)\n        attrs = self.get_dependent_field_attrs(db_field.name)\n        if attrs:\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': f'/directory/ajax/{attrs[\"url\"]}/',\n                'data-parent-field': attrs[\"parent\"]\n            })\n        return field\n\n@admin.register(Position)\nclass PositionAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = [\n        'position_name',\n        'organization',\n        'subdivision',\n        'department'\n    ]\n    list_filter = [\n        'organization',\n        'subdivision',\n        'department',\n        'is_responsible_for_safety',\n        'is_electrical_personnel'\n    ]\n    search_fields = ['position_name']\n    autocomplete_fields = ['organization', 'subdivision', 'department']\n    filter_horizontal = ['documents', 'equipment']\n\n    dependent_fields = {\n        'subdivision': 'organization',\n        'department': 'subdivision',\n        'documents': 'department',\n        'equipment': 'department'\n    }\n\n    def get_dependent_field_attrs(self, field_name):\n        attrs_map = {\n            'subdivision': {\n                'url': 'subdivisions',\n                'parent': 'organization'\n            },\n            'department': {\n                'url': 'departments',\n                'parent': 'subdivision'\n            },\n            'documents': {\n                'url': 'documents',\n                'parent': 'department'\n            },\n            'equipment': {\n                'url': 'equipment',\n                'parent': 'department'\n            }\n        }\n        return attrs_map.get(field_name)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        field = super().formfield_for_foreignkey(db_field, request, **kwargs)\n        attrs = self.get_dependent_field_attrs(db_field.name)\n        if attrs:\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': f'/directory/ajax/{attrs[\"url\"]}/',\n                'data-parent-field': attrs[\"parent\"]\n            })\n        return field\n\n    def formfield_for_manytomany(self, db_field, request, **kwargs):\n        field = super().formfield_for_manytomany(db_field, request, **kwargs)\n        attrs = self.get_dependent_field_attrs(db_field.name)\n        if attrs:\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': f'/directory/ajax/{attrs[\"url\"]}/',\n                'data-parent-field': attrs[\"parent\"]\n            })\n        return field\n\n@admin.register(Employee)\nclass EmployeeAdmin(DependentFieldsMixin, admin.ModelAdmin):\n    list_display = [\n        'full_name_nominative',\n        'organization',\n        'subdivision',\n        'department',\n        'position',\n        'is_contractor'\n    ]\n    list_filter = [\n        'organization',\n        'subdivision',\n        'department',\n        'position',\n        'is_contractor'\n    ]\n    search_fields = [\n        'full_name_nominative',\n        'full_name_dative',\n        'position__position_name'\n    ]\n    autocomplete_fields = [\n        'organization',\n        'subdivision',\n        'department',\n        'position'\n    ]\n\n    dependent_fields = {\n        'subdivision': 'organization',\n        'department': 'subdivision',\n        'position': 'department'\n    }\n\n    fieldsets = (\n        ('Основная информация', {\n            'fields': (\n                'full_name_nominative',\n                'full_name_dative',\n                'date_of_birth',\n                'place_of_residence'\n            )\n        }),\n        ('Место работы', {\n            'fields': (\n                'organization',\n                'subdivision',\n                'department',\n                'position'\n            )\n        }),\n        ('Дополнительная информация', {\n            'fields': (\n                'is_contractor',\n                'height',\n                'clothing_size',\n                'shoe_size'\n            )\n        }),\n    )\n\n    def get_dependent_field_attrs(self, field_name):\n        attrs_map = {\n            'subdivision': {\n                'url': 'subdivisions',\n                'parent': 'organization'\n            },\n            'department': {\n                'url': 'departments',\n                'parent': 'subdivision'\n            },\n            'position': {\n                'url': 'positions',\n                'parent': 'department'\n            }\n        }\n        return attrs_map.get(field_name)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        field = super().formfield_for_foreignkey(db_field, request, **kwargs)\n        attrs = self.get_dependent_field_attrs(db_field.name)\n        if attrs:\n            field.widget.attrs.update({\n                'class': 'dependent-field',\n                'data-ajax-url': f'/directory/ajax/{attrs[\"url\"]}/',\n                'data-parent-field': attrs[\"parent\"]\n            })\n        return field",
        "directory\\admin_mixins.py": "class DependentFieldsMixin:\n    dependent_fields = {}\n\n    class Media:\n        js = (\n            'admin/js/jquery.init.js',\n            'directory/js/dependent_fields.js',\n        )\n\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if request.GET:  # Фильтруем только если есть GET параметры\n            for field, parent_field in self.dependent_fields.items():\n                parent_value = request.GET.get(parent_field)\n                if parent_value:\n                    qs = qs.filter(**{parent_field: parent_value})\n        return qs\n\n    def get_form(self, request, obj=None, **kwargs):\n        form = super().get_form(request, obj, **kwargs)\n        if obj:\n            for child_field, parent_field in self.dependent_fields.items():\n                if hasattr(obj, parent_field) and child_field in form.base_fields:\n                    parent = getattr(obj, parent_field)\n                    if parent:\n                        form.base_fields[child_field].queryset = form.base_fields[child_field].queryset.filter(**{parent_field: parent})\n        return form",
        "directory\\ajax.py": "from django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nfrom directory.models import (\n    StructuralSubdivision,\n    Department,\n    Position,\n    Document,\n    Equipment\n)\n\n\n@login_required\ndef get_subdivisions(request):\n    \"\"\"AJAX view for getting subdivisions by organization\"\"\"\n    organization_id = request.GET.get('organization')\n    if not organization_id:\n        return JsonResponse([], safe=False)\n\n    subdivisions = StructuralSubdivision.objects.filter(\n        organization_id=organization_id\n    ).values('id', 'name')\n    return JsonResponse(list(subdivisions), safe=False)\n\n\n@login_required\ndef get_departments(request):\n    \"\"\"AJAX view for getting departments by organization and subdivision\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivision_id = request.GET.get('subdivision')\n\n    if not organization_id or not subdivision_id:\n        return JsonResponse([], safe=False)\n\n    departments = Department.objects.filter(\n        organization_id=organization_id,\n        subdivision_id=subdivision_id\n    ).values('id', 'name')\n    return JsonResponse(list(departments), safe=False)\n\n\n@login_required\ndef get_positions(request):\n    \"\"\"AJAX view for getting positions\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivision_id = request.GET.get('subdivision')\n    department_id = request.GET.get('department')\n\n    positions = Position.objects.filter(organization_id=organization_id)\n\n    if subdivision_id:\n        positions = positions.filter(subdivision_id=subdivision_id)\n    if department_id:\n        positions = positions.filter(department_id=department_id)\n\n    positions_data = list(positions.values('id', 'position_name'))\n    return JsonResponse(positions_data, safe=False)\n\n\n@login_required\ndef get_documents(request):\n    \"\"\"AJAX view for getting documents\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivision_id = request.GET.get('subdivision')\n    department_id = request.GET.get('department')\n\n    documents = Document.objects.filter(organization_id=organization_id)\n\n    if subdivision_id:\n        documents = documents.filter(subdivision_id=subdivision_id)\n    if department_id:\n        documents = documents.filter(department_id=department_id)\n\n    return JsonResponse(list(documents.values('id', 'name')), safe=False)\n\n\n@login_required\ndef get_equipment(request):\n    \"\"\"AJAX view for getting equipment\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivision_id = request.GET.get('subdivision')\n    department_id = request.GET.get('department')\n\n    equipment = Equipment.objects.filter(organization_id=organization_id)\n\n    if subdivision_id:\n        equipment = equipment.filter(subdivision_id=subdivision_id)\n    if department_id:\n        equipment = equipment.filter(department_id=department_id)\n\n    return JsonResponse(\n        list(equipment.values('id', 'equipment_name')),\n        safe=False\n    )",
        "directory\\apps.py": "from django.apps import AppConfig\n\nclass DirectoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'directory'\n    verbose_name = 'Справочники'\n\n    def ready(self):\n        \"\"\"Импорт сигналов при загрузке приложения.\"\"\"\n        import directory.signals  # будем создавать позже, если потребуется\n",
        "directory\\forms.py": "from django import forms\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Submit, Row, Column\nfrom directory.models import (\n    Organization,\n    StructuralSubdivision,\n    Department,\n    Document,\n    Equipment,\n    Position,\n    Employee\n)\n\nclass OrganizationForm(forms.ModelForm):\n    class Meta:\n        model = Organization\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Сохранить'))\n\nclass StructuralSubdivisionForm(forms.ModelForm):\n    class Meta:\n        model = StructuralSubdivision\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Сохранить'))\n\n        # Фильтруем доступные родительские подразделения\n        if self.instance.pk and self.instance.organization:\n            self.fields['parent'].queryset = (\n                StructuralSubdivision.objects\n                .filter(organization=self.instance.organization)\n                .exclude(pk=self.instance.pk)\n            )\n\nclass DepartmentForm(forms.ModelForm):\n    class Meta:\n        model = Department\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Сохранить'))\n\n        # Фильтруем подразделения по выбранной организации\n        if self.instance.pk and self.instance.organization:\n            self.fields['subdivision'].queryset = (\n                StructuralSubdivision.objects\n                .filter(organization=self.instance.organization)\n            )\n\n\nclass PositionForm(forms.ModelForm):\n    class Meta:\n        model = Position\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Сохранить'))\n\n        # Если есть экземпляр и организация\n        if self.instance.pk and self.instance.organization:\n            # Фильтруем подразделения по организации\n            self.fields['subdivision'].queryset = (\n                StructuralSubdivision.objects\n                .filter(organization=self.instance.organization)\n            )\n\n            # Фильтруем отделы по организации\n            self.fields['department'].queryset = (\n                Department.objects\n                .filter(organization=self.instance.organization)\n            )\n\n            # Фильтруем документы по организации и подразделению\n            if self.instance.subdivision:\n                self.fields['documents'].queryset = (\n                    Document.objects\n                    .filter(\n                        organization=self.instance.organization,\n                        subdivision=self.instance.subdivision\n                    )\n                )\n                if self.instance.department:\n                    # Дополнительно фильтруем по отделу, если он указан\n                    self.fields['documents'].queryset = (\n                        self.fields['documents'].queryset\n                        .filter(department=self.instance.department)\n                    )\n\n            # Фильтруем оборудование по организации и подразделению\n            if self.instance.subdivision:\n                self.fields['equipment'].queryset = (\n                    Equipment.objects\n                    .filter(\n                        organization=self.instance.organization,\n                        subdivision=self.instance.subdivision\n                    )\n                )\n                if self.instance.department:\n                    # Дополнительно фильтруем по отделу, если он указан\n                    self.fields['equipment'].queryset = (\n                        self.fields['equipment'].queryset\n                        .filter(department=self.instance.department)\n                    )\n\n    def clean(self):\n        \"\"\"\n        Дополнительная валидация для проверки корректности иерархии\n        \"\"\"\n        cleaned_data = super().clean()\n        organization = cleaned_data.get('organization')\n        subdivision = cleaned_data.get('subdivision')\n        department = cleaned_data.get('department')\n\n        if subdivision and subdivision.organization != organization:\n            raise forms.ValidationError(\n                'Выбранное подразделение не принадлежит выбранной организации'\n            )\n\n        if department:\n            if department.organization != organization:\n                raise forms.ValidationError(\n                    'Выбранный отдел не принадлежит выбранной организации'\n                )\n            if department.subdivision != subdivision:\n                raise forms.ValidationError(\n                    'Выбранный отдел не принадлежит выбранному подразделению'\n                )\n\n        return cleaned_data\n\nclass EmployeeForm(forms.ModelForm):\n    class Meta:\n        model = Employee\n        fields = '__all__'\n        widgets = {\n            'date_of_birth': forms.DateInput(attrs={'type': 'date'}),\n        }\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.add_input(Submit('submit', 'Сохранить'))\n\n        # Если выбрана должность, фильтруем подразделения\n        if self.instance.pk and self.instance.position:\n            self.fields['subdivision'].queryset = (\n                StructuralSubdivision.objects\n                .filter(organization=self.instance.position.organization)\n            )",
        "directory\\signals.py": "from django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom directory.models import Employee, Position, StructuralSubdivision\n\n@receiver(post_save, sender=Position)\ndef update_employee_subdivision(sender, instance, **kwargs):\n    \"\"\"\n    Обновляет подразделение у сотрудников при изменении подразделения должности.\n    \"\"\"\n    if instance.subdivision:\n        Employee.objects.filter(\n            position=instance,\n            structural_subdivision__isnull=True\n        ).update(structural_subdivision=instance.subdivision)\n\n@receiver(post_save, sender=StructuralSubdivision)\ndef update_departments(sender, instance, **kwargs):\n    \"\"\"\n    Обновляет организацию в отделах при изменении организации подразделения.\n    \"\"\"\n    instance.departments.all().update(organization=instance.organization)",
        "directory\\urls.py": "from django.urls import path\nfrom . import views\nfrom .ajax import (\n    get_subdivisions,\n    get_departments,\n    get_positions,\n    get_documents,\n    get_equipment\n)\nfrom .views import (\n    EmployeeListView,\n    EmployeeCreateView,\n    EmployeeUpdateView,\n    EmployeeDeleteView,\n    PositionListView,\n    PositionCreateView,\n    PositionUpdateView,\n    PositionDeleteView,\n)\n\napp_name = 'directory'\n\nurlpatterns = [\n    # AJAX URLs\n    path('ajax/subdivisions/', get_subdivisions, name='ajax_subdivisions'),\n    path('ajax/departments/', get_departments, name='ajax_departments'),\n    path('ajax/positions/', get_positions, name='ajax_positions'),\n    path('ajax/documents/', get_documents, name='ajax_documents'),\n    path('ajax/equipment/', get_equipment, name='ajax_equipment'),\n\n    # Employee URLs\n    path('employees/', EmployeeListView.as_view(), name='employee_list'),\n    path('employees/create/', EmployeeCreateView.as_view(), name='employee_create'),\n    path('employees/<int:pk>/update/', EmployeeUpdateView.as_view(), name='employee_update'),\n    path('employees/<int:pk>/delete/', EmployeeDeleteView.as_view(), name='employee_delete'),\n\n    # Position URLs\n    path('positions/', PositionListView.as_view(), name='position_list'),\n    path('positions/create/', PositionCreateView.as_view(), name='position_create'),\n    path('positions/<int:pk>/update/', PositionUpdateView.as_view(), name='position_update'),\n    path('positions/<int:pk>/delete/', PositionDeleteView.as_view(), name='position_delete'),\n]",
        "directory\\utils.py": "from django.db.models import Q\nfrom directory.models import StructuralSubdivision\n\n\ndef get_subdivision_tree(organization_id):\n    \"\"\"Получает дерево подразделений для организации.\"\"\"\n    return StructuralSubdivision.objects.filter(\n        organization_id=organization_id\n    ).select_related('parent_subdivision')\n\n\ndef get_child_subdivisions(subdivision_id):\n    \"\"\"Рекурсивно получает все дочерние подразделения.\"\"\"\n    subdivisions = []\n    children = StructuralSubdivision.objects.filter(parent_subdivision_id=subdivision_id)\n\n    for child in children:\n        subdivisions.append(child)\n        subdivisions.extend(get_child_subdivisions(child.id))\n\n    return subdivisions\n\n\ndef search_employees(query):\n    \"\"\"Поиск сотрудников по различным критериям.\"\"\"\n    return Q(full_name_nominative__icontains=query) | \\\n        Q(full_name_dative__icontains=query) | \\\n        Q(position__position_name__icontains=query) | \\\n        Q(structural_subdivision__name__icontains=query)",
        "directory\\views.py": "from django.views.generic import (\n    ListView,\n    CreateView,\n    UpdateView,\n    DeleteView,\n    TemplateView\n)\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.urls import reverse_lazy\nfrom django.http import JsonResponse\nfrom .models import (\n    Position,\n    Organization,\n    StructuralSubdivision,  # Изменено с Subdivision на StructuralSubdivision\n    Department,\n    Employee\n)\n\nclass HomeView(TemplateView):\n    \"\"\"Представление главной страницы\"\"\"\n    template_name = 'directory/home.html'\n\n# Представления для сотрудников\nclass EmployeeListView(LoginRequiredMixin, ListView):\n    \"\"\"Представление списка сотрудников\"\"\"\n    model = Employee\n    template_name = 'directory/employees/list.html'\n    context_object_name = 'employees'\n\n    def get_queryset(self):\n        return Employee.objects.all().order_by('full_name')\n\nclass EmployeeCreateView(LoginRequiredMixin, CreateView):\n    \"\"\"Представление для создания нового сотрудника\"\"\"\n    model = Employee\n    template_name = 'directory/employees/form.html'\n    fields = ['full_name', 'subdivision', 'position', 'date_of_employment', 'salary']\n    success_url = reverse_lazy('directory:employee-list')\n\nclass EmployeeUpdateView(LoginRequiredMixin, UpdateView):\n    \"\"\"Представление для редактирования существующего сотрудника\"\"\"\n    model = Employee\n    template_name = 'directory/employees/form.html'\n    fields = ['full_name', 'subdivision', 'position', 'date_of_employment', 'salary']\n    success_url = reverse_lazy('directory:employee-list')\n\nclass EmployeeDeleteView(LoginRequiredMixin, DeleteView):\n    \"\"\"Представление для удаления сотрудника\"\"\"\n    model = Employee\n    template_name = 'directory/employees/confirm_delete.html'\n    success_url = reverse_lazy('directory:employee-list')\n\n# Представления для должностей\nclass PositionListView(LoginRequiredMixin, ListView):\n    \"\"\"Представление списка должностей с фильтрацией и пагинацией\"\"\"\n    model = Position\n    template_name = 'directory/positions/list.html'\n    context_object_name = 'positions'\n    paginate_by = 10\n\n    def get_queryset(self):\n        queryset = Position.objects.select_related(\n            'organization',\n            'subdivision',\n            'department'\n        ).order_by('position_name')\n\n        organization_id = self.request.GET.get('organization')\n        subdivision_id = self.request.GET.get('subdivision')\n\n        if organization_id:\n            queryset = queryset.filter(organization_id=organization_id)\n        if subdivision_id:\n            queryset = queryset.filter(subdivision_id=subdivision_id)\n\n        return queryset\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context.update({\n            'title': 'Должности',\n            'selected_organization': self.request.GET.get('organization'),\n            'selected_subdivision': self.request.GET.get('subdivision'),\n            'organizations': Organization.objects.all().order_by('full_name_ru'),\n            'subdivisions': StructuralSubdivision.objects.all().order_by('name'),  # Изменено\n        })\n        return context\n\nclass PositionCreateView(LoginRequiredMixin, CreateView):\n    \"\"\"Представление для создания новой должности\"\"\"\n    model = Position\n    template_name = 'directory/positions/form.html'\n    fields = ['position_name', 'organization', 'subdivision', 'department', 'electrical_safety_group']\n    success_url = reverse_lazy('directory:position-list')\n\nclass PositionUpdateView(LoginRequiredMixin, UpdateView):\n    \"\"\"Представление для редактирования существующей должности\"\"\"\n    model = Position\n    template_name = 'directory/positions/form.html'\n    fields = ['position_name', 'organization', 'subdivision', 'department', 'electrical_safety_group']\n    success_url = reverse_lazy('directory:position-list')\n\nclass PositionDeleteView(LoginRequiredMixin, DeleteView):\n    \"\"\"Представление для удаления должности\"\"\"\n    model = Position\n    template_name = 'directory/positions/confirm_delete.html'\n    success_url = reverse_lazy('directory:position-list')\n\n# AJAX представления\ndef get_subdivisions(request):\n    \"\"\"Получение списка подразделений по организации\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivisions = StructuralSubdivision.objects.filter(  # Изменено\n        organization_id=organization_id\n    ).order_by('name')\n    data = [{'id': s.id, 'name': s.name} for s in subdivisions]\n    return JsonResponse(data, safe=False)\n\ndef get_positions(request):\n    \"\"\"Получение списка должностей по подразделению\"\"\"\n    subdivision_id = request.GET.get('subdivision')\n    positions = Position.objects.filter(\n        subdivision_id=subdivision_id\n    ).order_by('position_name')\n    data = [{'id': p.id, 'name': p.position_name} for p in positions]\n    return JsonResponse(data, safe=False)\n\ndef get_departments(request):\n    \"\"\"Получение списка отделов по подразделению\"\"\"\n    subdivision_id = request.GET.get('subdivision')\n    departments = Department.objects.filter(\n        subdivision_id=subdivision_id\n    ).order_by('name')\n    data = [{'id': d.id, 'name': d.name} for d in departments]\n    return JsonResponse(data, safe=False)",
        "directory\\__init__.py": "",
        "directory\\models\\department.py": "from django.db import models\nfrom .organization import Organization\nfrom .subdivision import StructuralSubdivision\n\nclass Department(models.Model):\n    \"\"\"Отдел - опциональный третий уровень иерархии\"\"\"\n    name = models.CharField(\"Наименование\", max_length=255)\n    short_name = models.CharField(\"Сокращенное наименование\", max_length=255, blank=True)\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        related_name=\"departments\",\n        verbose_name=\"Организация\"\n    )\n    subdivision = models.ForeignKey(\n        StructuralSubdivision,\n        on_delete=models.CASCADE,  # Если удаляем подразделение, удаляем и отделы\n        related_name=\"departments\",\n        verbose_name=\"Структурное подразделение\"\n    )\n\n    class Meta:\n        verbose_name = \"Отдел\"\n        verbose_name_plural = \"Отделы\"",
        "directory\\models\\document.py": "from django.db import models\nfrom .organization import Organization\nfrom .subdivision import StructuralSubdivision\nfrom .department import Department\n\nclass Document(models.Model):\n    \"\"\"Справочник: Документы (реестр документов)\"\"\"\n    name = models.CharField(\n        \"Наименование документа\",\n        max_length=255\n    )\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        related_name=\"documents\",\n        verbose_name=\"Организация\"\n    )\n    subdivision = models.ForeignKey(\n        StructuralSubdivision,\n        on_delete=models.CASCADE,\n        related_name=\"documents\",\n        verbose_name=\"Структурное подразделение\"\n    )\n    department = models.ForeignKey(\n        Department,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"documents\",\n        verbose_name=\"Отдел\"\n    )\n\n    def __str__(self):\n        return f\"{self.name} ({self.organization.short_name_by})\"\n\n    class Meta:\n        verbose_name = \"Документ\"\n        verbose_name_plural = \"Документы\"\n",
        "directory\\models\\employee.py": "# directory/models/employee.py\n\nfrom django.db import models\nfrom .position import Position\nfrom .organization import Organization\nfrom .subdivision import StructuralSubdivision\nfrom .department import Department\n\nclass Employee(models.Model):\n    \"\"\"Справочник: Сотрудники.\"\"\"\n    HEIGHT_CHOICES = [\n        (\"158-164 см\", \"158-164 см\"),\n        (\"170-176 см\", \"170-176 см\"),\n        (\"182-188 см\", \"182-188 см\"),\n        (\"194-200 см\", \"194-200 см\"),\n    ]\n\n    CLOTHING_SIZE_CHOICES = [\n        (\"44-46\", \"44-46\"),\n        (\"48-50\", \"48-50\"),\n        (\"52-54\", \"52-54\"),\n        (\"56-58\", \"56-58\"),\n        (\"60-62\", \"60-62\"),\n        (\"64-66\", \"64-66\"),\n    ]\n\n    SHOE_SIZE_CHOICES = [(str(i), str(i)) for i in range(36, 49)]\n\n    # Основные поля\n    full_name_nominative = models.CharField(\n        max_length=255,\n        verbose_name=\"ФИО (именительный)\"\n    )\n    full_name_dative = models.CharField(\n        max_length=255,\n        verbose_name=\"ФИО (дательный)\"\n    )\n    date_of_birth = models.DateField(verbose_name=\"Дата рождения\")\n\n    # Иерархия с обязательными полями\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        verbose_name=\"Организация\",\n        related_name='employees'\n    )\n    subdivision = models.ForeignKey(\n        StructuralSubdivision,\n        on_delete=models.CASCADE,\n        verbose_name=\"Структурное подразделение\",\n        related_name='employees'\n    )\n    department = models.ForeignKey(\n        Department,\n        on_delete=models.CASCADE,\n        verbose_name=\"Отдел\",\n        related_name='employees'\n    )\n    position = models.ForeignKey(\n        Position,\n        on_delete=models.PROTECT,\n        related_name=\"employees\",\n        verbose_name=\"Должность\"\n    )\n\n    # Остальные поля\n    place_of_residence = models.TextField(verbose_name=\"Место проживания\")\n    height = models.CharField(\n        max_length=15,\n        choices=HEIGHT_CHOICES,\n        blank=True,\n        verbose_name=\"Рост\"\n    )\n    clothing_size = models.CharField(\n        max_length=5,\n        choices=CLOTHING_SIZE_CHOICES,\n        blank=True,\n        verbose_name=\"Размер одежды\"\n    )\n    shoe_size = models.CharField(\n        max_length=2,\n        choices=SHOE_SIZE_CHOICES,\n        blank=True,\n        verbose_name=\"Размер обуви\"\n    )\n    is_contractor = models.BooleanField(\n        default=False,\n        verbose_name=\"Договор подряда\"\n    )\n\n    def __str__(self):\n        return self.full_name_nominative\n\n    class Meta:\n        verbose_name = \"Сотрудник\"\n        verbose_name_plural = \"Сотрудники\"",
        "directory\\models\\equipment.py": "from django.db import models\nfrom .organization import Organization\nfrom .subdivision import StructuralSubdivision\nfrom .department import Department\n\nclass Equipment(models.Model):\n    \"\"\"Справочник: Оборудование\"\"\"\n    equipment_name = models.CharField(\n        \"Наименование оборудования\",\n        max_length=255\n    )\n    inventory_number = models.CharField(\n        \"Инвентарный номер\",\n        max_length=100,\n        unique=True\n    )\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        related_name=\"equipment\",\n        verbose_name=\"Организация\"\n    )\n    subdivision = models.ForeignKey(\n        StructuralSubdivision,\n        on_delete=models.CASCADE,\n        related_name=\"equipment\",\n        verbose_name=\"Структурное подразделение\"\n    )\n    department = models.ForeignKey(\n        Department,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"equipment\",\n        verbose_name=\"Отдел\"\n    )\n\n    def __str__(self):\n        return f\"{self.equipment_name} (инв.№ {self.inventory_number})\"\n\n    class Meta:\n        verbose_name = \"Оборудование\"\n        verbose_name_plural = \"Оборудование\"",
        "directory\\models\\organization.py": "from django.db import models\n\nclass Organization(models.Model):\n    \"\"\"Справочник: Организации.\"\"\"\n    full_name_ru = models.CharField(max_length=255, verbose_name=\"Полное наименование (рус)\")\n    requisites_ru = models.TextField(verbose_name=\"Реквизиты (рус)\")\n    full_name_by = models.CharField(max_length=255, verbose_name=\"Полное наименование (бел)\")\n    short_name_by = models.CharField(max_length=255, verbose_name=\"Сокращенное наименование (бел)\")\n    requisites_by = models.TextField(verbose_name=\"Реквизиты (бел)\")\n\n    def __str__(self):\n        return self.full_name_ru\n\n    class Meta:\n        verbose_name = \"Организация\"\n        verbose_name_plural = \"Организации\"\n",
        "directory\\models\\position.py": "from django.db import models\nfrom .organization import Organization\nfrom .subdivision import StructuralSubdivision\nfrom .department import Department\nfrom .document import Document\nfrom .equipment import Equipment\n\nclass Position(models.Model):\n    \"\"\"Справочник: Профессии и должности.\"\"\"\n    ELECTRICAL_GROUP_CHOICES = [\n        (\"I\", \"I\"),\n        (\"II\", \"II\"),\n        (\"III\", \"III\"),\n        (\"IV\", \"IV\"),\n        (\"V\", \"V\"),\n    ]\n\n    # Основные поля связей\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        related_name=\"positions\",\n        verbose_name=\"Организация\"\n    )\n    subdivision = models.ForeignKey(\n        StructuralSubdivision,\n        on_delete=models.CASCADE,  # Изменили на CASCADE\n        related_name=\"positions\",\n        verbose_name=\"Структурное подразделение\"\n    )\n    department = models.ForeignKey(\n        Department,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name=\"positions\",\n        verbose_name=\"Отдел\"\n    )\n\n    # Остальные поля\n    position_name = models.CharField(max_length=255, verbose_name=\"Название\")\n    safety_instructions_numbers = models.CharField(\n        max_length=255,\n        blank=True,\n        verbose_name=\"Номера инструкций по ОТ\"\n    )\n    electrical_safety_group = models.CharField(\n        max_length=4,\n        choices=ELECTRICAL_GROUP_CHOICES,\n        blank=True,\n        verbose_name=\"Группа по электробезопасности\"\n    )\n    internship_period_days = models.PositiveIntegerField(\n        default=0,\n        verbose_name=\"Срок стажировки (дни)\"\n    )\n    is_responsible_for_safety = models.BooleanField(\n        default=False,\n        verbose_name=\"Ответственный за ОТ\"\n    )\n    is_electrical_personnel = models.BooleanField(\n        default=False,\n        verbose_name=\"Электротехнический персонал\"\n    )\n    documents = models.ManyToManyField(\n        Document,\n        blank=True,\n        related_name=\"positions\",\n        verbose_name=\"Документы\"\n    )\n    equipment = models.ManyToManyField(\n        Equipment,\n        blank=True,\n        related_name=\"positions\",\n        verbose_name=\"Оборудование\"\n    )\n\n    def __str__(self):\n        return self.position_name\n\n    class Meta:\n        verbose_name = \"Профессия/должность\"\n        verbose_name_plural = \"Профессии/должности\"",
        "directory\\models\\subdivision.py": "from django.db import models\nfrom .organization import Organization\n\n\nclass StructuralSubdivision(models.Model):\n    \"\"\"Структурное подразделение - второй уровень иерархии\"\"\"\n    name = models.CharField(\"Наименование\", max_length=255)\n    short_name = models.CharField(\"Сокращенное наименование\", max_length=255, blank=True)\n    organization = models.ForeignKey(\n        Organization,\n        on_delete=models.CASCADE,\n        related_name=\"subdivisions\",\n        verbose_name=\"Организация\"\n    )\n\n    class Meta:\n        verbose_name = \"Структурное подразделение\"\n        verbose_name_plural = \"Структурные подразделения\"\n\n    def __str__(self):\n        return f\"{self.name} ({self.organization.full_name_ru})\"",
        "directory\\models\\__init__.py": "from .organization import Organization\nfrom .subdivision import StructuralSubdivision\nfrom .department import Department\nfrom .document import Document\nfrom .equipment import Equipment\nfrom .position import Position\nfrom .employee import Employee\n\n__all__ = [\n    'Organization',\n    'StructuralSubdivision',\n    'Department',\n    'Document',\n    'Equipment',\n    'Position',\n    'Employee',\n]\n",
        "directory\\static\\directory\\js\\admin_dependent_dropdowns.js": "(function($) {\n    'use strict';\n\n    function updateSelect(url, parentValue, childSelect, additionalData = {}) {\n        if (!parentValue) {\n            childSelect.html('<option value=\"\">---------</option>');\n            childSelect.prop('disabled', true);\n            return;\n        }\n\n        $.ajax({\n            url: url,\n            data: { ...additionalData },\n            success: function(data) {\n                let options = '<option value=\"\">---------</option>';\n                data.forEach(function(item) {\n                    const name = item.position_name || item.name || item.equipment_name;\n                    options += `<option value=\"${item.id}\">${name}</option>`;\n                });\n                childSelect.html(options);\n                childSelect.prop('disabled', false);\n            },\n            error: function(error) {\n                console.error('Error fetching data:', error);\n                childSelect.html('<option value=\"\">---------</option>');\n                childSelect.prop('disabled', true);\n            }\n        });\n    }\n\n    $(document).ready(function() {\n        // Обработчик изменения организации\n        $('#id_organization').change(function() {\n            const organizationId = $(this).val();\n            const data = { organization: organizationId };\n\n            // Обновляем подразделения\n            updateSelect('/directory/ajax/subdivisions/', organizationId, $('#id_subdivision'), data);\n\n            // Сбрасываем зависимые поля\n            $('#id_department').html('<option value=\"\">---------</option>').prop('disabled', true);\n            $('#id_position').html('<option value=\"\">---------</option>').prop('disabled', true);\n\n            // Очищаем множественные поля если они есть\n            if ($('#id_documents').length) {\n                $('#id_documents').val([]);\n            }\n            if ($('#id_equipment').length) {\n                $('#id_equipment').val([]);\n            }\n        });\n\n        // Обработчик изменения подразделения\n        $('#id_subdivision').change(function() {\n            const subdivisionId = $(this).val();\n            const organizationId = $('#id_organization').val();\n            const data = {\n                subdivision: subdivisionId,\n                organization: organizationId\n            };\n\n            // Обновляем отделы\n            updateSelect('/directory/ajax/departments/', subdivisionId, $('#id_department'), data);\n\n            // Сбрасываем зависимые поля\n            $('#id_position').html('<option value=\"\">---------</option>').prop('disabled', true);\n\n            // Обновляем документы и оборудование если они есть\n            if ($('#id_documents').length) {\n                updateSelect('/directory/ajax/documents/', subdivisionId, $('#id_documents'), data);\n            }\n            if ($('#id_equipment').length) {\n                updateSelect('/directory/ajax/equipment/', subdivisionId, $('#id_equipment'), data);\n            }\n        });\n\n        // Обработчик изменения отдела\n        $('#id_department').change(function() {\n            const departmentId = $(this).val();\n            const organizationId = $('#id_organization').val();\n            const subdivisionId = $('#id_subdivision').val();\n            const data = {\n                department: departmentId,\n                organization: organizationId,\n                subdivision: subdivisionId\n            };\n\n            // Обновляем должности\n            if ($('#id_position').length) {\n                updateSelect('/directory/ajax/positions/', departmentId, $('#id_position'), data);\n            }\n\n            // Обновляем документы и оборудование если они есть\n            if ($('#id_documents').length) {\n                updateSelect('/directory/ajax/documents/', departmentId, $('#id_documents'), data);\n            }\n            if ($('#id_equipment').length) {\n                updateSelect('/directory/ajax/equipment/', departmentId, $('#id_equipment'), data);\n            }\n        });\n\n        // Инициализация при загрузке страницы\n        if ($('#id_organization').val()) {\n            $('#id_organization').trigger('change');\n            // Если есть выбранное подразделение, тригерим и его изменение\n            setTimeout(function() {\n                if ($('#id_subdivision').val()) {\n                    $('#id_subdivision').trigger('change');\n                }\n            }, 100);\n        }\n    });\n})(django.jQuery);",
        "directory\\static\\directory\\js\\custom_dynamic_forms.js": "// Утилиты для отображения индикатора загрузки\nconst utils = {\n    showLoading: function (element) {\n        $(element).prop('disabled', true)\n            .append('<span class=\"spinner-border spinner-border-sm ms-1\" role=\"status\" aria-hidden=\"true\"></span>');\n    },\n    hideLoading: function (element) {\n        $(element).prop('disabled', false).find('.spinner-border').remove();\n    }\n};\n\n// Функции обновления списков\nconst updaters = {\n    subdivisions: function (organizationId, targetSelect) {\n        utils.showLoading(targetSelect);\n\n        $.ajax({\n            url: '/api/subdivisions/',\n            data: {organization: organizationId},\n            success: function (data) {\n                let options = '<option value=\"\">Выберите подразделение</option>';\n                data.forEach(item => {\n                    options += `<option value=\"${item.id}\">${item.name}</option>`;\n                });\n                $(targetSelect).html(options).prop('disabled', false);\n                $(targetSelect).trigger('change');\n            },\n            error: function (xhr, status, error) {\n                console.error('Ошибка при загрузке подразделений:', error);\n                $(targetSelect).html('<option value=\"\">Ошибка загрузки</option>').prop('disabled', false);\n            },\n            complete: function () {\n                utils.hideLoading(targetSelect);\n            }\n        });\n    },\n\n    departments: function (organizationId, subdivisionId, targetSelect) {\n        utils.showLoading(targetSelect);\n\n        $.ajax({\n            url: '/api/departments/',\n            data: {organization: organizationId, subdivision: subdivisionId},\n            success: function (data) {\n                let options = '<option value=\"\">Выберите отдел</option>';\n                data.forEach(item => {\n                    options += `<option value=\"${item.id}\">${item.name}</option>`;\n                });\n                $(targetSelect).html(options).prop('disabled', false);\n                $(targetSelect).trigger('change');\n            },\n            error: function (xhr, status, error) {\n                console.error('Ошибка при загрузке отделов:', error);\n                $(targetSelect).html('<option value=\"\">Ошибка загрузки</option>').prop('disabled', false);\n            },\n            complete: function () {\n                utils.hideLoading(targetSelect);\n            }\n        });\n    },\n\n    positions: function (organizationId, subdivisionId, departmentId, targetSelect) {\n        utils.showLoading(targetSelect);\n\n        $.ajax({\n            url: '/api/positions/',\n            data: {organization: organizationId, subdivision: subdivisionId, department: departmentId},\n            success: function (data) {\n                let options = '<option value=\"\">Выберите должность</option>';\n                data.forEach(item => {\n                    options += `<option value=\"${item.id}\">${item.position_name}</option>`;\n                });\n                $(targetSelect).html(options).prop('disabled', false);\n            },\n            error: function (xhr, status, error) {\n                console.error('Ошибка при загрузке должностей:', error);\n                $(targetSelect).html('<option value=\"\">Ошибка загрузки</option>').prop('disabled', false);\n            },\n            complete: function () {\n                utils.hideLoading(targetSelect);\n            }\n        });\n    }\n};\n\n$(document).ready(function () {\n    const $organization = $('#id_organization');\n    const $subdivision = $('#id_subdivision');\n    const $department = $('#id_department');\n    const $position = $('#id_position');\n\n    // Обработчики изменения селектов\n    $organization.change(function () {\n        const organizationId = $(this).val();\n        updaters.subdivisions(organizationId, '#id_subdivision');\n        $('#id_department').html('<option value=\"\">---------</option>').prop('disabled', true);\n        $('#id_position').html('<option value=\"\">---------</option>').prop('disabled', true);\n    });\n\n    $subdivision.change(function () {\n        const organizationId = $organization.val();\n        const subdivisionId = $(this).val();\n        updaters.departments(organizationId, subdivisionId, '#id_department');\n        $('#id_position').html('<option value=\"\">---------</option>').prop('disabled', true);\n    });\n\n    $department.change(function () {\n        const organizationId = $organization.val();\n        const subdivisionId = $subdivision.val();\n        const departmentId = $(this).val();\n        updaters.positions(organizationId, subdivisionId, departmentId, '#id_position');\n    });\n\n    // Инициализация при загрузке\n    if ($organization.val()) {\n        $organization.trigger('change');\n    }\n\n    if ($subdivision.val()) {\n        $subdivision.trigger('change');\n    }\n\n    if ($department.val()) {\n        $department.trigger('change');\n    }\n});\n",
        "directory\\static\\directory\\js\\dependent_fields.js": "(function($) {\n    'use strict';\n\n    function updateSelect(url, parentField, parentValue, childSelect) {\n        if (!parentValue) {\n            childSelect.html('<option value=\"\">---------</option>');\n            childSelect.prop('disabled', true);\n            return;\n        }\n\n        $.ajax({\n            url: url,\n            type: 'GET', // Explicitly set the request type to GET\n            data: { [parentField]: parentValue },\n            success: function(data) {\n                let options = '<option value=\"\">---------</option>';\n                data.forEach(function(item) {\n                    const name = item.position_name || item.name || item.equipment_name;\n                    options += `<option value=\"${item.id}\">${name}</option>`;\n                });\n                childSelect.html(options);\n                childSelect.prop('disabled', false);\n            },\n            error: function(error) {\n                console.error('Error fetching data:', error);\n                childSelect.html('<option value=\"\">---------</option>');\n                childSelect.prop('disabled', true);\n            }\n        });\n    }\n\n    $(document).ready(function() {\n        $('#id_organization').change(function() {\n            const organizationId = $(this).val();\n            updateSelect('/directory/ajax/subdivisions/', 'organization', organizationId, $('#id_subdivision'));\n\n            // Reset dependent fields\n            $('#id_department').html('<option value=\"\">---------</option>').prop('disabled', true);\n            $('#id_position').html('<option value=\"\">---------</option>').prop('disabled', true);\n            // ... (rest of the code)\n        });\n\n        $('#id_subdivision').change(function() {\n            const subdivisionId = $(this).val();\n            const organizationId = $('#id_organization').val();\n\n            updateSelect('/directory/ajax/departments/', 'subdivision', subdivisionId, $('#id_department'));\n            // ... (rest of the code)\n        });\n\n        $('#id_department').change(function() {\n            const departmentId = $(this).val();\n            updateSelect('/directory/ajax/positions/', 'department', departmentId, $('#id_position'));\n            // ... (rest of the code)\n        });\n\n\n        // Initialize on page load\n        if ($('#id_organization').val()) {\n            $('#id_organization').trigger('change');\n            setTimeout(function() {\n                if ($('#id_subdivision').val()) {\n                    $('#id_subdivision').trigger('change');\n\n                    setTimeout(function() {\n                        if ($('#id_department').val()) {\n                            $('#id_department').trigger('change');\n                        }\n                    }, 100);\n                }\n            }, 100);\n        }\n    });\n})(django.jQuery);\n",
        "directory\\static\\directory\\js\\main.js": "// Функция для обновления списка подразделений\nfunction updateSubdivisions(organizationId, targetSelect) {\n    if (!organizationId) {\n        $(targetSelect).html('<option value=\"\">---------</option>');\n        return;\n    }\n\n    $.ajax({\n        url: '/api/subdivisions/',\n        data: { organization: organizationId },\n        success: function(data) {\n            let options = '<option value=\"\">---------</option>';\n            data.forEach(item => {\n                options += `<option value=\"${item.id}\">${item.name}</option>`;\n            });\n            $(targetSelect).html(options);\n        }\n    });\n}\n\n// Функция для обновления списка должностей\nfunction updatePositions(subdivisionId, targetSelect) {\n    if (!subdivisionId) {\n        $(targetSelect).html('<option value=\"\">---------</option>');\n        return;\n    }\n\n    $.ajax({\n        url: '/api/positions/',\n        data: { subdivision: subdivisionId },\n        success: function(data) {\n            let options = '<option value=\"\">---------</option>';\n            data.forEach(item => {\n                options += `<option value=\"${item.id}\">${item.name}</option>`;\n            });\n            $(targetSelect).html(options);\n        }\n    });\n}\n\n// Инициализация всплывающих подсказок Bootstrap\n$(function () {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n});\n\n// Автоматическое скрытие сообщений об успехе\n$(document).ready(function() {\n    setTimeout(function() {\n        $('.alert-success').fadeOut('slow');\n    }, 3000);\n});\n\n// Подтверждение удаления\nfunction confirmDelete(event, message) {\n    if (!confirm(message || 'Вы уверены, что хотите удалить этот элемент?')) {\n        event.preventDefault();\n    }\n}",
        "directory\\views\\employees.py": "from django.views.generic import ListView, CreateView, UpdateView, DeleteView\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.urls import reverse_lazy\nfrom django.http import JsonResponse\nfrom directory.models import Employee, StructuralSubdivision, Position\nfrom directory.forms import EmployeeForm\n\n\nclass EmployeeListView(LoginRequiredMixin, ListView):\n    model = Employee\n    template_name = 'directory/employees/list.html'\n    context_object_name = 'employees'\n    paginate_by = 20\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Фильтрация\n        subdivision = self.request.GET.get('subdivision')\n        if subdivision:\n            queryset = queryset.filter(subdivision_id=subdivision)\n\n        position = self.request.GET.get('position')\n        if position:\n            queryset = queryset.filter(position_id=position)\n\n        search = self.request.GET.get('search')\n        if search:\n            queryset = queryset.filter(full_name_nominative__icontains=search)\n\n        return queryset.select_related('position', 'subdivision')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Сотрудники'\n        context['subdivisions'] = StructuralSubdivision.objects.all()\n        context['positions'] = Position.objects.all()\n        return context\n\n\nclass EmployeeCreateView(LoginRequiredMixin, CreateView):\n    model = Employee\n    form_class = EmployeeForm\n    template_name = 'directory/employees/form.html'\n    success_url = reverse_lazy('directory:employee-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Добавление сотрудника'\n        return context\n\n\nclass EmployeeUpdateView(LoginRequiredMixin, UpdateView):\n    model = Employee\n    form_class = EmployeeForm\n    template_name = 'directory/employees/form.html'\n    success_url = reverse_lazy('employee-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Редактирование сотрудника'\n        return context\n\n\nclass EmployeeDeleteView(LoginRequiredMixin, DeleteView):\n    model = Employee\n    template_name = 'directory/employees/confirm_delete.html'\n    success_url = reverse_lazy('employee-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Удаление сотрудника'\n        return context\n\n\ndef get_subdivisions(request):\n    \"\"\"AJAX представление для получения подразделений по организации\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivisions = StructuralSubdivision.objects.filter(\n        organization_id=organization_id\n    ).values('id', 'name')\n    return JsonResponse(list(subdivisions), safe=False)\n\n\ndef get_positions(request):\n    \"\"\"AJAX представление для получения должностей по подразделению\"\"\"\n    subdivision_id = request.GET.get('subdivision')\n    positions = Position.objects.filter(\n        subdivision_id=subdivision_id\n    ).values('id', 'name')\n    return JsonResponse(list(positions), safe=False)",
        "directory\\views\\positions.py": "from django.views.generic import ListView, CreateView, UpdateView, DeleteView\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.urls import reverse_lazy\nfrom django.http import JsonResponse\nfrom directory.models import Position, Organization, StructuralSubdivision, Department  # добавляем Department\nfrom directory.forms import PositionForm\n\nclass PositionListView(LoginRequiredMixin, ListView):\n    model = Position\n    template_name = 'directory/positions/list.html'\n    context_object_name = 'positions'\n    paginate_by = 20\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Фильтрация\n        organization = self.request.GET.get('organization')\n        if organization:\n            queryset = queryset.filter(organization_id=organization)\n        subdivision = self.request.GET.get('subdivision')\n        if subdivision:\n            queryset = queryset.filter(subdivision_id=subdivision)\n        search = self.request.GET.get('search')\n        if search:\n            queryset = queryset.filter(position_name__icontains=search)\n        return queryset.select_related('organization', 'subdivision', 'department')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Должности'\n        context['organizations'] = Organization.objects.all()\n        context['subdivisions'] = StructuralSubdivision.objects.all()\n        return context\n\nclass PositionCreateView(LoginRequiredMixin, CreateView):\n    model = Position\n    form_class = PositionForm\n    template_name = 'directory/positions/form.html'\n    success_url = reverse_lazy('directory:position-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Добавление должности'\n        return context\n\nclass PositionUpdateView(LoginRequiredMixin, UpdateView):\n    model = Position\n    form_class = PositionForm\n    template_name = 'directory/positions/form.html'\n    success_url = reverse_lazy('directory:position-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Редактирование должности'\n        return context\n\nclass PositionDeleteView(LoginRequiredMixin, DeleteView):\n    model = Position\n    template_name = 'directory/positions/confirm_delete.html'\n    success_url = reverse_lazy('directory:position-list')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Удаление должности'\n        return context\n\ndef get_positions(request):\n    \"\"\"AJAX представление для получения должностей по подразделению\"\"\"\n    subdivision_id = request.GET.get('subdivision')\n    positions = Position.objects.filter(\n        subdivision_id=subdivision_id\n    ).values('id', 'position_name')  # Используем position_name вместо name\n    return JsonResponse(list(positions), safe=False)\n\n\ndef get_departments(request):\n    \"\"\"AJAX представление для получения отделов по организации и подразделению\"\"\"\n    organization_id = request.GET.get('organization')\n    subdivision_id = request.GET.get('subdivision')\n\n    departments = Department.objects.filter(\n        organization_id=organization_id,\n        subdivision_id=subdivision_id\n    ).values('id', 'name')\n\n    return JsonResponse(list(departments), safe=False)",
        "directory\\views\\__init__.py": "from django.views.generic import TemplateView\nfrom django.contrib.auth.mixins import LoginRequiredMixin\n\n# Импортируем представления для сотрудников\nfrom .employees import (\n    EmployeeListView,\n    EmployeeCreateView,\n    EmployeeUpdateView,\n    EmployeeDeleteView,\n    get_subdivisions\n)\n\n# Импортируем представления для должностей\nfrom .positions import (\n    PositionListView,\n    PositionCreateView,\n    PositionUpdateView,\n    PositionDeleteView,\n    get_positions,\n    get_departments  # Добавляем импорт get_departments\n)\n\nclass HomeView(LoginRequiredMixin, TemplateView):\n    template_name = 'directory/home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Главная'\n        return context\n\n# Экспортируем все представления\n__all__ = [\n    'HomeView',\n    'EmployeeListView',\n    'EmployeeCreateView',\n    'EmployeeUpdateView',\n    'EmployeeDeleteView',\n    'PositionListView',\n    'PositionCreateView',\n    'PositionUpdateView',\n    'PositionDeleteView',\n    'get_subdivisions',\n    'get_positions',\n    'get_departments'  # Добавляем в список экспорта\n]"
    },
    "stats": {
        "total_files": 33,
        "python_files": 29,
        "template_files": 0,
        "js_files": 4
    }
}